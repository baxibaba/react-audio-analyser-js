{"version":3,"sources":["../../src/component/AudioAnalyser/index.js"],"names":["React","Component","PropTypes","MediaRecorder","RenderCanvas","AudioAnalyser","nextProps","checkRender","props","renderProps","prevProps","status","event","inactive","stopAudio","recording","startAudio","paused","pauseAudio","children","className","audioSrc","renderCanvas","keys","Set","some","v","defaultProps","backgroundColor","strokeColor","audioBitsPerSecond","mimeType","audioType","audioOptions","width","height","propTypes","string","number","object","timeslice","startCallback","func","pauseCallback","stopCallback","onRecordCallback"],"mappings":";;;;;;;;;;;;AAAA;;;AAGA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;IAKMC,a,GAFLF,a,UACAC,Y;;;;;;;;;;;8CAkByBE,S,EAAW;AAC7B,mBAAOD,cAAcE,WAAd,CAA0B,KAAKC,KAA/B,EAAsCF,SAAtC,EAAiDD,cAAcI,WAA/D,CAAP;AACH;;;2CAEkBC,S,EAAW;AAC1B,gBAAI,KAAKF,KAAL,CAAWG,MAAX,KAAsBD,UAAUC,MAApC,EAA4C;AACxC,oBAAMC,QAAQ;AACVC,8BAAU,KAAKC,SADL;AAEVC,+BAAW,KAAKC,UAFN;AAGVC,4BAAQ,KAAKC;AAHH,kBAIZ,KAAKV,KAAL,CAAWG,MAJC,CAAd;AAKAC,yBAASA,OAAT;AACH;AACJ;;;iCAEQ;AAAA,yBAGD,KAAKJ,KAHJ;AAAA,gBAEDW,QAFC,UAEDA,QAFC;AAAA,gBAESC,SAFT,UAESA,SAFT;AAAA,gBAEoBC,QAFpB,UAEoBA,QAFpB;;AAIL,mBACE;AAAA;AAAA,kBAAK,WAAWD,SAAhB;AACI;AAAA;AAAA;AACK,yBAAKE,YAAL;AADL,iBADJ;AAIKH,wBAJL;AAMQE,4BACA;AAAA;AAAA;AACI,mDAAO,cAAP,EAAgB,KAAKA,QAArB;AADJ;AAPR,aADF;AAcH;;;;;AA9CD;;;;;;;;oCAQmBb,K,EAAOF,S,EAAWG,W,EAAa;AAC9C,gBAAMc,oCAAW,IAAIC,GAAJ,CAAQf,WAAR,CAAX,EAAN;AACA,mBAAOc,KAAKE,IAAL,CAAU;AAAA,uBAAKjB,MAAMkB,CAAN,MAAapB,UAAUoB,CAAV,CAAlB;AAAA,aAAV,CAAP;AACH;;;;EAfuBzB,S,WAEjBQ,W,GAAc,CAAC,QAAD,EAAW,UAAX,C;;AAmDzBJ,cAAcsB,YAAd,GAA6B;AACzBhB,YAAQ,EADiB;AAEzBU,cAAU,EAFe;AAGzBO,qBAAiB,kBAHQ;AAIzBC,iBAAa,SAJY;AAKzBT,eAAW,gBALc;AAMzBU,wBAAoB,MANK;AAOzBC,cAAU,YAPe;AAQzBC,eAAW,YARc;AASzBC,kBAAc,EATW;AAUzBC,WAAO,GAVkB;AAWzBC,YAAQ;AAXiB,CAA7B;AAaA9B,cAAc+B,SAAd,GAA0B;AACtBzB,YAAQT,UAAUmC,MADI;AAEtBhB,cAAUnB,UAAUmC,MAFE;AAGtBT,qBAAiB1B,UAAUmC,MAHL;AAItBR,iBAAa3B,UAAUmC,MAJD;AAKtBjB,eAAWlB,UAAUmC,MALC;AAMtBP,wBAAoB5B,UAAUoC,MANR;AAOtBN,eAAW9B,UAAUmC,MAPC;AAQtBJ,kBAAc/B,UAAUqC,MARF;AAStBL,WAAOhC,UAAUoC,MATK;AAUtBH,YAAQjC,UAAUoC,MAVI;AAWtBE,eAAWtC,UAAUoC,MAXC;AAYtBG,mBAAevC,UAAUwC,IAZH;AAatBC,mBAAezC,UAAUwC,IAbH;AActBE,kBAAc1C,UAAUwC,IAdF;AAetBG,sBAAkB3C,UAAUwC;AAfN,CAA1B;AAiBA,eAAerC,aAAf","file":"index.js","sourcesContent":["/**\r\n * Created by j_bleach on 2018/8/1.\r\n */\r\nimport React, {Component} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport MediaRecorder from \"./MediaRecorder\";\r\nimport RenderCanvas from \"./RenderCanvas\";\r\n\r\n\r\n@MediaRecorder\r\n@RenderCanvas\r\nclass AudioAnalyser extends Component {\r\n\r\n    static renderProps = [\"status\", \"audioSrc\"]\r\n\r\n    /**\r\n     * @author j_bleach 2020/1/1\r\n     * @describe [\"status\", \"audioSrc\"]判断是否渲染\r\n     * @param props: object\r\n     * @param nextProps: object\r\n     * @param renderProps: array\r\n     * @return boolean\r\n     */\r\n    static checkRender(props, nextProps, renderProps) {\r\n        const keys = [...new Set(renderProps)]\r\n        return keys.some(v => props[v] !== nextProps[v])\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        return AudioAnalyser.checkRender(this.props, nextProps, AudioAnalyser.renderProps)\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.status !== prevProps.status) {\r\n            const event = {\r\n                inactive: this.stopAudio,\r\n                recording: this.startAudio,\r\n                paused: this.pauseAudio\r\n            }[this.props.status];\r\n            event && event();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            children, className, audioSrc\r\n        } = this.props;\r\n        return (\r\n          <div className={className}>\r\n              <div>\r\n                  {this.renderCanvas()}\r\n              </div>\r\n              {children}\r\n              {\r\n                  audioSrc &&\r\n                  <div>\r\n                      <audio controls src={audioSrc}/>\r\n                  </div>\r\n              }\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nAudioAnalyser.defaultProps = {\r\n    status: \"\",\r\n    audioSrc: \"\",\r\n    backgroundColor: \"rgba(0, 0, 0, 1)\",\r\n    strokeColor: \"#ffffff\",\r\n    className: \"audioContainer\",\r\n    audioBitsPerSecond: 128000,\r\n    mimeType: \"audio/webm\",\r\n    audioType: \"audio/webm\",\r\n    audioOptions: {},\r\n    width: 500,\r\n    height: 100\r\n};\r\nAudioAnalyser.propTypes = {\r\n    status: PropTypes.string,\r\n    audioSrc: PropTypes.string,\r\n    backgroundColor: PropTypes.string,\r\n    strokeColor: PropTypes.string,\r\n    className: PropTypes.string,\r\n    audioBitsPerSecond: PropTypes.number,\r\n    audioType: PropTypes.string,\r\n    audioOptions: PropTypes.object,\r\n    width: PropTypes.number,\r\n    height: PropTypes.number,\r\n    timeslice: PropTypes.number,\r\n    startCallback: PropTypes.func,\r\n    pauseCallback: PropTypes.func,\r\n    stopCallback: PropTypes.func,\r\n    onRecordCallback: PropTypes.func\r\n};\r\nexport default AudioAnalyser;\r\n\r\n"]}