{"version":3,"sources":["../../src/component/AudioAnalyser/MediaRecorder.js"],"names":["convertWav","WebWorker","MediaRecorderFn","constraints","audio","mp3Worker","Worker","props","startAudio","recorder","mediaRecorder","state","navigator","mediaDevices","getUserMedia","then","recordAudio","stream","catch","MediaRecorderClass","checkAndExecFn","errorCallback","err","resumeAudio","pauseAudio","pause","onpause","pauseCallback","audioCtx","suspend","stopAudio","audioType","audioOptions","includes","stop","onstop","audioStream2Blob","stopCallback","audioChunk","initCanvas","compatibility","window","AudioContext","webkitAudioContext","analyser","createAnalyser","type","cb","wavBlob","chunk","audioWav","fr","FileReader","readAsArrayBuffer","Blob","frOnload","e","buffer","target","result","decodeAudioData","DataView","data","onload","audioMp3","wavBuf","postMessage","cmd","config","bitRate","rawInput","onmessage","mp3Blob","buf","audioBitsPerSecond","mimeType","timeslice","MediaRecorder","ondataavailable","event","onRecordCallback","push","resume","start","onstart","startCallback","onresume","initAudioAnalyser","onerror","renderCurve","source","createMediaStreamSource","connect","promisifiedOldGUM","webkitGetUserMedia","mozGetUserMedia","Promise","reject","Error","resolve","call","undefined","fn","Target"],"mappings":"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","file":"MediaRecorder.js","sourcesContent":["/**\r\n * @author j_bleach 2018/8/18\r\n * @describe 媒体记录（包含开始，暂停，停止等媒体流及回调操作）\r\n * @param Target 被装饰类（AudioAnalyser）\r\n */\r\nimport convertWav from \"./audioConvertWav\";\r\nimport WebWorker from \"./mp3worker.js\";\r\n\r\nconst MediaRecorderFn = Target => {\r\n    const constraints = {audio: true};\r\n    const mp3Worker = new Worker(WebWorker);\r\n    return class MediaRecorderClass extends Target {\r\n\r\n        constructor(props) {\r\n            super(props);\r\n            MediaRecorderClass.compatibility();\r\n            this.audioChunk = [] // 音频信息存储对象\r\n            this.mediaRecorder = null // 媒体记录对象\r\n            this.audioCtx = new (window.AudioContext || window.webkitAudioContext)(); // 音频上下文\r\n            this.analyser = this.audioCtx.createAnalyser();\r\n        }\r\n\r\n        /**\r\n         * @author j_bleach 2018/08/02 17:06\r\n         * @describe 浏览器navigator.mediaDevices兼容性处理\r\n         */\r\n        static compatibility() {\r\n            const promisifiedOldGUM = (constraints) => {\r\n                // First get ahold of getUserMedia, if present\r\n                const getUserMedia =\r\n                  navigator.getUserMedia ||\r\n                  navigator.webkitGetUserMedia ||\r\n                  navigator.mozGetUserMedia;\r\n\r\n                // Some browsers just don't implement it - return a rejected promise with an error\r\n                // to keep a consistent interface\r\n                if (!getUserMedia) {\r\n                    MediaRecorderClass.checkAndExecFn(this.props.errorCallback);\r\n                    return Promise.reject(\r\n                      new Error(\"getUserMedia is not implemented in this browser\")\r\n                    );\r\n                }\r\n                // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\r\n                return new Promise(function (resolve, reject) {\r\n                    getUserMedia.call(navigator, constraints, resolve, reject);\r\n                });\r\n            };\r\n\r\n            // Older browsers might not implement mediaDevices at all, so we set an empty object first\r\n            if (navigator.mediaDevices === undefined) {\r\n                navigator.mediaDevices = {};\r\n            }\r\n\r\n            // Some browsers partially implement mediaDevices. We can't just assign an object\r\n            // with getUserMedia as it would overwrite existing properties.\r\n            // Here, we will just add the getUserMedia property if it's missing.\r\n            if (navigator.mediaDevices.getUserMedia === undefined) {\r\n                navigator.mediaDevices.getUserMedia = promisifiedOldGUM;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @author j_bleach 2018/8/19\r\n         * @describe 验证函数，如果存在即执行\r\n         * @param fn: function 被验证函数\r\n         * @param e: object 事件对象 event object\r\n         */\r\n        static checkAndExecFn(fn, e) {\r\n            typeof fn === \"function\" && fn(e)\r\n        }\r\n\r\n        /**\r\n         * @author j_bleach 2018/8/19\r\n         * @describe 音频流转blob对象\r\n         * @param type: string 音频的mime-type\r\n         * @param cb: function 录音停止回调\r\n         */\r\n        audioStream2Blob(type, audioOptions, cb) {\r\n            let wavBlob = null;\r\n            const chunk = this.audioChunk;\r\n            const audioWav = () => {\r\n                let fr = new FileReader();\r\n                fr.readAsArrayBuffer(new Blob(chunk, {type}))\r\n                let frOnload = (e) => {\r\n                    const buffer = e.target.result\r\n                    this.audioCtx.decodeAudioData(buffer).then(data => {\r\n                        wavBlob = new Blob([new DataView(convertWav(data, audioOptions))], {\r\n                            type: \"audio/wav\"\r\n                        })\r\n                        MediaRecorderClass.checkAndExecFn(cb, wavBlob);\r\n                    })\r\n                }\r\n                fr.onload = frOnload\r\n            }\r\n            const audioMp3 = () => {\r\n                let fr = new FileReader();\r\n                fr.readAsArrayBuffer(new Blob(chunk, {type: \"audio/wav\"}))\r\n                let frOnload = (e) => {\r\n                    const buffer = e.target.result;\r\n                    this.audioCtx.decodeAudioData(buffer).then(data => {\r\n                        const wavBuf = convertWav(data, audioOptions)\r\n                        mp3Worker.postMessage({\r\n                            cmd: \"init\",\r\n                            config: {bitRate: 128}\r\n                        });\r\n                        mp3Worker.postMessage({cmd: \"encode\", rawInput: wavBuf});\r\n                        mp3Worker.postMessage({cmd: \"finish\"});\r\n\r\n                        mp3Worker.onmessage = (e) => {\r\n                            if (e.data.cmd == \"end\") {\r\n                                const mp3Blob = new Blob(e.data.buf, {type});\r\n                                MediaRecorderClass.checkAndExecFn(cb, mp3Blob);\r\n                            }\r\n                        };\r\n                    })\r\n                }\r\n                fr.onload = frOnload\r\n            }\r\n            switch (type) {\r\n                case \"audio/webm\":\r\n                    MediaRecorderClass.checkAndExecFn(cb, new Blob(chunk, {type}));\r\n                    break;\r\n                case \"audio/wav\":\r\n                    audioWav();\r\n                    break;\r\n                case \"audio/mp3\":\r\n                    audioMp3();\r\n                    break;\r\n                default:\r\n                    return void 0\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @author j_bleach 2018/8/18\r\n         * @describe 开始录音\r\n         */\r\n        startAudio = () => {\r\n            const recorder = this.mediaRecorder;\r\n            if (!recorder || (recorder && recorder.state === \"inactive\")) {\r\n                navigator.mediaDevices.getUserMedia(constraints).then(stream => {\r\n                    this.recordAudio(stream);\r\n                }).catch(err => {\r\n                      MediaRecorderClass.checkAndExecFn(this.props.errorCallback, err);\r\n                      // throw new Error(\"getUserMedia failed:\", err);\r\n                  }\r\n                )\r\n                return false\r\n            }\r\n            if (recorder && recorder.state === \"paused\") {\r\n                this.resumeAudio();\r\n            }\r\n        }\r\n        /**\r\n         * @author j_bleach 2018/8/19\r\n         * @describe 暂停录音\r\n         */\r\n        pauseAudio = () => {\r\n            const recorder = this.mediaRecorder;\r\n            if (recorder && recorder.state === \"recording\") {\r\n                recorder.pause();\r\n                recorder.onpause = () => {\r\n                    MediaRecorderClass.checkAndExecFn(this.props.pauseCallback);\r\n                }\r\n                this.audioCtx.suspend();\r\n            }\r\n        }\r\n        /**\r\n         * @author j_bleach 2018/8/18\r\n         * @describe 停止录音\r\n         */\r\n        stopAudio = () => {\r\n            const {audioType, audioOptions} = this.props;\r\n            const recorder = this.mediaRecorder;\r\n            if (recorder && [\"recording\", \"paused\"].includes(recorder.state)) {\r\n                recorder.stop();\r\n                recorder.onstop = () => {\r\n                    this.audioStream2Blob(audioType, audioOptions, this.props.stopCallback);\r\n                    this.audioChunk = []; // 结束后，清空音频存储\r\n                }\r\n                this.audioCtx.suspend();\r\n                this.initCanvas();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @author j_bleach 2018/8/18\r\n         * @describe mediaRecorder音频记录\r\n         * @param stream: binary data 音频流\r\n         */\r\n        recordAudio(stream) {\r\n            const {audioBitsPerSecond, mimeType, timeslice} = this.props;\r\n            this.mediaRecorder = new MediaRecorder(stream, {audioBitsPerSecond, mimeType});\r\n            this.mediaRecorder.ondataavailable = (event) => {\r\n                MediaRecorderClass.checkAndExecFn(this.props.onRecordCallback, event.data);\r\n                this.audioChunk.push(event.data);\r\n            }\r\n            this.audioCtx.resume();\r\n            this.mediaRecorder.start(timeslice);\r\n            this.mediaRecorder.onstart = (e) => {\r\n                MediaRecorderClass.checkAndExecFn(this.props.startCallback, e);\r\n            }\r\n            this.mediaRecorder.onresume = (e) => {\r\n                this.initAudioAnalyser(stream)\r\n                MediaRecorderClass.checkAndExecFn(this.props.startCallback, e);\r\n            }\r\n            this.mediaRecorder.onerror = (e) => {\r\n                MediaRecorderClass.checkAndExecFn(this.props.errorCallback, e);\r\n            }\r\n            this.initAudioAnalyser(stream)\r\n            this.renderCurve(this.analyser);\r\n        }\r\n\r\n        /**\r\n         * @author j_bleach 2019/10/31\r\n         * @describe 重置音频上下文（解决谷歌浏览器 音频数组链接断开问题）\r\n         */\r\n\r\n        initAudioAnalyser(stream) {\r\n            this.analyser = this.audioCtx.createAnalyser();\r\n            const source = this.audioCtx.createMediaStreamSource(stream);\r\n            source.connect(this.analyser);\r\n        }\r\n\r\n        /**\r\n         * @author j_bleach 2018/8/19\r\n         * @describe 恢复录音\r\n         */\r\n        resumeAudio() {\r\n            this.audioCtx.resume();\r\n            this.mediaRecorder.resume();\r\n        }\r\n    }\r\n}\r\nexport default MediaRecorderFn;\r\n"]}