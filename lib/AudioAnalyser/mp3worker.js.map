{"version":3,"sources":["../../src/component/AudioAnalyser/mp3worker.js"],"names":["workercode","lamejs","new_byte","count","Int8Array","new_short","Int16Array","new_int","Int32Array","new_float","Float32Array","new_double","Float64Array","new_float_n","args","length","sz","slice","A","i","push","new_int_n","new_short_n","new_array_n","Array","Arrays","fill","a","fromIndex","toIndex","val","arguments","System","arraycopy","src","srcPos","dest","destPos","srcEnd","Util","SQRT2","FAST_LOG10","x","Math","log10","FAST_LOG10_X","y","ShortBlock","ordinal","short_block_allowed","short_block_coupled","short_block_dispensed","short_block_forced","Float","MAX_VALUE","VbrMode","vbr_off","vbr_mt","vbr_rh","vbr_abr","vbr_mtrh","vbr_default","assert","module_exports","MPEGMode","_ordinal","STEREO","JOINT_STEREO","DUAL_CHANNEL","MONO","NOT_SET","Version","LAME_URL","LAME_MAJOR_VERSION","LAME_MINOR_VERSION","LAME_PATCH_VERSION","PSY_MAJOR_VERSION","PSY_MINOR_VERSION","getLameVersion","getLameShortVersion","getLameVeryShortVersion","getPsyVersion","getLameUrl","getLameOsBitness","Takehiro","qupvt","setModules","_qupvt","Bits","b","bits","subdv_table","quantize_lines_xrpow_01","l","istep","xr","xrPos","ix","ixPos","compareval0","quantize_lines_xrpow","remaining","x0","x1","x2","x3","rx0","rx1","rx2","rx3","adj43","quantize_xrpow","xp","pi","codInfo","prevNoise","sfb","sfbmax","j","prev_data_use","accumulate","accumulate01","xpPos","iData","iDataPos","acc_iData","acc_iDataPos","acc_xp","acc_xpPos","global_gain","block_type","Encoder","SHORT_TYPE","step","NORM_TYPE","scalefac","preflag","pretab","scalefac_scale","subblock_gain","window","width","max_nonzero_coeff","usefullsize","sfb_count1","ix_max","endPos","max1","max2","count_bit_ESC","end","t1","t2","s","linbits","Tables","ht","xlen","sum","sum2","largetbl","count_bit_noESC","sum1","hlen1","hlen","count_bit_noESC_from2","table23","table56","count_bit_noESC_from3","sum3","hlen2","hlen3","t","huf_tbl_noESC","choose_table","max","QuantizePVT","IXMAX_VAL","LARGE_BITS","choice2","linmax","choice","noquant_count_bits","gfc","gi","prev_noise","l3_enc","min","count1","a1","a2","p","t32l","t33l","count1table_select","count1bits","big_values","scalefac_band","region0_count","bv_scf","region1_count","bi","table_select","SBMAX_l","use_best_huffman","part2_3_length","best_huffman_divide","count_bits","w","IPOW20","xrpow_max","substep_shaping","gain","roundfac","pseudohalf","k","recalc_divide_init","cod_info","r01_bits","r01_div","r0_tbl","r1_tbl","bigv","r0","r0bits","r0t","r1","r1t","recalc_divide_sub","cod_info2","r2","r2t","assign","GrInfo","mode_gr","slen1_n","slen2_n","slen1_tab","slen2_tab","scfsi_calc","ch","l3_side","tt","g0","scfsi_band","scfsi","s1","c1","s2","c2","SBPSY_l","c","part2_length","scalefac_compress","best_scalefac_store","gr","recalc","scale_bitcount","scale_bitcount_lsf","all_scalefactors_not_negative","n","scale_short","scale_mixed","scale_long","max_slen1","max_slen2","tab","mixed_block_flag","sfbdivide","max_range_sfac_tab","table_number","row_in_table","partition","nr_sfb","over","max_sfac","partition_table","nr_of_sfb_block","slen1","slen2","slen3","slen4","sfb_partition_table","slen","log2tab","err","printf","huffman_init","scfb_anz","bv_index","GainAnalysis","STEPS_per_dB","MAX_dB","GAIN_NOT_ENOUGH_SAMPLES","GAIN_ANALYSIS_ERROR","GAIN_ANALYSIS_OK","INIT_GAIN_ANALYSIS_ERROR","INIT_GAIN_ANALYSIS_OK","YULE_ORDER","MAX_ORDER","MAX_SAMP_FREQ","RMS_WINDOW_TIME_NUMERATOR","RMS_WINDOW_TIME_DENOMINATOR","MAX_SAMPLES_PER_WINDOW","PINK_REF","RMS_PERCENTILE","ABYule","ABButter","filterYule","input","inputPos","output","outputPos","nSamples","kernel","filterButter","ResetSampleFrequency","rgData","samplefreq","linprebuf","lstepbuf","loutbuf","rinprebuf","rstepbuf","routbuf","reqindex","sampleWindow","lsum","rsum","totsamp","ill","InitGainAnalysis","linpre","rinpre","lstep","rstep","lout","rout","B","fsqr","d","AnalyzeSamples","left_samples","left_samplesPos","right_samples","right_samplesPos","num_samples","num_channels","curleft","curleftBase","curright","currightBase","batchsamples","cursamples","cursamplepos","ival","analyzeResult","len","elems","upper","ceil","GetTitleGain","retval","Presets","VBRPresets","qual","comp","compS","shThreshold","shThresholdS","adj","adjShort","lower","curve","sens","inter","joint","mod","fix","vbr_q","quant_comp","quant_comp_s","expY","st_lrm","st_s","masking_adj","masking_adj_short","ath_lower","ath_curve","ath_sensitivity","interch","safejoint","sfb21mod","msfix","ABRPresets","kbps","bass","sc","mask","interCh","sfScale","nsmsfix","nsbass","scale","sfscale","lame","_lame","vbr_old_switch_map","vbr_psy_switch_map","apply_vbr_preset","gfp","enforce","vbr_preset","VBR","VBR_q_frac","q","set","lame_set_VBR_q","abs","quant_comp_short","experimentalY","internal_flags","nsPsy","attackthre","attackthre_s","maskingadjust","maskingadjust_short","ATHlower","ATHcurve","athaa_sensitivity","interChRatio","exp_nspsytune","VBR_q","abr_switch_map","apply_abr_preset","preset","actual_bitrate","r","nearestBitrateFullIndex","VBR_mean_bitrate_kbps","brate","disable_reservoir","noise_shaping","int","apply_preset","Lame","R3MIX","V3","MEDIUM","V4","MEDIUM_FAST","STANDARD","V2","STANDARD_FAST","EXTREME","V0","EXTREME_FAST","INSANE","V9","V8","V7","V6","V5","V1","ret","Reservoir","bs","_bs","ResvFrameBegin","mean_bits","maxmp3buf","frameLength","getframebits","sideinfo_len","resvLimit","out_samplerate","strict_ISO","ResvMax","fullFrameBits","ResvSize","resvDrain_pre","pinfo","resvsize","ResvMaxBits","targ_bits","cbr","add_bits","extra_bits","ResvAdjust","ResvFrameEnd","over_bits","stuffingBits","resvDrain_post","mdb_bytes","main_data_begin","VBRTag","NUMTOCENTRIES","MAXFRAMESIZE","v","_v","FRAMES_FLAG","BYTES_FLAG","TOC_FLAG","VBR_SCALE_FLAG","VBRHEADERSIZE","LAMEHEADERSIZE","XING_BITRATE1","XING_BITRATE2","XING_BITRATE25","ISO_8859_1","VBRTag0","VBRTag1","crc16Lookup","addVbr","bitrate","nVbrNumFrames","seen","want","pos","size","bag","xingSeekTable","act","indx","floor","seek_point","addVbrFrame","bitrate_table","version","bitrate_index","VBR_seek_table","extractInteger","buf","bufPos","createInteger","value","createShort","isVbrTag","String","equals","shiftInBitsValue","setLameTagFrameHeader","buffer","error_protection","samplerate_index","extension","mode","mode_ext","copyright","original","emphasis","abyte","bbyte","free_format","BitrateIndex","getVbrTag","pTagData","VBRTagData","flags","hId","hSrIndex","hMode","hBitrate","samprate","samplerate_table","head_flags","frames","bytes","toc","vbrScale","headersize","encDelay","encPadding","InitVbrTag","kbps_header","totalFrameSize","headerSize","TotalFrameSize","bWriteVbrTag","nBytesWritten","add_dummy_byte","crcUpdateLookup","crc","tmp","updateMusicCRC","bufferPos","putLameVBR","musicLength","streamBuffer","streamBufferPos","bytesWritten","encoder_delay","encoder_padding","quality","vbr","revision","revMethod","vbrTypeTranslator","lowpass","lowpassfreq","peakSignalAmplitude","radioReplayGain","audiophileReplayGain","noiseShaping","stereoMode","nonOptimal","sourceFreq","misc","musicCRC","expNPsyTune","safeJoint","noGapMore","noGapPrevious","noGapCount","nogap_total","noGapCurr","nogap_current","athType","ATHtype","abrBitrate","VBR_min_bitrate_kbps","findReplayGain","RadioGain","findPeakSample","PeakSample","pow","force_ms","in_samplerate","short_blocks","highpassfreq","scale_left","scale_right","noATH","ATHonly","nMusicCRC","charAt","skipId3v2","fpStream","seek","id3v2Header","readFully","id3v2TagSize","startsWith","getLameTagFrame","Class_ID","LAME_ID","streamIndex","streamSize","CRC_writeheader","putVbrTag","stream","write","BitStream","EQ","NEQ","self","CRC16_POLYNOMIAL","MAX_LENGTH","ga","mpg","ver","_ga","_mpg","_ver","_vbr","totbit","bufByteIdx","bufBitIdx","bit_rate","padding","putheader_bits","header","w_ptr","LameInternalFlags","MAX_HEADER_BUF","putbits2","write_timing","putbits_noheaders","drain_into_ancillary","remainingBits","ancillary_flag","writeheader","ptr","h_ptr","CRC_update","byte","encodeSideInfo2","bitsPerFrame","channels_out","private_bits","band","old","println","huffman_coder_count1","h","huffbits","table","Huffmancode","tableindex","start","cbits","xbits","ext","linbits_x1","linbits_x2","ShortHuffmancodebits","region1Start","LongHuffmancodebits","bigvalues","region2Start","writeMainData","data_bits","tot_bits","sfb_partition","scale_bits","sfbs","TotalBytes","total","compute_flushbits","total_bytes_output","flushbits","remaining_headers","last_ptr","first_ptr","flush_bitstream","rgdata","noclipGainChange","noclipScale","format_bitstream","copy_buffer","mp3data","minimum","decode_on_the_fly","pcm_buf","mp3_in","samples_out","hip_decode1_unclipped","hip","init_bit_stream_w","LAME_MAXMP3BUFFER","HuffCodeTab","hl","t1HB","t2HB","t3HB","t5HB","t6HB","t7HB","t8HB","t9HB","t10HB","t11HB","t12HB","t13HB","t15HB","t16HB","t24HB","t32HB","t33HB","t1l","t2l","t3l","t5l","t6l","t7l","t8l","t9l","t10l","t11l","t12l","t13l","t15l","t16_5l","t16l","t24l","MeanBits","meanBits","CalcNoiseResult","over_noise","tot_noise","max_noise","over_count","over_SSD","VBRQuantize","tak","_tk","ATH","useAdjust","aaSensitivityP","adjust","adjustLimit","decay","SBMAX_s","psfb21","PSFB21","psfb12","PSFB12","cb_l","CBANDS","cb_s","eql_w","BLKSIZE","LameGlobalFlags","class_id","analysis","decode_only","write_id3tag_automatic","compression_ratio","experimentalZ","VBR_max_bitrate_kbps","VBR_hard_min","lowpasswidth","highpasswidth","ATHshort","athaa_type","athaa_loudapprox","useTemporal","tune","tune_value_a","framesize","frameNum","lame_allocated_gfp","CBRNewIterationLoop","_quantize","quantize","iteration_loop","pe","ms_ener_ratio","ratio","l3_xmin","L3Side","SFBMAX","xrpow","max_bits","mb","rv","on_pe","MPG_MD_MS_LR","ms_convert","reduce_side","masking_lower_db","PSY","mask_adjust","mask_adjust_short","masking_lower","init_outer_loop","init_xrpow","calc_xmin","outer_loop","iteration_finish_one","ReplayGain","freqindex","first","ScaleFac","arrL","arrS","arr21","arr12","Q_MAX","Q_MAX2","psy","_rv","_psy","POW20","pow20","ipow20","DBL_EPSILON","PRECALC_SIZE","NSATHSCALE","sfBandIndex","pow43","ATHmdct","f","ath","ATHformula","compute_ath","ATH_l","ATH_psfb21","ATH_s","ATH_psfb12","samp_freq","freq","ATH_f","iteration_init","iteration_init_init","alto","treble","sfb21","longfact","shortfact","tbits","MAX_BITS_PER_GRANULE","MAX_BITS_PER_CHANNEL","fac","move_bits","athAdjust","athFloor","o","u","pxmin","pxminPos","gsfb","ath_over","enable_athaa_fix","psy_lmax","en0","xmin","rh1","rh2","xa","xb","e","en","thm","max_nonzero","sfb_smin","psymax","tmpATH","SBPSY_s","StartLine","calc_noise_core","startline","noise","temp","ix01","calc_noise","distort","res","distortPos","l3_xminPos","over_noise_db","tot_noise_db","scalefacPos","noise_log","sl","set_pinfo","sfb2","en1","ifqstep","xfsf","sfb_lmax","bw","thr","LAMEsfb","en_s","xfsf_s","thr_s","LAMEsfb_s","LAMEqss","LAMEmainbits","LAMEsfbits","set_frame_pinfo","scalefac_sav","CalcNoiseData","clone_int","array","clone_float","other","Quantize","tk","init_xrpow_core","sqrt","psfb21_analogsilence","stop","ath21","block","ath12","sfb21_extra","ixwork","BinSearchDirection","BINSEARCH_NONE","BINSEARCH_UP","BINSEARCH_DOWN","bin_search_StepSize","desired_rate","nBits","CurrentStep","flagGoneOver","OldValue","Direction","trancate_smallspectrums","work","allowedNoise","trancateThreshold","nsame","sort","loop_break","penalties","get_klemm_noise","klemm_noise","quant_compare","best","calc","better","amp_scalefac_bands","bRefine","ifqstep34","trigger","noise_shaping_amp","inc_scalefac_scale","inc_subblock_gain","amp","balance_noise","status","cod_info_w","save_xrpow","best_noise_info","best_part2_3_length","bEndOfSearch","best_ggain_pass1","age","noise_info","search_limit","maxggain","huff_bits","full_outer_loop","VBR_encode_granule","min_bits","bst_cod_info","bst_xrpow","Max_bits","real_bits","this_bits","dbits","found","get_framebits","frameBits","VBR_min_bitrate","VBR_max_bitrate","VBR_old_prepare","bands","analog_silence","avg","mxb","exp","bitpressure_strategy","VBR_new_prepare","maximum_framebits","calc_target_bits","analog_silence_bits","max_frame_bits","res_factor","totbits","NewMDCT","enwindow","NS","NL","win","tantab_l","cx","ca","cs","order","window_subband","x1Pos","wp","mdct_short","inout","inoutPos","tc0","tc1","tc2","ts0","ts1","ts2","mdct_long","out","outPos","_in","ct","st","tc3","tc4","ts5","ts6","ts7","ts8","ts3","ts4","tc5","tc6","tc7","tc8","mdct_sub48","w0","w1","wk","wkPos","mdct_enc","mdct_encPos","samp","sb_sample","sampPos","type","band0","band1","amp_filter","bu","bd","III_psy_ratio","III_psy_xmin","ENCDELAY","POSTDELAY","MDCTDELAY","FFTOFFSET","DECDELAY","SBLIMIT","HBLKSIZE","BLKSIZE_s","HBLKSIZE_s","START_TYPE","STOP_TYPE","MPG_MD_LR_LR","MPG_MD_LR_I","MPG_MD_MS_I","fircoef","newMDCT","adjust_ATH","gr2_max","max_pow","loudness_sq","adj_lim_new","updateStats","bitrate_stereoMode_Hist","bt","bitrate_blockType_Hist","lame_encode_frame_init","inbuf","primebuff0","primebuff1","lame_encode_mp3_frame","inbuf_l","inbuf_r","mp3buf","mp3bufPos","mp3buf_size","mp3count","masking_LR","masking_MS","masking","tot_ener","pe_MS","pe_use","slot_lag","frac_SpF","psymodel","bufp","bufpPos","blocktype","L3psycho_anal_vbr","L3psycho_anal_ns","sum_pe_MS","sum_pe_LR","gi0","gi1","ms_ratio","ers","energy","pefirbuf","pcmdata","VBRSeekInfo","IIISideInfo","iii_psy_xmin","NsPsy","last_en_subshort","lastAttacks","MFSIZE","BPC","MAX_HEADER_LEN","fill_buffer_resample_init","mfbuf","channels_in","resample_ratio","mf_samples_to_encode","mf_size","lowpass1","lowpass2","highpass1","highpass2","noise_shaping_stop","tag_spec","inbuf_old","blackfilt","itime","Header","minval_l","minval_s","nb_1","nb_2","nb_s1","nb_s2","s3_ss","s3_ll","loudness_sq_save","mld_l","mld_s","bm_l","bo_l","bm_s","bo_s","npart_l","npart_s","s3ind","s3ind_s","numlines_s","numlines_l","rnumlines_l","mld_cb_l","mld_cb_s","numlines_s_num1","numlines_l_num1","ms_ratio_s_old","ms_ratio_l_old","ms_ener_ratio_old","blocktype_old","AudiophileGain","in_buffer_nsamples","in_buffer_0","in_buffer_1","FFT","window_s","costab","fht","fz","fzPos","tri","k4","fi","fn","k1","k2","k3","kx","f0","f1","f2","f3","g1","g2","g3","rv_tbl","fft_short","x_real","chn","fft_long","jj","init_fft","cos","PI","PsyModel","fft","LOG10","rpelev","rpelev2","rpelev_s","rpelev2_s","DELBARK","VO_SCALE","temporalmask_sustain_sec","NS_PREECHO_ATT0","NS_PREECHO_ATT1","NS_PREECHO_ATT2","NS_MSFIX","NSATTACKTHRE","NSATTACKTHRE_S","NSFIRLEN","LN_TO_LOG10","NON_LINEAR_SCALE_ENERGY","psycho_loudness_approx","loudness_power","compute_ffts","fftenergy","fftenergy_s","wsamp_l","wsamp_lPos","wsamp_s","wsamp_sPos","gr_out","re","im","totalenergy","energy_save","I1LIMIT","I2LIMIT","MLIMIT","ma_max_i1","ma_max_i2","ma_max_m","init_mask_add_max_values","table1","table2","table3","mask_add","m1","m2","kk","shortblock","table2_","vbrpsy_mask_add","calc_interchannel_masking","sb","sblock","msfix1","mld","rmid","rside","ns_msfix","athadjust","msfix2","athlower","thmLR","thmM","thmS","convert_partition2scalefac_s","eb","enn","thmm","bo_s_sb","b_lim","w_curr","bo_s_weight","w_next","convert_partition2scalefac_l","bo_l_sb","bo_l_weight","compute_masking_s","ebb","m","el","ecb","block_type_set","uselongblock","blocktype_d","NS_INTERP","regcoef_s","pecalc_s","mr","pe_s","regcoef_l","pecalc_l","pe_l","calc_energy","calc_mask_index_l","mask_idx","last_tab_entry","masking_ratio","masking_MS_ratio","percep_entropy","percep_MS_entropy","wsamp_L","wsamp_S","eb_l","eb_s","numchn","ns_hpfsmpl","pcfact","mask_idx_l","mask_idx_s","firbuf","firbufPos","en_subshort","en_short","attack_intensity","ns_uselongblock","attackThreshold","ns_attacks","pf","pfPos","pfe","ers_save","idx","eb2","ppe","ppePos","vbrpsy_compute_fft_l","vbrpsy_compute_fft_s","vbrpsy_compute_loudness_approximation_l","fircoef_","vbrpsy_attack_detection","sub_short_factor","n_chn_out","n_chn_psy","factor","vbrpsy_skip_masking_s","vbrpsy_skip_masking_l","psyvbr_calc_mask_index_s","vbrpsy_compute_masking_s","float","last","dd","dd_n","avg_mask","vbrpsy_compute_masking_l","ecb_limit","ecb_limit_2","ecb_limit_1","vbrpsy_compute_block_type","vbrpsy_apply_block_type","vbrpsy_compute_MS_thresholds","cb_mld","ath_cb","ebM","ebS","thmL","thmR","mld_m","thmMS","ch01","new_thmm","s3_func_x","bark","hf_slope","tempx","tempy","norm_s3_func_x","lim_a","lim_b","norm","s3_func","freq2bark","atan","init_numline","numlines","bo","bm","bval","bval_width","bo_w","sfreq","blksize","scalepos","deltafreq","sbmax","b_frq","sample_freq_frac","ni","bark1","j2","i1","i2","arg","f_tmp","bark2","init_s3_values","npart","use_old_s3","s3","numberOfNoneZero","s3_x_norm","stereo_demask","psymodel_init","useOldS3","bvl_a","bvl_b","snr_l_a","snr_l_b","snr_s_a","snr_s_b","snr","level","log","frame_duration","freq_inc","eql_balance","ATHformula_GB","LAME_MAXALBUMART","qu","id3","mpglib","enc","_p","_qu","_id3","_mpglib","LowPassHighPass","lowerlimit","BandPass","lPass","lame_init_old","lame_init","filter_coef","full_bitrate_table","lower_range","lower_range_kbps","upper_range","upper_range_kbps","optimum_samplefreq","input_samplefreq","suggested_samplefreq","SmpFrqIndex","sample_freq","gpf","FindNearestBitrate","bRate","samplerate","optimum_bandwidth","lh","freq_map","table_index","lame_init_params_ppflt","lowpass_band","highpass_band","minband","maxband","fc1","fc2","lame_init_qval","lame_init_bitstream","id3tag_write_v2","lame_init_params","map2MP3Frequency","linear_int","hip_decode_exit","hip_decode_init","cmp","LAME_DEFAULT_QUALITY","VBRNewIterationLoop","VBROldIterationLoop","vbrmode","ABRIterationLoop","update_inbuffer_size","nsamples","lame_encode_flush","mp3buffer","mp3bufferPos","mp3buffer_size","imp3","mp3buffer_size_remaining","end_padding","frames_left","samples_to_encode","mf_needed","calcNeeded","bunch","frame_num","lame_encode_buffer","id3tag_write_v1","buffer_l","buffer_r","in_buffer","lame_encode_buffer_sample","mp3size","mp3out","in_bufferPos","in_buffer_ptr","n_in","n_out","inOut","InOut","fill_buffer","buf_size","lame_encode_frame","NumUsed","num_used","gcd","blackman","fcn","wcn","bkwn","sin","fill_buffer_resample","outbuf","outbufPos","desired_len","bpc","intratio","filter_l","BLACKSIZE","offset","time0","joff","xvalue","n_shift","io","numUsed","GetAudio","parse","parse2","mpg2","Parse","pre","ver2","id32","pre2","MPGLib","ID3Tag","_bits","Mp3Encoder","channels","console","error","gaud","retcode","maxSamples","encodeBuffer","left","right","_sz","subarray","flush","WavHeader","dataOffset","dataLen","sampleRate","fourccToInt","fourcc","charCodeAt","RIFF","WAVE","fmt_","data","readHeader","dataView","getUint32","fileLen","fmtLen","getUint16","mp3Encoder","wav","samplesLeft","config","dataBuffer","samplesRight","clearBuffer","appendToBuffer","mp3Buf","init","prefConfig","encode","arrayBuffer","DataView","postMessage","cmd","msg","undefined","bitRate","progress","finish","onmessage","rawInput","code","toString","substring","indexOf","lastIndexOf","blob","Blob","worker_script","URL","createObjectURL","module","exports"],"mappings":"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","file":"mp3worker.js","sourcesContent":["/**\r\n * Created by j_bleach on 2018/9/11.\r\n */\r\nconst workercode = () => {\r\n    /*eslint-disable*/\r\n    function lamejs() {\r\n        function new_byte(count) {\r\n            return new Int8Array(count);\r\n        }\r\n\r\n        function new_short(count) {\r\n            return new Int16Array(count);\r\n        }\r\n\r\n        function new_int(count) {\r\n            return new Int32Array(count);\r\n        }\r\n\r\n        function new_float(count) {\r\n            return new Float32Array(count);\r\n        }\r\n\r\n        function new_double(count) {\r\n            return new Float64Array(count);\r\n        }\r\n\r\n        function new_float_n(args) {\r\n            if (args.length == 1) {\r\n                return new_float(args[0]);\r\n            }\r\n            var sz = args[0];\r\n            args = args.slice(1);\r\n            var A = [];\r\n            for (var i = 0; i < sz; i++) {\r\n                A.push(new_float_n(args));\r\n            }\r\n            return A;\r\n        }\r\n        function new_int_n(args) {\r\n            if (args.length == 1) {\r\n                return new_int(args[0]);\r\n            }\r\n            var sz = args[0];\r\n            args = args.slice(1);\r\n            var A = [];\r\n            for (var i = 0; i < sz; i++) {\r\n                A.push(new_int_n(args));\r\n            }\r\n            return A;\r\n        }\r\n\r\n        function new_short_n(args) {\r\n            if (args.length == 1) {\r\n                return new_short(args[0]);\r\n            }\r\n            var sz = args[0];\r\n            args = args.slice(1);\r\n            var A = [];\r\n            for (var i = 0; i < sz; i++) {\r\n                A.push(new_short_n(args));\r\n            }\r\n            return A;\r\n        }\r\n\r\n        function new_array_n(args) {\r\n            if (args.length == 1) {\r\n                return new Array(args[0]);\r\n            }\r\n            var sz = args[0];\r\n            args = args.slice(1);\r\n            var A = [];\r\n            for (var i = 0; i < sz; i++) {\r\n                A.push(new_array_n(args));\r\n            }\r\n            return A;\r\n        }\r\n\r\n\r\n        var Arrays = {};\r\n\r\n        Arrays.fill = function (a, fromIndex, toIndex, val) {\r\n            if (arguments.length == 2) {\r\n                for (var i = 0; i < a.length; i++) {\r\n                    a[i] = arguments[1];\r\n                }\r\n            } else {\r\n                for (var i = fromIndex; i < toIndex; i++) {\r\n                    a[i] = val;\r\n                }\r\n            }\r\n        };\r\n\r\n        var System = {};\r\n\r\n        System.arraycopy = function (src, srcPos, dest, destPos, length) {\r\n            var srcEnd = srcPos + length;\r\n            while (srcPos < srcEnd)\r\n                dest[destPos++] = src[srcPos++];\r\n        };\r\n\r\n\r\n        var Util = {};\r\n        Util.SQRT2 = 1.41421356237309504880;\r\n        Util.FAST_LOG10 = function (x) {\r\n            return Math.log10(x);\r\n        };\r\n\r\n        Util.FAST_LOG10_X = function (x, y) {\r\n            return Math.log10(x) * y;\r\n        };\r\n\r\n        function ShortBlock(ordinal) {\r\n            this.ordinal = ordinal;\r\n        }\r\n        /**\r\n         * LAME may use them, even different block types for L/R.\r\n         */\r\n        ShortBlock.short_block_allowed = new ShortBlock(0);\r\n        /**\r\n         * LAME may use them, but always same block types in L/R.\r\n         */\r\n        ShortBlock.short_block_coupled = new ShortBlock(1);\r\n        /**\r\n         * LAME will not use short blocks, long blocks only.\r\n         */\r\n        ShortBlock.short_block_dispensed = new ShortBlock(2);\r\n        /**\r\n         * LAME will not use long blocks, short blocks only.\r\n         */\r\n        ShortBlock.short_block_forced = new ShortBlock(3);\r\n\r\n        var Float = {};\r\n        Float.MAX_VALUE = 3.4028235e+38;\r\n\r\n        function VbrMode(ordinal) {\r\n            this.ordinal = ordinal;\r\n        }\r\n        VbrMode.vbr_off = new VbrMode(0);\r\n        VbrMode.vbr_mt = new VbrMode(1);\r\n        VbrMode.vbr_rh = new VbrMode(2);\r\n        VbrMode.vbr_abr = new VbrMode(3);\r\n        VbrMode.vbr_mtrh = new VbrMode(4);\r\n        VbrMode.vbr_default = VbrMode.vbr_mtrh;\r\n\r\n        var assert = function (x) {\r\n            //console.assert(x);\r\n        };\r\n\r\n        var module_exports = {\r\n            \"System\": System,\r\n            \"VbrMode\": VbrMode,\r\n            \"Float\": Float,\r\n            \"ShortBlock\": ShortBlock,\r\n            \"Util\": Util,\r\n            \"Arrays\": Arrays,\r\n            \"new_array_n\": new_array_n,\r\n            \"new_byte\": new_byte,\r\n            \"new_double\": new_double,\r\n            \"new_float\": new_float,\r\n            \"new_float_n\": new_float_n,\r\n            \"new_int\": new_int,\r\n            \"new_int_n\": new_int_n,\r\n            \"new_short\": new_short,\r\n            \"new_short_n\": new_short_n,\r\n            \"assert\": assert\r\n        };\r\n//package mp3;\r\n\r\n        /* MPEG modes */\r\n        function MPEGMode(ordinal) {\r\n            var _ordinal = ordinal;\r\n            this.ordinal = function () {\r\n                return _ordinal;\r\n            }\r\n        }\r\n\r\n        MPEGMode.STEREO = new MPEGMode(0);\r\n        MPEGMode.JOINT_STEREO = new MPEGMode(1);\r\n        MPEGMode.DUAL_CHANNEL = new MPEGMode(2);\r\n        MPEGMode.MONO = new MPEGMode(3);\r\n        MPEGMode.NOT_SET = new MPEGMode(4);\r\n\r\n        function Version() {\r\n\r\n            /**\r\n             * URL for the LAME website.\r\n             */\r\n            var LAME_URL = \"http://www.mp3dev.org/\";\r\n\r\n            /**\r\n             * Major version number.\r\n             */\r\n            var LAME_MAJOR_VERSION = 3;\r\n            /**\r\n             * Minor version number.\r\n             */\r\n            var LAME_MINOR_VERSION = 98;\r\n            /**\r\n             * Patch level.\r\n             */\r\n            var LAME_PATCH_VERSION = 4;\r\n\r\n            /**\r\n             * Major version number.\r\n             */\r\n            var PSY_MAJOR_VERSION = 0;\r\n            /**\r\n             * Minor version number.\r\n             */\r\n            var PSY_MINOR_VERSION = 93;\r\n\r\n            /**\r\n             * A string which describes the version of LAME.\r\n             *\r\n             * @return string which describes the version of LAME\r\n             */\r\n            this.getLameVersion = function () {\r\n                // primary to write screen reports\r\n                return (LAME_MAJOR_VERSION + \".\" + LAME_MINOR_VERSION + \".\" + LAME_PATCH_VERSION);\r\n            }\r\n\r\n            /**\r\n             * The short version of the LAME version string.\r\n             *\r\n             * @return short version of the LAME version string\r\n             */\r\n            this.getLameShortVersion = function () {\r\n                // Adding date and time to version string makes it harder for output\r\n                // validation\r\n                return (LAME_MAJOR_VERSION + \".\" + LAME_MINOR_VERSION + \".\" + LAME_PATCH_VERSION);\r\n            }\r\n\r\n            /**\r\n             * The shortest version of the LAME version string.\r\n             *\r\n             * @return shortest version of the LAME version string\r\n             */\r\n            this.getLameVeryShortVersion = function () {\r\n                // Adding date and time to version string makes it harder for output\r\n                return (\"LAME\" + LAME_MAJOR_VERSION + \".\" + LAME_MINOR_VERSION + \"r\");\r\n            }\r\n\r\n            /**\r\n             * String which describes the version of GPSYCHO\r\n             *\r\n             * @return string which describes the version of GPSYCHO\r\n             */\r\n            this.getPsyVersion = function () {\r\n                return (PSY_MAJOR_VERSION + \".\" + PSY_MINOR_VERSION);\r\n            }\r\n\r\n            /**\r\n             * String which is a URL for the LAME website.\r\n             *\r\n             * @return string which is a URL for the LAME website\r\n             */\r\n            this.getLameUrl = function () {\r\n                return LAME_URL;\r\n            }\r\n\r\n            /**\r\n             * Quite useless for a java version, however we are compatible ;-)\r\n             *\r\n             * @return \"32bits\"\r\n             */\r\n            this.getLameOsBitness = function () {\r\n                return \"32bits\";\r\n            }\r\n\r\n        }\r\n\r\n        /*\r\n         *\tMP3 huffman table selecting and bit counting\r\n         *\r\n         *\tCopyright (c) 1999-2005 Takehiro TOMINAGA\r\n         *\tCopyright (c) 2002-2005 Gabriel Bouvigne\r\n         *\r\n         * This library is free software; you can redistribute it and/or\r\n         * modify it under the terms of the GNU Lesser General Public\r\n         * License as published by the Free Software Foundation; either\r\n         * version 2 of the License, or (at your option) any later version.\r\n         *\r\n         * This library is distributed in the hope that it will be useful,\r\n         * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n         * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\r\n         * Library General Public License for more details.\r\n         *\r\n         * You should have received a copy of the GNU Lesser General Public\r\n         * License along with this library; if not, write to the\r\n         * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\r\n         * Boston, MA 02111-1307, USA.\r\n         */\r\n\r\n        /* $Id: Takehiro.java,v 1.26 2011/05/24 20:48:06 kenchis Exp $ */\r\n\r\n//package mp3;\r\n\r\n//import java.util.Arrays;\r\n\r\n\r\n\r\n        function Takehiro() {\r\n\r\n            var qupvt = null;\r\n            this.qupvt = null;\r\n\r\n            this.setModules = function (_qupvt) {\r\n                this.qupvt = _qupvt;\r\n                qupvt = _qupvt;\r\n            }\r\n\r\n            function Bits(b) {\r\n                this.bits = 0 | b;\r\n            }\r\n\r\n            var subdv_table = [[0, 0], /* 0 bands */\r\n                [0, 0], /* 1 bands */\r\n                [0, 0], /* 2 bands */\r\n                [0, 0], /* 3 bands */\r\n                [0, 0], /* 4 bands */\r\n                [0, 1], /* 5 bands */\r\n                [1, 1], /* 6 bands */\r\n                [1, 1], /* 7 bands */\r\n                [1, 2], /* 8 bands */\r\n                [2, 2], /* 9 bands */\r\n                [2, 3], /* 10 bands */\r\n                [2, 3], /* 11 bands */\r\n                [3, 4], /* 12 bands */\r\n                [3, 4], /* 13 bands */\r\n                [3, 4], /* 14 bands */\r\n                [4, 5], /* 15 bands */\r\n                [4, 5], /* 16 bands */\r\n                [4, 6], /* 17 bands */\r\n                [5, 6], /* 18 bands */\r\n                [5, 6], /* 19 bands */\r\n                [5, 7], /* 20 bands */\r\n                [6, 7], /* 21 bands */\r\n                [6, 7], /* 22 bands */\r\n            ];\r\n\r\n            /**\r\n             * nonlinear quantization of xr More accurate formula than the ISO formula.\r\n             * Takes into account the fact that we are quantizing xr . ix, but we want\r\n             * ix^4/3 to be as close as possible to x^4/3. (taking the nearest int would\r\n             * mean ix is as close as possible to xr, which is different.)\r\n             *\r\n             * From Segher Boessenkool <segher@eastsite.nl> 11/1999\r\n             *\r\n             * 09/2000: ASM code removed in favor of IEEE754 hack by Takehiro Tominaga.\r\n             * If you need the ASM code, check CVS circa Aug 2000.\r\n             *\r\n             * 01/2004: Optimizations by Gabriel Bouvigne\r\n             */\r\n            function quantize_lines_xrpow_01(l, istep, xr, xrPos, ix, ixPos) {\r\n                var compareval0 = (1.0 - 0.4054) / istep;\r\n\r\n                l = l >> 1;\r\n                while ((l--) != 0) {\r\n                    ix[ixPos++] = (compareval0 > xr[xrPos++]) ? 0 : 1;\r\n                    ix[ixPos++] = (compareval0 > xr[xrPos++]) ? 0 : 1;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * XRPOW_FTOI is a macro to convert floats to ints.<BR>\r\n             * if XRPOW_FTOI(x) = nearest_int(x), then QUANTFAC(x)=adj43asm[x]<BR>\r\n             * ROUNDFAC= -0.0946<BR>\r\n             *\r\n             * if XRPOW_FTOI(x) = floor(x), then QUANTFAC(x)=asj43[x]<BR>\r\n             * ROUNDFAC=0.4054<BR>\r\n             *\r\n             * Note: using floor() or 0| is extremely slow. On machines where the\r\n             * TAKEHIRO_IEEE754_HACK code above does not work, it is worthwile to write\r\n             * some ASM for XRPOW_FTOI().\r\n             */\r\n            function quantize_lines_xrpow(l, istep, xr, xrPos, ix, ixPos) {\r\n\r\n                l = l >> 1;\r\n                var remaining = l % 2;\r\n                l = l >> 1;\r\n                while (l-- != 0) {\r\n                    var x0, x1, x2, x3;\r\n                    var rx0, rx1, rx2, rx3;\r\n\r\n                    x0 = xr[xrPos++] * istep;\r\n                    x1 = xr[xrPos++] * istep;\r\n                    rx0 = 0 | x0;\r\n                    x2 = xr[xrPos++] * istep;\r\n                    rx1 = 0 | x1;\r\n                    x3 = xr[xrPos++] * istep;\r\n                    rx2 = 0 | x2;\r\n                    x0 += qupvt.adj43[rx0];\r\n                    rx3 = 0 | x3;\r\n                    x1 += qupvt.adj43[rx1];\r\n                    ix[ixPos++] = 0 | x0;\r\n                    x2 += qupvt.adj43[rx2];\r\n                    ix[ixPos++] = 0 | x1;\r\n                    x3 += qupvt.adj43[rx3];\r\n                    ix[ixPos++] = 0 | x2;\r\n                    ix[ixPos++] = 0 | x3;\r\n                }\r\n                if (remaining != 0) {\r\n                    var x0, x1;\r\n                    var rx0, rx1;\r\n\r\n                    x0 = xr[xrPos++] * istep;\r\n                    x1 = xr[xrPos++] * istep;\r\n                    rx0 = 0 | x0;\r\n                    rx1 = 0 | x1;\r\n                    x0 += qupvt.adj43[rx0];\r\n                    x1 += qupvt.adj43[rx1];\r\n                    ix[ixPos++] = 0 | x0;\r\n                    ix[ixPos++] = 0 | x1;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Quantization function This function will select which lines to quantize\r\n             * and call the proper quantization function\r\n             */\r\n            function quantize_xrpow(xp, pi, istep, codInfo, prevNoise) {\r\n                /* quantize on xr^(3/4) instead of xr */\r\n                var sfb;\r\n                var sfbmax;\r\n                var j = 0;\r\n                var prev_data_use;\r\n                var accumulate = 0;\r\n                var accumulate01 = 0;\r\n                var xpPos = 0;\r\n                var iData = pi;\r\n                var iDataPos = 0;\r\n                var acc_iData = iData;\r\n                var acc_iDataPos = 0;\r\n                var acc_xp = xp;\r\n                var acc_xpPos = 0;\r\n\r\n                /*\r\n                 * Reusing previously computed data does not seems to work if global\r\n                 * gain is changed. Finding why it behaves this way would allow to use a\r\n                 * cache of previously computed values (let's 10 cached values per sfb)\r\n                 * that would probably provide a noticeable speedup\r\n                 */\r\n                prev_data_use = (prevNoise != null && (codInfo.global_gain == prevNoise.global_gain));\r\n\r\n                if (codInfo.block_type == Encoder.SHORT_TYPE)\r\n                    sfbmax = 38;\r\n                else\r\n                    sfbmax = 21;\r\n\r\n                for (sfb = 0; sfb <= sfbmax; sfb++) {\r\n                    var step = -1;\r\n\r\n                    if (prev_data_use || codInfo.block_type == Encoder.NORM_TYPE) {\r\n                        step = codInfo.global_gain\r\n                            - ((codInfo.scalefac[sfb] + (codInfo.preflag != 0 ? qupvt.pretab[sfb]\r\n                                : 0)) << (codInfo.scalefac_scale + 1))\r\n                            - codInfo.subblock_gain[codInfo.window[sfb]] * 8;\r\n                    }\r\n                    if (prev_data_use && (prevNoise.step[sfb] == step)) {\r\n                        /*\r\n                         * do not recompute this part, but compute accumulated lines\r\n                         */\r\n                        if (accumulate != 0) {\r\n                            quantize_lines_xrpow(accumulate, istep, acc_xp, acc_xpPos,\r\n                                acc_iData, acc_iDataPos);\r\n                            accumulate = 0;\r\n                        }\r\n                        if (accumulate01 != 0) {\r\n                            quantize_lines_xrpow_01(accumulate01, istep, acc_xp,\r\n                                acc_xpPos, acc_iData, acc_iDataPos);\r\n                            accumulate01 = 0;\r\n                        }\r\n                    } else { /* should compute this part */\r\n                        var l = codInfo.width[sfb];\r\n\r\n                        if ((j + codInfo.width[sfb]) > codInfo.max_nonzero_coeff) {\r\n                            /* do not compute upper zero part */\r\n                            var usefullsize;\r\n                            usefullsize = codInfo.max_nonzero_coeff - j + 1;\r\n                            Arrays.fill(pi, codInfo.max_nonzero_coeff, 576, 0);\r\n                            l = usefullsize;\r\n\r\n                            if (l < 0) {\r\n                                l = 0;\r\n                            }\r\n\r\n                            /* no need to compute higher sfb values */\r\n                            sfb = sfbmax + 1;\r\n                        }\r\n\r\n                        /* accumulate lines to quantize */\r\n                        if (0 == accumulate && 0 == accumulate01) {\r\n                            acc_iData = iData;\r\n                            acc_iDataPos = iDataPos;\r\n                            acc_xp = xp;\r\n                            acc_xpPos = xpPos;\r\n                        }\r\n                        if (prevNoise != null && prevNoise.sfb_count1 > 0\r\n                            && sfb >= prevNoise.sfb_count1\r\n                            && prevNoise.step[sfb] > 0\r\n                            && step >= prevNoise.step[sfb]) {\r\n\r\n                            if (accumulate != 0) {\r\n                                quantize_lines_xrpow(accumulate, istep, acc_xp,\r\n                                    acc_xpPos, acc_iData, acc_iDataPos);\r\n                                accumulate = 0;\r\n                                acc_iData = iData;\r\n                                acc_iDataPos = iDataPos;\r\n                                acc_xp = xp;\r\n                                acc_xpPos = xpPos;\r\n                            }\r\n                            accumulate01 += l;\r\n                        } else {\r\n                            if (accumulate01 != 0) {\r\n                                quantize_lines_xrpow_01(accumulate01, istep, acc_xp,\r\n                                    acc_xpPos, acc_iData, acc_iDataPos);\r\n                                accumulate01 = 0;\r\n                                acc_iData = iData;\r\n                                acc_iDataPos = iDataPos;\r\n                                acc_xp = xp;\r\n                                acc_xpPos = xpPos;\r\n                            }\r\n                            accumulate += l;\r\n                        }\r\n\r\n                        if (l <= 0) {\r\n                            /*\r\n                             * rh: 20040215 may happen due to \"prev_data_use\"\r\n                             * optimization\r\n                             */\r\n                            if (accumulate01 != 0) {\r\n                                quantize_lines_xrpow_01(accumulate01, istep, acc_xp,\r\n                                    acc_xpPos, acc_iData, acc_iDataPos);\r\n                                accumulate01 = 0;\r\n                            }\r\n                            if (accumulate != 0) {\r\n                                quantize_lines_xrpow(accumulate, istep, acc_xp,\r\n                                    acc_xpPos, acc_iData, acc_iDataPos);\r\n                                accumulate = 0;\r\n                            }\r\n\r\n                            break;\r\n                            /* ends for-loop */\r\n                        }\r\n                    }\r\n                    if (sfb <= sfbmax) {\r\n                        iDataPos += codInfo.width[sfb];\r\n                        xpPos += codInfo.width[sfb];\r\n                        j += codInfo.width[sfb];\r\n                    }\r\n                }\r\n                if (accumulate != 0) { /* last data part */\r\n                    quantize_lines_xrpow(accumulate, istep, acc_xp, acc_xpPos,\r\n                        acc_iData, acc_iDataPos);\r\n                    accumulate = 0;\r\n                }\r\n                if (accumulate01 != 0) { /* last data part */\r\n                    quantize_lines_xrpow_01(accumulate01, istep, acc_xp, acc_xpPos,\r\n                        acc_iData, acc_iDataPos);\r\n                    accumulate01 = 0;\r\n                }\r\n\r\n            }\r\n\r\n            /**\r\n             * ix_max\r\n             */\r\n            function ix_max(ix, ixPos, endPos) {\r\n                var max1 = 0, max2 = 0;\r\n\r\n                do {\r\n                    var x1 = ix[ixPos++];\r\n                    var x2 = ix[ixPos++];\r\n                    if (max1 < x1)\r\n                        max1 = x1;\r\n\r\n                    if (max2 < x2)\r\n                        max2 = x2;\r\n                } while (ixPos < endPos);\r\n                if (max1 < max2)\r\n                    max1 = max2;\r\n                return max1;\r\n            }\r\n\r\n            function count_bit_ESC(ix, ixPos, end, t1, t2, s) {\r\n                /* ESC-table is used */\r\n                var linbits = Tables.ht[t1].xlen * 65536 + Tables.ht[t2].xlen;\r\n                var sum = 0, sum2;\r\n\r\n                do {\r\n                    var x = ix[ixPos++];\r\n                    var y = ix[ixPos++];\r\n\r\n                    if (x != 0) {\r\n                        if (x > 14) {\r\n                            x = 15;\r\n                            sum += linbits;\r\n                        }\r\n                        x *= 16;\r\n                    }\r\n\r\n                    if (y != 0) {\r\n                        if (y > 14) {\r\n                            y = 15;\r\n                            sum += linbits;\r\n                        }\r\n                        x += y;\r\n                    }\r\n\r\n                    sum += Tables.largetbl[x];\r\n                } while (ixPos < end);\r\n\r\n                sum2 = sum & 0xffff;\r\n                sum >>= 16;\r\n\r\n                if (sum > sum2) {\r\n                    sum = sum2;\r\n                    t1 = t2;\r\n                }\r\n\r\n                s.bits += sum;\r\n                return t1;\r\n            }\r\n\r\n            function count_bit_noESC(ix, ixPos, end, s) {\r\n                /* No ESC-words */\r\n                var sum1 = 0;\r\n                var hlen1 = Tables.ht[1].hlen;\r\n\r\n                do {\r\n                    var x = ix[ixPos + 0] * 2 + ix[ixPos + 1];\r\n                    ixPos += 2;\r\n                    sum1 += hlen1[x];\r\n                } while (ixPos < end);\r\n\r\n                s.bits += sum1;\r\n                return 1;\r\n            }\r\n\r\n            function count_bit_noESC_from2(ix, ixPos, end, t1, s) {\r\n                /* No ESC-words */\r\n                var sum = 0, sum2;\r\n                var xlen = Tables.ht[t1].xlen;\r\n                var hlen;\r\n                if (t1 == 2)\r\n                    hlen = Tables.table23;\r\n                else\r\n                    hlen = Tables.table56;\r\n\r\n                do {\r\n                    var x = ix[ixPos + 0] * xlen + ix[ixPos + 1];\r\n                    ixPos += 2;\r\n                    sum += hlen[x];\r\n                } while (ixPos < end);\r\n\r\n                sum2 = sum & 0xffff;\r\n                sum >>= 16;\r\n\r\n                if (sum > sum2) {\r\n                    sum = sum2;\r\n                    t1++;\r\n                }\r\n\r\n                s.bits += sum;\r\n                return t1;\r\n            }\r\n\r\n            function count_bit_noESC_from3(ix, ixPos, end, t1, s) {\r\n                /* No ESC-words */\r\n                var sum1 = 0;\r\n                var sum2 = 0;\r\n                var sum3 = 0;\r\n                var xlen = Tables.ht[t1].xlen;\r\n                var hlen1 = Tables.ht[t1].hlen;\r\n                var hlen2 = Tables.ht[t1 + 1].hlen;\r\n                var hlen3 = Tables.ht[t1 + 2].hlen;\r\n\r\n                do {\r\n                    var x = ix[ixPos + 0] * xlen + ix[ixPos + 1];\r\n                    ixPos += 2;\r\n                    sum1 += hlen1[x];\r\n                    sum2 += hlen2[x];\r\n                    sum3 += hlen3[x];\r\n                } while (ixPos < end);\r\n                var t = t1;\r\n                if (sum1 > sum2) {\r\n                    sum1 = sum2;\r\n                    t++;\r\n                }\r\n                if (sum1 > sum3) {\r\n                    sum1 = sum3;\r\n                    t = t1 + 2;\r\n                }\r\n                s.bits += sum1;\r\n\r\n                return t;\r\n            }\r\n\r\n            /*************************************************************************/\r\n            /* choose table */\r\n            /*************************************************************************/\r\n\r\n            var huf_tbl_noESC = [1, 2, 5, 7, 7, 10, 10, 13, 13,\r\n                13, 13, 13, 13, 13, 13];\r\n\r\n            /**\r\n             * Choose the Huffman table that will encode ix[begin..end] with the fewest\r\n             * bits.\r\n             *\r\n             * Note: This code contains knowledge about the sizes and characteristics of\r\n             * the Huffman tables as defined in the IS (Table B.7), and will not work\r\n             * with any arbitrary tables.\r\n             */\r\n            function choose_table(ix, ixPos, endPos, s) {\r\n                var max = ix_max(ix, ixPos, endPos);\r\n\r\n                switch (max) {\r\n                    case 0:\r\n                        return max;\r\n\r\n                    case 1:\r\n                        return count_bit_noESC(ix, ixPos, endPos, s);\r\n\r\n                    case 2:\r\n                    case 3:\r\n                        return count_bit_noESC_from2(ix, ixPos, endPos,\r\n                            huf_tbl_noESC[max - 1], s);\r\n\r\n                    case 4:\r\n                    case 5:\r\n                    case 6:\r\n                    case 7:\r\n                    case 8:\r\n                    case 9:\r\n                    case 10:\r\n                    case 11:\r\n                    case 12:\r\n                    case 13:\r\n                    case 14:\r\n                    case 15:\r\n                        return count_bit_noESC_from3(ix, ixPos, endPos,\r\n                            huf_tbl_noESC[max - 1], s);\r\n\r\n                    default:\r\n                        /* try tables with linbits */\r\n                        if (max > QuantizePVT.IXMAX_VAL) {\r\n                            s.bits = QuantizePVT.LARGE_BITS;\r\n                            return -1;\r\n                        }\r\n                        max -= 15;\r\n                        var choice2;\r\n                        for (choice2 = 24; choice2 < 32; choice2++) {\r\n                            if (Tables.ht[choice2].linmax >= max) {\r\n                                break;\r\n                            }\r\n                        }\r\n                        var choice;\r\n                        for (choice = choice2 - 8; choice < 24; choice++) {\r\n                            if (Tables.ht[choice].linmax >= max) {\r\n                                break;\r\n                            }\r\n                        }\r\n                        return count_bit_ESC(ix, ixPos, endPos, choice, choice2, s);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * count_bit\r\n             */\r\n            this.noquant_count_bits = function (gfc, gi, prev_noise) {\r\n                var ix = gi.l3_enc;\r\n                var i = Math.min(576, ((gi.max_nonzero_coeff + 2) >> 1) << 1);\r\n\r\n                if (prev_noise != null)\r\n                    prev_noise.sfb_count1 = 0;\r\n\r\n                /* Determine count1 region */\r\n                for (; i > 1; i -= 2)\r\n                    if ((ix[i - 1] | ix[i - 2]) != 0)\r\n                        break;\r\n                gi.count1 = i;\r\n\r\n                /* Determines the number of bits to encode the quadruples. */\r\n                var a1 = 0;\r\n                var a2 = 0;\r\n                for (; i > 3; i -= 4) {\r\n                    var p;\r\n                    /* hack to check if all values <= 1 */\r\n                    //throw \"TODO: HACK         if ((((long) ix[i - 1] | (long) ix[i - 2] | (long) ix[i - 3] | (long) ix[i - 4]) & 0xffffffffL) > 1L        \"\r\n                    //if (true) {\r\n                    if (((ix[i - 1] | ix[i - 2] | ix[i - 3] | ix[i - 4]) & 0x7fffffff) > 1) {\r\n                        break;\r\n                    }\r\n                    p = ((ix[i - 4] * 2 + ix[i - 3]) * 2 + ix[i - 2]) * 2 + ix[i - 1];\r\n                    a1 += Tables.t32l[p];\r\n                    a2 += Tables.t33l[p];\r\n                }\r\n                var bits = a1;\r\n                gi.count1table_select = 0;\r\n                if (a1 > a2) {\r\n                    bits = a2;\r\n                    gi.count1table_select = 1;\r\n                }\r\n\r\n                gi.count1bits = bits;\r\n                gi.big_values = i;\r\n                if (i == 0)\r\n                    return bits;\r\n\r\n                if (gi.block_type == Encoder.SHORT_TYPE) {\r\n                    a1 = 3 * gfc.scalefac_band.s[3];\r\n                    if (a1 > gi.big_values)\r\n                        a1 = gi.big_values;\r\n                    a2 = gi.big_values;\r\n\r\n                } else if (gi.block_type == Encoder.NORM_TYPE) {\r\n                    /* bv_scf has 576 entries (0..575) */\r\n                    a1 = gi.region0_count = gfc.bv_scf[i - 2];\r\n                    a2 = gi.region1_count = gfc.bv_scf[i - 1];\r\n\r\n                    a2 = gfc.scalefac_band.l[a1 + a2 + 2];\r\n                    a1 = gfc.scalefac_band.l[a1 + 1];\r\n                    if (a2 < i) {\r\n                        var bi = new Bits(bits);\r\n                        gi.table_select[2] = choose_table(ix, a2, i, bi);\r\n                        bits = bi.bits;\r\n                    }\r\n                } else {\r\n                    gi.region0_count = 7;\r\n                    /* gi.region1_count = SBPSY_l - 7 - 1; */\r\n                    gi.region1_count = Encoder.SBMAX_l - 1 - 7 - 1;\r\n                    a1 = gfc.scalefac_band.l[7 + 1];\r\n                    a2 = i;\r\n                    if (a1 > a2) {\r\n                        a1 = a2;\r\n                    }\r\n                }\r\n\r\n                /* have to allow for the case when bigvalues < region0 < region1 */\r\n                /* (and region0, region1 are ignored) */\r\n                a1 = Math.min(a1, i);\r\n                a2 = Math.min(a2, i);\r\n\r\n\r\n                /* Count the number of bits necessary to code the bigvalues region. */\r\n                if (0 < a1) {\r\n                    var bi = new Bits(bits);\r\n                    gi.table_select[0] = choose_table(ix, 0, a1, bi);\r\n                    bits = bi.bits;\r\n                }\r\n                if (a1 < a2) {\r\n                    var bi = new Bits(bits);\r\n                    gi.table_select[1] = choose_table(ix, a1, a2, bi);\r\n                    bits = bi.bits;\r\n                }\r\n                if (gfc.use_best_huffman == 2) {\r\n                    gi.part2_3_length = bits;\r\n                    best_huffman_divide(gfc, gi);\r\n                    bits = gi.part2_3_length;\r\n                }\r\n\r\n                if (prev_noise != null) {\r\n                    if (gi.block_type == Encoder.NORM_TYPE) {\r\n                        var sfb = 0;\r\n                        while (gfc.scalefac_band.l[sfb] < gi.big_values) {\r\n                            sfb++;\r\n                        }\r\n                        prev_noise.sfb_count1 = sfb;\r\n                    }\r\n                }\r\n\r\n                return bits;\r\n            }\r\n\r\n            this.count_bits = function (gfc, xr, gi, prev_noise) {\r\n                var ix = gi.l3_enc;\r\n\r\n                /* since quantize_xrpow uses table lookup, we need to check this first: */\r\n                var w = (QuantizePVT.IXMAX_VAL) / qupvt.IPOW20(gi.global_gain);\r\n\r\n                if (gi.xrpow_max > w)\r\n                    return QuantizePVT.LARGE_BITS;\r\n\r\n                quantize_xrpow(xr, ix, qupvt.IPOW20(gi.global_gain), gi, prev_noise);\r\n\r\n                if ((gfc.substep_shaping & 2) != 0) {\r\n                    var j = 0;\r\n                    /* 0.634521682242439 = 0.5946*2**(.5*0.1875) */\r\n                    var gain = gi.global_gain + gi.scalefac_scale;\r\n                    var roundfac = 0.634521682242439 / qupvt.IPOW20(gain);\r\n                    for (var sfb = 0; sfb < gi.sfbmax; sfb++) {\r\n                        var width = gi.width[sfb];\r\n                        if (0 == gfc.pseudohalf[sfb]) {\r\n                            j += width;\r\n                        } else {\r\n                            var k;\r\n                            for (k = j, j += width; k < j; ++k) {\r\n                                ix[k] = (xr[k] >= roundfac) ? ix[k] : 0;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return this.noquant_count_bits(gfc, gi, prev_noise);\r\n            }\r\n\r\n            /**\r\n             * re-calculate the best scalefac_compress using scfsi the saved bits are\r\n             * kept in the bit reservoir.\r\n             */\r\n            function recalc_divide_init(gfc, cod_info, ix, r01_bits, r01_div, r0_tbl, r1_tbl) {\r\n                var bigv = cod_info.big_values;\r\n\r\n                for (var r0 = 0; r0 <= 7 + 15; r0++) {\r\n                    r01_bits[r0] = QuantizePVT.LARGE_BITS;\r\n                }\r\n\r\n                for (var r0 = 0; r0 < 16; r0++) {\r\n                    var a1 = gfc.scalefac_band.l[r0 + 1];\r\n                    if (a1 >= bigv)\r\n                        break;\r\n                    var r0bits = 0;\r\n                    var bi = new Bits(r0bits);\r\n                    var r0t = choose_table(ix, 0, a1, bi);\r\n                    r0bits = bi.bits;\r\n\r\n                    for (var r1 = 0; r1 < 8; r1++) {\r\n                        var a2 = gfc.scalefac_band.l[r0 + r1 + 2];\r\n                        if (a2 >= bigv)\r\n                            break;\r\n                        var bits = r0bits;\r\n                        bi = new Bits(bits);\r\n                        var r1t = choose_table(ix, a1, a2, bi);\r\n                        bits = bi.bits;\r\n                        if (r01_bits[r0 + r1] > bits) {\r\n                            r01_bits[r0 + r1] = bits;\r\n                            r01_div[r0 + r1] = r0;\r\n                            r0_tbl[r0 + r1] = r0t;\r\n                            r1_tbl[r0 + r1] = r1t;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            function recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div, r0_tbl, r1_tbl) {\r\n                var bigv = cod_info2.big_values;\r\n\r\n                for (var r2 = 2; r2 < Encoder.SBMAX_l + 1; r2++) {\r\n                    var a2 = gfc.scalefac_band.l[r2];\r\n                    if (a2 >= bigv)\r\n                        break;\r\n                    var bits = r01_bits[r2 - 2] + cod_info2.count1bits;\r\n                    if (gi.part2_3_length <= bits)\r\n                        break;\r\n\r\n                    var bi = new Bits(bits);\r\n                    var r2t = choose_table(ix, a2, bigv, bi);\r\n                    bits = bi.bits;\r\n                    if (gi.part2_3_length <= bits)\r\n                        continue;\r\n\r\n                    gi.assign(cod_info2);\r\n                    gi.part2_3_length = bits;\r\n                    gi.region0_count = r01_div[r2 - 2];\r\n                    gi.region1_count = r2 - 2 - r01_div[r2 - 2];\r\n                    gi.table_select[0] = r0_tbl[r2 - 2];\r\n                    gi.table_select[1] = r1_tbl[r2 - 2];\r\n                    gi.table_select[2] = r2t;\r\n                }\r\n            }\r\n\r\n            this.best_huffman_divide = function (gfc, gi) {\r\n                var cod_info2 = new GrInfo();\r\n                var ix = gi.l3_enc;\r\n                var r01_bits = new_int(7 + 15 + 1);\r\n                var r01_div = new_int(7 + 15 + 1);\r\n                var r0_tbl = new_int(7 + 15 + 1);\r\n                var r1_tbl = new_int(7 + 15 + 1);\r\n\r\n                /* SHORT BLOCK stuff fails for MPEG2 */\r\n                if (gi.block_type == Encoder.SHORT_TYPE && gfc.mode_gr == 1)\r\n                    return;\r\n\r\n                cod_info2.assign(gi);\r\n                if (gi.block_type == Encoder.NORM_TYPE) {\r\n                    recalc_divide_init(gfc, gi, ix, r01_bits, r01_div, r0_tbl, r1_tbl);\r\n                    recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div,\r\n                        r0_tbl, r1_tbl);\r\n                }\r\n                var i = cod_info2.big_values;\r\n                if (i == 0 || (ix[i - 2] | ix[i - 1]) > 1)\r\n                    return;\r\n\r\n                i = gi.count1 + 2;\r\n                if (i > 576)\r\n                    return;\r\n\r\n                /* Determines the number of bits to encode the quadruples. */\r\n                cod_info2.assign(gi);\r\n                cod_info2.count1 = i;\r\n                var a1 = 0;\r\n                var a2 = 0;\r\n\r\n\r\n                for (; i > cod_info2.big_values; i -= 4) {\r\n                    var p = ((ix[i - 4] * 2 + ix[i - 3]) * 2 + ix[i - 2]) * 2\r\n                        + ix[i - 1];\r\n                    a1 += Tables.t32l[p];\r\n                    a2 += Tables.t33l[p];\r\n                }\r\n                cod_info2.big_values = i;\r\n\r\n                cod_info2.count1table_select = 0;\r\n                if (a1 > a2) {\r\n                    a1 = a2;\r\n                    cod_info2.count1table_select = 1;\r\n                }\r\n\r\n                cod_info2.count1bits = a1;\r\n\r\n                if (cod_info2.block_type == Encoder.NORM_TYPE)\r\n                    recalc_divide_sub(gfc, cod_info2, gi, ix, r01_bits, r01_div,\r\n                        r0_tbl, r1_tbl);\r\n                else {\r\n                    /* Count the number of bits necessary to code the bigvalues region. */\r\n                    cod_info2.part2_3_length = a1;\r\n                    a1 = gfc.scalefac_band.l[7 + 1];\r\n                    if (a1 > i) {\r\n                        a1 = i;\r\n                    }\r\n                    if (a1 > 0) {\r\n                        var bi = new Bits(cod_info2.part2_3_length);\r\n                        cod_info2.table_select[0] = choose_table(ix, 0, a1, bi);\r\n                        cod_info2.part2_3_length = bi.bits;\r\n                    }\r\n                    if (i > a1) {\r\n                        var bi = new Bits(cod_info2.part2_3_length);\r\n                        cod_info2.table_select[1] = choose_table(ix, a1, i, bi);\r\n                        cod_info2.part2_3_length = bi.bits;\r\n                    }\r\n                    if (gi.part2_3_length > cod_info2.part2_3_length)\r\n                        gi.assign(cod_info2);\r\n                }\r\n            }\r\n\r\n            var slen1_n = [1, 1, 1, 1, 8, 2, 2, 2, 4, 4, 4, 8, 8, 8, 16, 16];\r\n            var slen2_n = [1, 2, 4, 8, 1, 2, 4, 8, 2, 4, 8, 2, 4, 8, 4, 8];\r\n            var slen1_tab = [0, 0, 0, 0, 3, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4];\r\n            var slen2_tab = [0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3];\r\n            Takehiro.slen1_tab = slen1_tab;\r\n            Takehiro.slen2_tab = slen2_tab;\r\n\r\n            function scfsi_calc(ch, l3_side) {\r\n                var sfb;\r\n                var gi = l3_side.tt[1][ch];\r\n                var g0 = l3_side.tt[0][ch];\r\n\r\n                for (var i = 0; i < Tables.scfsi_band.length - 1; i++) {\r\n                    for (sfb = Tables.scfsi_band[i]; sfb < Tables.scfsi_band[i + 1]; sfb++) {\r\n                        if (g0.scalefac[sfb] != gi.scalefac[sfb]\r\n                            && gi.scalefac[sfb] >= 0)\r\n                            break;\r\n                    }\r\n                    if (sfb == Tables.scfsi_band[i + 1]) {\r\n                        for (sfb = Tables.scfsi_band[i]; sfb < Tables.scfsi_band[i + 1]; sfb++) {\r\n                            gi.scalefac[sfb] = -1;\r\n                        }\r\n                        l3_side.scfsi[ch][i] = 1;\r\n                    }\r\n                }\r\n                var s1 = 0;\r\n                var c1 = 0;\r\n                for (sfb = 0; sfb < 11; sfb++) {\r\n                    if (gi.scalefac[sfb] == -1)\r\n                        continue;\r\n                    c1++;\r\n                    if (s1 < gi.scalefac[sfb])\r\n                        s1 = gi.scalefac[sfb];\r\n                }\r\n                var s2 = 0;\r\n                var c2 = 0;\r\n                for (; sfb < Encoder.SBPSY_l; sfb++) {\r\n                    if (gi.scalefac[sfb] == -1)\r\n                        continue;\r\n                    c2++;\r\n                    if (s2 < gi.scalefac[sfb])\r\n                        s2 = gi.scalefac[sfb];\r\n                }\r\n\r\n                for (var i = 0; i < 16; i++) {\r\n                    if (s1 < slen1_n[i] && s2 < slen2_n[i]) {\r\n                        var c = slen1_tab[i] * c1 + slen2_tab[i] * c2;\r\n                        if (gi.part2_length > c) {\r\n                            gi.part2_length = c;\r\n                            gi.scalefac_compress = i;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Find the optimal way to store the scalefactors. Only call this routine\r\n             * after final scalefactors have been chosen and the channel/granule will\r\n             * not be re-encoded.\r\n             */\r\n            this.best_scalefac_store = function (gfc, gr, ch, l3_side) {\r\n                /* use scalefac_scale if we can */\r\n                var gi = l3_side.tt[gr][ch];\r\n                var sfb, i, j, l;\r\n                var recalc = 0;\r\n\r\n                /*\r\n                 * remove scalefacs from bands with ix=0. This idea comes from the AAC\r\n                 * ISO docs. added mt 3/00\r\n                 */\r\n                /* check if l3_enc=0 */\r\n                j = 0;\r\n                for (sfb = 0; sfb < gi.sfbmax; sfb++) {\r\n                    var width = gi.width[sfb];\r\n                    j += width;\r\n                    for (l = -width; l < 0; l++) {\r\n                        if (gi.l3_enc[l + j] != 0)\r\n                            break;\r\n                    }\r\n                    if (l == 0)\r\n                        gi.scalefac[sfb] = recalc = -2;\r\n                    /* anything goes. */\r\n                    /*\r\n                     * only best_scalefac_store and calc_scfsi know--and only they\r\n                     * should know--about the magic number -2.\r\n                     */\r\n                }\r\n\r\n                if (0 == gi.scalefac_scale && 0 == gi.preflag) {\r\n                    var s = 0;\r\n                    for (sfb = 0; sfb < gi.sfbmax; sfb++)\r\n                        if (gi.scalefac[sfb] > 0)\r\n                            s |= gi.scalefac[sfb];\r\n\r\n                    if (0 == (s & 1) && s != 0) {\r\n                        for (sfb = 0; sfb < gi.sfbmax; sfb++)\r\n                            if (gi.scalefac[sfb] > 0)\r\n                                gi.scalefac[sfb] >>= 1;\r\n\r\n                        gi.scalefac_scale = recalc = 1;\r\n                    }\r\n                }\r\n\r\n                if (0 == gi.preflag && gi.block_type != Encoder.SHORT_TYPE\r\n                    && gfc.mode_gr == 2) {\r\n                    for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\r\n                        if (gi.scalefac[sfb] < qupvt.pretab[sfb]\r\n                            && gi.scalefac[sfb] != -2)\r\n                            break;\r\n                    if (sfb == Encoder.SBPSY_l) {\r\n                        for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\r\n                            if (gi.scalefac[sfb] > 0)\r\n                                gi.scalefac[sfb] -= qupvt.pretab[sfb];\r\n\r\n                        gi.preflag = recalc = 1;\r\n                    }\r\n                }\r\n\r\n                for (i = 0; i < 4; i++)\r\n                    l3_side.scfsi[ch][i] = 0;\r\n\r\n                if (gfc.mode_gr == 2 && gr == 1\r\n                    && l3_side.tt[0][ch].block_type != Encoder.SHORT_TYPE\r\n                    && l3_side.tt[1][ch].block_type != Encoder.SHORT_TYPE) {\r\n                    scfsi_calc(ch, l3_side);\r\n                    recalc = 0;\r\n                }\r\n                for (sfb = 0; sfb < gi.sfbmax; sfb++) {\r\n                    if (gi.scalefac[sfb] == -2) {\r\n                        gi.scalefac[sfb] = 0;\r\n                        /* if anything goes, then 0 is a good choice */\r\n                    }\r\n                }\r\n                if (recalc != 0) {\r\n                    if (gfc.mode_gr == 2) {\r\n                        this.scale_bitcount(gi);\r\n                    } else {\r\n                        this.scale_bitcount_lsf(gfc, gi);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function all_scalefactors_not_negative(scalefac, n) {\r\n                for (var i = 0; i < n; ++i) {\r\n                    if (scalefac[i] < 0)\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n\r\n            /**\r\n             * number of bits used to encode scalefacs.\r\n             *\r\n             * 18*slen1_tab[i] + 18*slen2_tab[i]\r\n             */\r\n            var scale_short = [0, 18, 36, 54, 54, 36, 54, 72,\r\n                54, 72, 90, 72, 90, 108, 108, 126];\r\n\r\n            /**\r\n             * number of bits used to encode scalefacs.\r\n             *\r\n             * 17*slen1_tab[i] + 18*slen2_tab[i]\r\n             */\r\n            var scale_mixed = [0, 18, 36, 54, 51, 35, 53, 71,\r\n                52, 70, 88, 69, 87, 105, 104, 122];\r\n\r\n            /**\r\n             * number of bits used to encode scalefacs.\r\n             *\r\n             * 11*slen1_tab[i] + 10*slen2_tab[i]\r\n             */\r\n            var scale_long = [0, 10, 20, 30, 33, 21, 31, 41, 32, 42,\r\n                52, 43, 53, 63, 64, 74];\r\n\r\n            /**\r\n             * Also calculates the number of bits necessary to code the scalefactors.\r\n             */\r\n            this.scale_bitcount = function (cod_info) {\r\n                var k, sfb, max_slen1 = 0, max_slen2 = 0;\r\n\r\n                /* maximum values */\r\n                var tab;\r\n                var scalefac = cod_info.scalefac;\r\n\r\n\r\n                if (cod_info.block_type == Encoder.SHORT_TYPE) {\r\n                    tab = scale_short;\r\n                    if (cod_info.mixed_block_flag != 0)\r\n                        tab = scale_mixed;\r\n                } else { /* block_type == 1,2,or 3 */\r\n                    tab = scale_long;\r\n                    if (0 == cod_info.preflag) {\r\n                        for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\r\n                            if (scalefac[sfb] < qupvt.pretab[sfb])\r\n                                break;\r\n\r\n                        if (sfb == Encoder.SBPSY_l) {\r\n                            cod_info.preflag = 1;\r\n                            for (sfb = 11; sfb < Encoder.SBPSY_l; sfb++)\r\n                                scalefac[sfb] -= qupvt.pretab[sfb];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                for (sfb = 0; sfb < cod_info.sfbdivide; sfb++)\r\n                    if (max_slen1 < scalefac[sfb])\r\n                        max_slen1 = scalefac[sfb];\r\n\r\n                for (; sfb < cod_info.sfbmax; sfb++)\r\n                    if (max_slen2 < scalefac[sfb])\r\n                        max_slen2 = scalefac[sfb];\r\n\r\n                /*\r\n                 * from Takehiro TOMINAGA <tominaga@isoternet.org> 10/99 loop over *all*\r\n                 * posible values of scalefac_compress to find the one which uses the\r\n                 * smallest number of bits. ISO would stop at first valid index\r\n                 */\r\n                cod_info.part2_length = QuantizePVT.LARGE_BITS;\r\n                for (k = 0; k < 16; k++) {\r\n                    if (max_slen1 < slen1_n[k] && max_slen2 < slen2_n[k]\r\n                        && cod_info.part2_length > tab[k]) {\r\n                        cod_info.part2_length = tab[k];\r\n                        cod_info.scalefac_compress = k;\r\n                    }\r\n                }\r\n                return cod_info.part2_length == QuantizePVT.LARGE_BITS;\r\n            }\r\n\r\n            /**\r\n             * table of largest scalefactor values for MPEG2\r\n             */\r\n            var max_range_sfac_tab = [[15, 15, 7, 7],\r\n                [15, 15, 7, 0], [7, 3, 0, 0], [15, 31, 31, 0],\r\n                [7, 7, 7, 0], [3, 3, 0, 0]];\r\n\r\n            /**\r\n             * Also counts the number of bits to encode the scalefacs but for MPEG 2\r\n             * Lower sampling frequencies (24, 22.05 and 16 kHz.)\r\n             *\r\n             * This is reverse-engineered from section 2.4.3.2 of the MPEG2 IS,\r\n             * \"Audio Decoding Layer III\"\r\n             */\r\n            this.scale_bitcount_lsf = function (gfc, cod_info) {\r\n                var table_number, row_in_table, partition, nr_sfb, window;\r\n                var over;\r\n                var i, sfb;\r\n                var max_sfac = new_int(4);\r\n//var partition_table;\r\n                var scalefac = cod_info.scalefac;\r\n\r\n                /*\r\n                 * Set partition table. Note that should try to use table one, but do\r\n                 * not yet...\r\n                 */\r\n                if (cod_info.preflag != 0)\r\n                    table_number = 2;\r\n                else\r\n                    table_number = 0;\r\n\r\n                for (i = 0; i < 4; i++)\r\n                    max_sfac[i] = 0;\r\n\r\n                if (cod_info.block_type == Encoder.SHORT_TYPE) {\r\n                    row_in_table = 1;\r\n                    var partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\r\n                    for (sfb = 0, partition = 0; partition < 4; partition++) {\r\n                        nr_sfb = partition_table[partition] / 3;\r\n                        for (i = 0; i < nr_sfb; i++, sfb++)\r\n                            for (window = 0; window < 3; window++)\r\n                                if (scalefac[sfb * 3 + window] > max_sfac[partition])\r\n                                    max_sfac[partition] = scalefac[sfb * 3 + window];\r\n                    }\r\n                } else {\r\n                    row_in_table = 0;\r\n                    var partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\r\n                    for (sfb = 0, partition = 0; partition < 4; partition++) {\r\n                        nr_sfb = partition_table[partition];\r\n                        for (i = 0; i < nr_sfb; i++, sfb++)\r\n                            if (scalefac[sfb] > max_sfac[partition])\r\n                                max_sfac[partition] = scalefac[sfb];\r\n                    }\r\n                }\r\n\r\n                for (over = false, partition = 0; partition < 4; partition++) {\r\n                    if (max_sfac[partition] > max_range_sfac_tab[table_number][partition])\r\n                        over = true;\r\n                }\r\n                if (!over) {\r\n                    var slen1, slen2, slen3, slen4;\r\n\r\n                    cod_info.sfb_partition_table = qupvt.nr_of_sfb_block[table_number][row_in_table];\r\n                    for (partition = 0; partition < 4; partition++)\r\n                        cod_info.slen[partition] = log2tab[max_sfac[partition]];\r\n\r\n                    /* set scalefac_compress */\r\n                    slen1 = cod_info.slen[0];\r\n                    slen2 = cod_info.slen[1];\r\n                    slen3 = cod_info.slen[2];\r\n                    slen4 = cod_info.slen[3];\r\n\r\n                    switch (table_number) {\r\n                        case 0:\r\n                            cod_info.scalefac_compress = (((slen1 * 5) + slen2) << 4)\r\n                                + (slen3 << 2) + slen4;\r\n                            break;\r\n\r\n                        case 1:\r\n                            cod_info.scalefac_compress = 400 + (((slen1 * 5) + slen2) << 2)\r\n                                + slen3;\r\n                            break;\r\n\r\n                        case 2:\r\n                            cod_info.scalefac_compress = 500 + (slen1 * 3) + slen2;\r\n                            break;\r\n\r\n                        default:\r\n                            System.err.printf(\"intensity stereo not implemented yet\\n\");\r\n                            break;\r\n                    }\r\n                }\r\n                if (!over) {\r\n                    cod_info.part2_length = 0;\r\n                    for (partition = 0; partition < 4; partition++)\r\n                        cod_info.part2_length += cod_info.slen[partition]\r\n                            * cod_info.sfb_partition_table[partition];\r\n                }\r\n                return over;\r\n            }\r\n\r\n            /*\r\n             * Since no bands have been over-amplified, we can set scalefac_compress and\r\n             * slen[] for the formatter\r\n             */\r\n            var log2tab = [0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4,\r\n                4, 4, 4, 4];\r\n\r\n            this.huffman_init = function (gfc) {\r\n                for (var i = 2; i <= 576; i += 2) {\r\n                    var scfb_anz = 0, bv_index;\r\n                    while (gfc.scalefac_band.l[++scfb_anz] < i)\r\n                        ;\r\n\r\n                    bv_index = subdv_table[scfb_anz][0]; // .region0_count\r\n                    while (gfc.scalefac_band.l[bv_index + 1] > i)\r\n                        bv_index--;\r\n\r\n                    if (bv_index < 0) {\r\n                        /*\r\n                         * this is an indication that everything is going to be encoded\r\n                         * as region0: bigvalues < region0 < region1 so lets set\r\n                         * region0, region1 to some value larger than bigvalues\r\n                         */\r\n                        bv_index = subdv_table[scfb_anz][0]; // .region0_count\r\n                    }\r\n\r\n                    gfc.bv_scf[i - 2] = bv_index;\r\n\r\n                    bv_index = subdv_table[scfb_anz][1]; // .region1_count\r\n                    while (gfc.scalefac_band.l[bv_index + gfc.bv_scf[i - 2] + 2] > i)\r\n                        bv_index--;\r\n\r\n                    if (bv_index < 0) {\r\n                        bv_index = subdv_table[scfb_anz][1]; // .region1_count\r\n                    }\r\n\r\n                    gfc.bv_scf[i - 1] = bv_index;\r\n                }\r\n            }\r\n        }\r\n\r\n        /*\r\n         *  ReplayGainAnalysis - analyzes input samples and give the recommended dB change\r\n         *  Copyright (C) 2001 David Robinson and Glen Sawyer\r\n         *  Improvements and optimizations added by Frank Klemm, and by Marcel Muller\r\n         *\r\n         *  This library is free software; you can redistribute it and/or\r\n         *  modify it under the terms of the GNU Lesser General Public\r\n         *  License as published by the Free Software Foundation; either\r\n         *  version 2.1 of the License, or (at your option) any later version.\r\n         *\r\n         *  This library is distributed in the hope that it will be useful,\r\n         *  but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n         *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n         *  Lesser General Public License for more details.\r\n         *\r\n         *  You should have received a copy of the GNU Lesser General Public\r\n         *  License along with this library; if not, write to the Free Software\r\n         *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\r\n         *\r\n         *  concept and filter values by David Robinson (David@Robinson.org)\r\n         *    -- blame him if you think the idea is flawed\r\n         *  original coding by Glen Sawyer (mp3gain@hotmail.com)\r\n         *    -- blame him if you think this runs too slowly, or the coding is otherwise flawed\r\n         *\r\n         *  lots of code improvements by Frank Klemm ( http://www.uni-jena.de/~pfk/mpp/ )\r\n         *    -- credit him for all the _good_ programming ;)\r\n         *\r\n         *\r\n         *  For an explanation of the concepts and the basic algorithms involved, go to:\r\n         *    http://www.replaygain.org/\r\n         */\r\n\r\n        /*\r\n         *  Here's the deal. Call\r\n         *\r\n         *    InitGainAnalysis ( long samplefreq );\r\n         *\r\n         *  to initialize everything. Call\r\n         *\r\n         *    AnalyzeSamples ( var Float_t*  left_samples,\r\n         *                     var Float_t*  right_samples,\r\n         *                     size_t          num_samples,\r\n         *                     int             num_channels );\r\n         *\r\n         *  as many times as you want, with as many or as few samples as you want.\r\n         *  If mono, pass the sample buffer in through left_samples, leave\r\n         *  right_samples NULL, and make sure num_channels = 1.\r\n         *\r\n         *    GetTitleGain()\r\n         *\r\n         *  will return the recommended dB level change for all samples analyzed\r\n         *  SINCE THE LAST TIME you called GetTitleGain() OR InitGainAnalysis().\r\n         *\r\n         *    GetAlbumGain()\r\n         *\r\n         *  will return the recommended dB level change for all samples analyzed\r\n         *  since InitGainAnalysis() was called and finalized with GetTitleGain().\r\n         *\r\n         *  Pseudo-code to process an album:\r\n         *\r\n         *    Float_t       l_samples [4096];\r\n         *    Float_t       r_samples [4096];\r\n         *    size_t        num_samples;\r\n         *    unsigned int  num_songs;\r\n         *    unsigned int  i;\r\n         *\r\n         *    InitGainAnalysis ( 44100 );\r\n         *    for ( i = 1; i <= num_songs; i++ ) {\r\n         *        while ( ( num_samples = getSongSamples ( song[i], left_samples, right_samples ) ) > 0 )\r\n         *            AnalyzeSamples ( left_samples, right_samples, num_samples, 2 );\r\n         *        fprintf (\"Recommended dB change for song %2d: %+6.2 dB\\n\", i, GetTitleGain() );\r\n         *    }\r\n         *    fprintf (\"Recommended dB change for whole album: %+6.2 dB\\n\", GetAlbumGain() );\r\n         */\r\n\r\n        /*\r\n         *  So here's the main source of potential code confusion:\r\n         *\r\n         *  The filters applied to the incoming samples are IIR filters,\r\n         *  meaning they rely on up to <filter order> number of previous samples\r\n         *  AND up to <filter order> number of previous filtered samples.\r\n         *\r\n         *  I set up the AnalyzeSamples routine to minimize memory usage and interface\r\n         *  complexity. The speed isn't compromised too much (I don't think), but the\r\n         *  internal complexity is higher than it should be for such a relatively\r\n         *  simple routine.\r\n         *\r\n         *  Optimization/clarity suggestions are welcome.\r\n         */\r\n\r\n        /**\r\n         * Table entries per dB\r\n         */\r\n        GainAnalysis.STEPS_per_dB = 100.;\r\n        /**\r\n         * Table entries for 0...MAX_dB (normal max. values are 70...80 dB)\r\n         */\r\n        GainAnalysis.MAX_dB = 120.;\r\n        GainAnalysis.GAIN_NOT_ENOUGH_SAMPLES = -24601;\r\n        GainAnalysis.GAIN_ANALYSIS_ERROR = 0;\r\n        GainAnalysis.GAIN_ANALYSIS_OK = 1;\r\n        GainAnalysis.INIT_GAIN_ANALYSIS_ERROR = 0;\r\n        GainAnalysis.INIT_GAIN_ANALYSIS_OK = 1;\r\n\r\n        GainAnalysis.YULE_ORDER = 10;\r\n        GainAnalysis.MAX_ORDER = GainAnalysis.YULE_ORDER;\r\n\r\n        GainAnalysis.MAX_SAMP_FREQ = 48000;\r\n        GainAnalysis.RMS_WINDOW_TIME_NUMERATOR = 1;\r\n        GainAnalysis.RMS_WINDOW_TIME_DENOMINATOR = 20;\r\n        GainAnalysis.MAX_SAMPLES_PER_WINDOW = ((GainAnalysis.MAX_SAMP_FREQ * GainAnalysis.RMS_WINDOW_TIME_NUMERATOR) / GainAnalysis.RMS_WINDOW_TIME_DENOMINATOR + 1);\r\n\r\n        function GainAnalysis() {\r\n            /**\r\n             * calibration value for 89dB\r\n             */\r\n            var PINK_REF = 64.82;\r\n\r\n            var YULE_ORDER = GainAnalysis.YULE_ORDER;\r\n            /**\r\n             * percentile which is louder than the proposed level\r\n             */\r\n            var RMS_PERCENTILE = 0.95;\r\n            /**\r\n             * maximum allowed sample frequency [Hz]\r\n             */\r\n            var MAX_SAMP_FREQ = GainAnalysis.MAX_SAMP_FREQ;\r\n            var RMS_WINDOW_TIME_NUMERATOR = GainAnalysis.RMS_WINDOW_TIME_NUMERATOR;\r\n            /**\r\n             * numerator / denominator = time slice size [s]\r\n             */\r\n            var RMS_WINDOW_TIME_DENOMINATOR = GainAnalysis.RMS_WINDOW_TIME_DENOMINATOR;\r\n            /**\r\n             * max. Samples per Time slice\r\n             */\r\n            var MAX_SAMPLES_PER_WINDOW = GainAnalysis.MAX_SAMPLES_PER_WINDOW;\r\n\r\n\r\n            var ABYule = [\r\n                [0.03857599435200, -3.84664617118067, -0.02160367184185,\r\n                    7.81501653005538, -0.00123395316851, -11.34170355132042,\r\n                    -0.00009291677959, 13.05504219327545, -0.01655260341619,\r\n                    -12.28759895145294, 0.02161526843274, 9.48293806319790,\r\n                    -0.02074045215285, -5.87257861775999, 0.00594298065125,\r\n                    2.75465861874613, 0.00306428023191, -0.86984376593551,\r\n                    0.00012025322027, 0.13919314567432, 0.00288463683916],\r\n                [0.05418656406430, -3.47845948550071, -0.02911007808948,\r\n                    6.36317777566148, -0.00848709379851, -8.54751527471874,\r\n                    -0.00851165645469, 9.47693607801280, -0.00834990904936,\r\n                    -8.81498681370155, 0.02245293253339, 6.85401540936998,\r\n                    -0.02596338512915, -4.39470996079559, 0.01624864962975,\r\n                    2.19611684890774, -0.00240879051584, -0.75104302451432,\r\n                    0.00674613682247, 0.13149317958808, -0.00187763777362],\r\n                [0.15457299681924, -2.37898834973084, -0.09331049056315,\r\n                    2.84868151156327, -0.06247880153653, -2.64577170229825,\r\n                    0.02163541888798, 2.23697657451713, -0.05588393329856,\r\n                    -1.67148153367602, 0.04781476674921, 1.00595954808547,\r\n                    0.00222312597743, -0.45953458054983, 0.03174092540049,\r\n                    0.16378164858596, -0.01390589421898, -0.05032077717131,\r\n                    0.00651420667831, 0.02347897407020, -0.00881362733839],\r\n                [0.30296907319327, -1.61273165137247, -0.22613988682123,\r\n                    1.07977492259970, -0.08587323730772, -0.25656257754070,\r\n                    0.03282930172664, -0.16276719120440, -0.00915702933434,\r\n                    -0.22638893773906, -0.02364141202522, 0.39120800788284,\r\n                    -0.00584456039913, -0.22138138954925, 0.06276101321749,\r\n                    0.04500235387352, -0.00000828086748, 0.02005851806501,\r\n                    0.00205861885564, 0.00302439095741, -0.02950134983287],\r\n                [0.33642304856132, -1.49858979367799, -0.25572241425570,\r\n                    0.87350271418188, -0.11828570177555, 0.12205022308084,\r\n                    0.11921148675203, -0.80774944671438, -0.07834489609479,\r\n                    0.47854794562326, -0.00469977914380, -0.12453458140019,\r\n                    -0.00589500224440, -0.04067510197014, 0.05724228140351,\r\n                    0.08333755284107, 0.00832043980773, -0.04237348025746,\r\n                    -0.01635381384540, 0.02977207319925, -0.01760176568150],\r\n                [0.44915256608450, -0.62820619233671, -0.14351757464547,\r\n                    0.29661783706366, -0.22784394429749, -0.37256372942400,\r\n                    -0.01419140100551, 0.00213767857124, 0.04078262797139,\r\n                    -0.42029820170918, -0.12398163381748, 0.22199650564824,\r\n                    0.04097565135648, 0.00613424350682, 0.10478503600251,\r\n                    0.06747620744683, -0.01863887810927, 0.05784820375801,\r\n                    -0.03193428438915, 0.03222754072173, 0.00541907748707],\r\n                [0.56619470757641, -1.04800335126349, -0.75464456939302,\r\n                    0.29156311971249, 0.16242137742230, -0.26806001042947,\r\n                    0.16744243493672, 0.00819999645858, -0.18901604199609,\r\n                    0.45054734505008, 0.30931782841830, -0.33032403314006,\r\n                    -0.27562961986224, 0.06739368333110, 0.00647310677246,\r\n                    -0.04784254229033, 0.08647503780351, 0.01639907836189,\r\n                    -0.03788984554840, 0.01807364323573, -0.00588215443421],\r\n                [0.58100494960553, -0.51035327095184, -0.53174909058578,\r\n                    -0.31863563325245, -0.14289799034253, -0.20256413484477,\r\n                    0.17520704835522, 0.14728154134330, 0.02377945217615,\r\n                    0.38952639978999, 0.15558449135573, -0.23313271880868,\r\n                    -0.25344790059353, -0.05246019024463, 0.01628462406333,\r\n                    -0.02505961724053, 0.06920467763959, 0.02442357316099,\r\n                    -0.03721611395801, 0.01818801111503, -0.00749618797172],\r\n                [0.53648789255105, -0.25049871956020, -0.42163034350696,\r\n                    -0.43193942311114, -0.00275953611929, -0.03424681017675,\r\n                    0.04267842219415, -0.04678328784242, -0.10214864179676,\r\n                    0.26408300200955, 0.14590772289388, 0.15113130533216,\r\n                    -0.02459864859345, -0.17556493366449, -0.11202315195388,\r\n                    -0.18823009262115, -0.04060034127000, 0.05477720428674,\r\n                    0.04788665548180, 0.04704409688120, -0.02217936801134]];\r\n\r\n            var ABButter = [\r\n                [0.98621192462708, -1.97223372919527, -1.97242384925416,\r\n                    0.97261396931306, 0.98621192462708],\r\n                [0.98500175787242, -1.96977855582618, -1.97000351574484,\r\n                    0.97022847566350, 0.98500175787242],\r\n                [0.97938932735214, -1.95835380975398, -1.95877865470428,\r\n                    0.95920349965459, 0.97938932735214],\r\n                [0.97531843204928, -1.95002759149878, -1.95063686409857,\r\n                    0.95124613669835, 0.97531843204928],\r\n                [0.97316523498161, -1.94561023566527, -1.94633046996323,\r\n                    0.94705070426118, 0.97316523498161],\r\n                [0.96454515552826, -1.92783286977036, -1.92909031105652,\r\n                    0.93034775234268, 0.96454515552826],\r\n                [0.96009142950541, -1.91858953033784, -1.92018285901082,\r\n                    0.92177618768381, 0.96009142950541],\r\n                [0.95856916599601, -1.91542108074780, -1.91713833199203,\r\n                    0.91885558323625, 0.95856916599601],\r\n                [0.94597685600279, -1.88903307939452, -1.89195371200558,\r\n                    0.89487434461664, 0.94597685600279]];\r\n\r\n\r\n            /**\r\n             * When calling this procedure, make sure that ip[-order] and op[-order]\r\n             * point to real data\r\n             */\r\n            //private void filterYule(final float[] input, int inputPos, float[] output,\r\n            //int outputPos, int nSamples, final float[] kernel) {\r\n            function filterYule(input, inputPos, output, outputPos, nSamples, kernel) {\r\n\r\n                while ((nSamples--) != 0) {\r\n                    /* 1e-10 is a hack to avoid slowdown because of denormals */\r\n                    output[outputPos] = 1e-10 + input[inputPos + 0] * kernel[0]\r\n                        - output[outputPos - 1] * kernel[1] + input[inputPos - 1]\r\n                        * kernel[2] - output[outputPos - 2] * kernel[3]\r\n                        + input[inputPos - 2] * kernel[4] - output[outputPos - 3]\r\n                        * kernel[5] + input[inputPos - 3] * kernel[6]\r\n                        - output[outputPos - 4] * kernel[7] + input[inputPos - 4]\r\n                        * kernel[8] - output[outputPos - 5] * kernel[9]\r\n                        + input[inputPos - 5] * kernel[10] - output[outputPos - 6]\r\n                        * kernel[11] + input[inputPos - 6] * kernel[12]\r\n                        - output[outputPos - 7] * kernel[13] + input[inputPos - 7]\r\n                        * kernel[14] - output[outputPos - 8] * kernel[15]\r\n                        + input[inputPos - 8] * kernel[16] - output[outputPos - 9]\r\n                        * kernel[17] + input[inputPos - 9] * kernel[18]\r\n                        - output[outputPos - 10] * kernel[19]\r\n                        + input[inputPos - 10] * kernel[20];\r\n                    ++outputPos;\r\n                    ++inputPos;\r\n                }\r\n            }\r\n\r\n//private void filterButter(final float[] input, int inputPos,\r\n//    float[] output, int outputPos, int nSamples, final float[] kernel) {\r\n            function filterButter(input, inputPos, output, outputPos, nSamples, kernel) {\r\n\r\n                while ((nSamples--) != 0) {\r\n                    output[outputPos] = input[inputPos + 0] * kernel[0]\r\n                        - output[outputPos - 1] * kernel[1] + input[inputPos - 1]\r\n                        * kernel[2] - output[outputPos - 2] * kernel[3]\r\n                        + input[inputPos - 2] * kernel[4];\r\n                    ++outputPos;\r\n                    ++inputPos;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * @return INIT_GAIN_ANALYSIS_OK if successful, INIT_GAIN_ANALYSIS_ERROR if\r\n             *         not\r\n             */\r\n            function ResetSampleFrequency(rgData, samplefreq) {\r\n                /* zero out initial values */\r\n                for (var i = 0; i < MAX_ORDER; i++)\r\n                    rgData.linprebuf[i] = rgData.lstepbuf[i] = rgData.loutbuf[i] = rgData.rinprebuf[i] = rgData.rstepbuf[i] = rgData.routbuf[i] = 0.;\r\n\r\n                switch (0 | (samplefreq)) {\r\n                    case 48000:\r\n                        rgData.reqindex = 0;\r\n                        break;\r\n                    case 44100:\r\n                        rgData.reqindex = 1;\r\n                        break;\r\n                    case 32000:\r\n                        rgData.reqindex = 2;\r\n                        break;\r\n                    case 24000:\r\n                        rgData.reqindex = 3;\r\n                        break;\r\n                    case 22050:\r\n                        rgData.reqindex = 4;\r\n                        break;\r\n                    case 16000:\r\n                        rgData.reqindex = 5;\r\n                        break;\r\n                    case 12000:\r\n                        rgData.reqindex = 6;\r\n                        break;\r\n                    case 11025:\r\n                        rgData.reqindex = 7;\r\n                        break;\r\n                    case 8000:\r\n                        rgData.reqindex = 8;\r\n                        break;\r\n                    default:\r\n                        return INIT_GAIN_ANALYSIS_ERROR;\r\n                }\r\n\r\n                rgData.sampleWindow = 0 | ((samplefreq * RMS_WINDOW_TIME_NUMERATOR\r\n                    + RMS_WINDOW_TIME_DENOMINATOR - 1) / RMS_WINDOW_TIME_DENOMINATOR);\r\n\r\n                rgData.lsum = 0.;\r\n                rgData.rsum = 0.;\r\n                rgData.totsamp = 0;\r\n\r\n                Arrays.ill(rgData.A, 0);\r\n\r\n                return INIT_GAIN_ANALYSIS_OK;\r\n            }\r\n\r\n            this.InitGainAnalysis = function (rgData, samplefreq) {\r\n                if (ResetSampleFrequency(rgData, samplefreq) != INIT_GAIN_ANALYSIS_OK) {\r\n                    return INIT_GAIN_ANALYSIS_ERROR;\r\n                }\r\n\r\n                rgData.linpre = MAX_ORDER;\r\n                rgData.rinpre = MAX_ORDER;\r\n                rgData.lstep = MAX_ORDER;\r\n                rgData.rstep = MAX_ORDER;\r\n                rgData.lout = MAX_ORDER;\r\n                rgData.rout = MAX_ORDER;\r\n\r\n                Arrays.fill(rgData.B, 0);\r\n\r\n                return INIT_GAIN_ANALYSIS_OK;\r\n            };\r\n\r\n            /**\r\n             * square\r\n             */\r\n            function fsqr(d) {\r\n                return d * d;\r\n            }\r\n\r\n            this.AnalyzeSamples = function (rgData, left_samples, left_samplesPos, right_samples, right_samplesPos, num_samples,\r\n                                            num_channels) {\r\n                var curleft;\r\n                var curleftBase;\r\n                var curright;\r\n                var currightBase;\r\n                var batchsamples;\r\n                var cursamples;\r\n                var cursamplepos;\r\n\r\n                if (num_samples == 0)\r\n                    return GAIN_ANALYSIS_OK;\r\n\r\n                cursamplepos = 0;\r\n                batchsamples = num_samples;\r\n\r\n                switch (num_channels) {\r\n                    case 1:\r\n                        right_samples = left_samples;\r\n                        right_samplesPos = left_samplesPos;\r\n                        break;\r\n                    case 2:\r\n                        break;\r\n                    default:\r\n                        return GAIN_ANALYSIS_ERROR;\r\n                }\r\n\r\n                if (num_samples < MAX_ORDER) {\r\n                    System.arraycopy(left_samples, left_samplesPos, rgData.linprebuf,\r\n                        MAX_ORDER, num_samples);\r\n                    System.arraycopy(right_samples, right_samplesPos, rgData.rinprebuf,\r\n                        MAX_ORDER, num_samples);\r\n                } else {\r\n                    System.arraycopy(left_samples, left_samplesPos, rgData.linprebuf,\r\n                        MAX_ORDER, MAX_ORDER);\r\n                    System.arraycopy(right_samples, right_samplesPos, rgData.rinprebuf,\r\n                        MAX_ORDER, MAX_ORDER);\r\n                }\r\n\r\n                while (batchsamples > 0) {\r\n                    cursamples = batchsamples > rgData.sampleWindow - rgData.totsamp ? rgData.sampleWindow\r\n                        - rgData.totsamp\r\n                        : batchsamples;\r\n                    if (cursamplepos < MAX_ORDER) {\r\n                        curleft = rgData.linpre + cursamplepos;\r\n                        curleftBase = rgData.linprebuf;\r\n                        curright = rgData.rinpre + cursamplepos;\r\n                        currightBase = rgData.rinprebuf;\r\n                        if (cursamples > MAX_ORDER - cursamplepos)\r\n                            cursamples = MAX_ORDER - cursamplepos;\r\n                    } else {\r\n                        curleft = left_samplesPos + cursamplepos;\r\n                        curleftBase = left_samples;\r\n                        curright = right_samplesPos + cursamplepos;\r\n                        currightBase = right_samples;\r\n                    }\r\n\r\n                    filterYule(curleftBase, curleft, rgData.lstepbuf, rgData.lstep\r\n                        + rgData.totsamp, cursamples, ABYule[rgData.reqindex]);\r\n                    filterYule(currightBase, curright, rgData.rstepbuf, rgData.rstep\r\n                        + rgData.totsamp, cursamples, ABYule[rgData.reqindex]);\r\n\r\n                    filterButter(rgData.lstepbuf, rgData.lstep + rgData.totsamp,\r\n                        rgData.loutbuf, rgData.lout + rgData.totsamp, cursamples,\r\n                        ABButter[rgData.reqindex]);\r\n                    filterButter(rgData.rstepbuf, rgData.rstep + rgData.totsamp,\r\n                        rgData.routbuf, rgData.rout + rgData.totsamp, cursamples,\r\n                        ABButter[rgData.reqindex]);\r\n\r\n                    curleft = rgData.lout + rgData.totsamp;\r\n                    /* Get the squared values */\r\n                    curleftBase = rgData.loutbuf;\r\n                    curright = rgData.rout + rgData.totsamp;\r\n                    currightBase = rgData.routbuf;\r\n\r\n                    var i = cursamples % 8;\r\n                    while ((i--) != 0) {\r\n                        rgData.lsum += fsqr(curleftBase[curleft++]);\r\n                        rgData.rsum += fsqr(currightBase[curright++]);\r\n                    }\r\n                    i = cursamples / 8;\r\n                    while ((i--) != 0) {\r\n                        rgData.lsum += fsqr(curleftBase[curleft + 0])\r\n                            + fsqr(curleftBase[curleft + 1])\r\n                            + fsqr(curleftBase[curleft + 2])\r\n                            + fsqr(curleftBase[curleft + 3])\r\n                            + fsqr(curleftBase[curleft + 4])\r\n                            + fsqr(curleftBase[curleft + 5])\r\n                            + fsqr(curleftBase[curleft + 6])\r\n                            + fsqr(curleftBase[curleft + 7]);\r\n                        curleft += 8;\r\n                        rgData.rsum += fsqr(currightBase[curright + 0])\r\n                            + fsqr(currightBase[curright + 1])\r\n                            + fsqr(currightBase[curright + 2])\r\n                            + fsqr(currightBase[curright + 3])\r\n                            + fsqr(currightBase[curright + 4])\r\n                            + fsqr(currightBase[curright + 5])\r\n                            + fsqr(currightBase[curright + 6])\r\n                            + fsqr(currightBase[curright + 7]);\r\n                        curright += 8;\r\n                    }\r\n\r\n                    batchsamples -= cursamples;\r\n                    cursamplepos += cursamples;\r\n                    rgData.totsamp += cursamples;\r\n                    if (rgData.totsamp == rgData.sampleWindow) {\r\n                        /* Get the Root Mean Square (RMS) for this set of samples */\r\n                        var val = GainAnalysis.STEPS_per_dB\r\n                            * 10.\r\n                            * Math.log10((rgData.lsum + rgData.rsum)\r\n                                / rgData.totsamp * 0.5 + 1.e-37);\r\n                        var ival = (val <= 0) ? 0 : 0 | val;\r\n                        if (ival >= rgData.A.length)\r\n                            ival = rgData.A.length - 1;\r\n                        rgData.A[ival]++;\r\n                        rgData.lsum = rgData.rsum = 0.;\r\n\r\n                        System.arraycopy(rgData.loutbuf, rgData.totsamp,\r\n                            rgData.loutbuf, 0, MAX_ORDER);\r\n                        System.arraycopy(rgData.routbuf, rgData.totsamp,\r\n                            rgData.routbuf, 0, MAX_ORDER);\r\n                        System.arraycopy(rgData.lstepbuf, rgData.totsamp,\r\n                            rgData.lstepbuf, 0, MAX_ORDER);\r\n                        System.arraycopy(rgData.rstepbuf, rgData.totsamp,\r\n                            rgData.rstepbuf, 0, MAX_ORDER);\r\n                        rgData.totsamp = 0;\r\n                    }\r\n                    if (rgData.totsamp > rgData.sampleWindow) {\r\n                        /*\r\n                         * somehow I really screwed up: Error in programming! Contact\r\n                         * author about totsamp > sampleWindow\r\n                         */\r\n                        return GAIN_ANALYSIS_ERROR;\r\n                    }\r\n                }\r\n                if (num_samples < MAX_ORDER) {\r\n                    System.arraycopy(rgData.linprebuf, num_samples, rgData.linprebuf,\r\n                        0, MAX_ORDER - num_samples);\r\n                    System.arraycopy(rgData.rinprebuf, num_samples, rgData.rinprebuf,\r\n                        0, MAX_ORDER - num_samples);\r\n                    System.arraycopy(left_samples, left_samplesPos, rgData.linprebuf,\r\n                        MAX_ORDER - num_samples, num_samples);\r\n                    System.arraycopy(right_samples, right_samplesPos, rgData.rinprebuf,\r\n                        MAX_ORDER - num_samples, num_samples);\r\n                } else {\r\n                    System.arraycopy(left_samples, left_samplesPos + num_samples\r\n                        - MAX_ORDER, rgData.linprebuf, 0, MAX_ORDER);\r\n                    System.arraycopy(right_samples, right_samplesPos + num_samples\r\n                        - MAX_ORDER, rgData.rinprebuf, 0, MAX_ORDER);\r\n                }\r\n\r\n                return GAIN_ANALYSIS_OK;\r\n            };\r\n\r\n            function analyzeResult(Array, len) {\r\n                var i;\r\n\r\n                var elems = 0;\r\n                for (i = 0; i < len; i++)\r\n                    elems += Array[i];\r\n                if (elems == 0)\r\n                    return GAIN_NOT_ENOUGH_SAMPLES;\r\n\r\n                var upper = 0 | Math.ceil(elems * (1. - RMS_PERCENTILE));\r\n                for (i = len; i-- > 0;) {\r\n                    if ((upper -= Array[i]) <= 0)\r\n                        break;\r\n                }\r\n\r\n                //return (float) ((float) PINK_REF - (float) i / (float) STEPS_per_dB);\r\n                return (PINK_REF - i / GainAnalysis.STEPS_per_dB);\r\n            }\r\n\r\n            this.GetTitleGain = function (rgData) {\r\n                var retval = analyzeResult(rgData.A, rgData.A.length);\r\n\r\n                for (var i = 0; i < rgData.A.length; i++) {\r\n                    rgData.B[i] += rgData.A[i];\r\n                    rgData.A[i] = 0;\r\n                }\r\n\r\n                for (var i = 0; i < MAX_ORDER; i++)\r\n                    rgData.linprebuf[i] = rgData.lstepbuf[i] = rgData.loutbuf[i] = rgData.rinprebuf[i] = rgData.rstepbuf[i] = rgData.routbuf[i] = 0.;\r\n\r\n                rgData.totsamp = 0;\r\n                rgData.lsum = rgData.rsum = 0.;\r\n                return retval;\r\n            }\r\n\r\n        }\r\n\r\n\r\n        function Presets() {\r\n            function VBRPresets(qual, comp, compS,\r\n                                y, shThreshold, shThresholdS,\r\n                                adj, adjShort, lower,\r\n                                curve, sens, inter,\r\n                                joint, mod, fix) {\r\n                this.vbr_q = qual;\r\n                this.quant_comp = comp;\r\n                this.quant_comp_s = compS;\r\n                this.expY = y;\r\n                this.st_lrm = shThreshold;\r\n                this.st_s = shThresholdS;\r\n                this.masking_adj = adj;\r\n                this.masking_adj_short = adjShort;\r\n                this.ath_lower = lower;\r\n                this.ath_curve = curve;\r\n                this.ath_sensitivity = sens;\r\n                this.interch = inter;\r\n                this.safejoint = joint;\r\n                this.sfb21mod = mod;\r\n                this.msfix = fix;\r\n            }\r\n\r\n            function ABRPresets(kbps, comp, compS,\r\n                                joint, fix, shThreshold,\r\n                                shThresholdS, bass, sc,\r\n                                mask, lower, curve,\r\n                                interCh, sfScale) {\r\n                this.quant_comp = comp;\r\n                this.quant_comp_s = compS;\r\n                this.safejoint = joint;\r\n                this.nsmsfix = fix;\r\n                this.st_lrm = shThreshold;\r\n                this.st_s = shThresholdS;\r\n                this.nsbass = bass;\r\n                this.scale = sc;\r\n                this.masking_adj = mask;\r\n                this.ath_lower = lower;\r\n                this.ath_curve = curve;\r\n                this.interch = interCh;\r\n                this.sfscale = sfScale;\r\n            }\r\n\r\n            var lame;\r\n\r\n            this.setModules = function (_lame) {\r\n                lame = _lame;\r\n            };\r\n\r\n            /**\r\n             * <PRE>\r\n             * Switch mappings for VBR mode VBR_RH\r\n             *             vbr_q  qcomp_l  qcomp_s  expY  st_lrm   st_s  mask adj_l  adj_s  ath_lower  ath_curve  ath_sens  interChR  safejoint sfb21mod  msfix\r\n             * </PRE>\r\n             */\r\n            var vbr_old_switch_map = [\r\n                new VBRPresets(0, 9, 9, 0, 5.20, 125.0, -4.2, -6.3, 4.8, 1, 0, 0, 2, 21, 0.97),\r\n                new VBRPresets(1, 9, 9, 0, 5.30, 125.0, -3.6, -5.6, 4.5, 1.5, 0, 0, 2, 21, 1.35),\r\n                new VBRPresets(2, 9, 9, 0, 5.60, 125.0, -2.2, -3.5, 2.8, 2, 0, 0, 2, 21, 1.49),\r\n                new VBRPresets(3, 9, 9, 1, 5.80, 130.0, -1.8, -2.8, 2.6, 3, -4, 0, 2, 20, 1.64),\r\n                new VBRPresets(4, 9, 9, 1, 6.00, 135.0, -0.7, -1.1, 1.1, 3.5, -8, 0, 2, 0, 1.79),\r\n                new VBRPresets(5, 9, 9, 1, 6.40, 140.0, 0.5, 0.4, -7.5, 4, -12, 0.0002, 0, 0, 1.95),\r\n                new VBRPresets(6, 9, 9, 1, 6.60, 145.0, 0.67, 0.65, -14.7, 6.5, -19, 0.0004, 0, 0, 2.30),\r\n                new VBRPresets(7, 9, 9, 1, 6.60, 145.0, 0.8, 0.75, -19.7, 8, -22, 0.0006, 0, 0, 2.70),\r\n                new VBRPresets(8, 9, 9, 1, 6.60, 145.0, 1.2, 1.15, -27.5, 10, -23, 0.0007, 0, 0, 0),\r\n                new VBRPresets(9, 9, 9, 1, 6.60, 145.0, 1.6, 1.6, -36, 11, -25, 0.0008, 0, 0, 0),\r\n                new VBRPresets(10, 9, 9, 1, 6.60, 145.0, 2.0, 2.0, -36, 12, -25, 0.0008, 0, 0, 0)\r\n            ];\r\n\r\n            /**\r\n             * <PRE>\r\n             *                 vbr_q  qcomp_l  qcomp_s  expY  st_lrm   st_s  mask adj_l  adj_s  ath_lower  ath_curve  ath_sens  interChR  safejoint sfb21mod  msfix\r\n             * </PRE>\r\n             */\r\n            var vbr_psy_switch_map = [\r\n                new VBRPresets(0, 9, 9, 0, 4.20, 25.0, -7.0, -4.0, 7.5, 1, 0, 0, 2, 26, 0.97),\r\n                new VBRPresets(1, 9, 9, 0, 4.20, 25.0, -5.6, -3.6, 4.5, 1.5, 0, 0, 2, 21, 1.35),\r\n                new VBRPresets(2, 9, 9, 0, 4.20, 25.0, -4.4, -1.8, 2, 2, 0, 0, 2, 18, 1.49),\r\n                new VBRPresets(3, 9, 9, 1, 4.20, 25.0, -3.4, -1.25, 1.1, 3, -4, 0, 2, 15, 1.64),\r\n                new VBRPresets(4, 9, 9, 1, 4.20, 25.0, -2.2, 0.1, 0, 3.5, -8, 0, 2, 0, 1.79),\r\n                new VBRPresets(5, 9, 9, 1, 4.20, 25.0, -1.0, 1.65, -7.7, 4, -12, 0.0002, 0, 0, 1.95),\r\n                new VBRPresets(6, 9, 9, 1, 4.20, 25.0, -0.0, 2.47, -7.7, 6.5, -19, 0.0004, 0, 0, 2),\r\n                new VBRPresets(7, 9, 9, 1, 4.20, 25.0, 0.5, 2.0, -14.5, 8, -22, 0.0006, 0, 0, 2),\r\n                new VBRPresets(8, 9, 9, 1, 4.20, 25.0, 1.0, 2.4, -22.0, 10, -23, 0.0007, 0, 0, 2),\r\n                new VBRPresets(9, 9, 9, 1, 4.20, 25.0, 1.5, 2.95, -30.0, 11, -25, 0.0008, 0, 0, 2),\r\n                new VBRPresets(10, 9, 9, 1, 4.20, 25.0, 2.0, 2.95, -36.0, 12, -30, 0.0008, 0, 0, 2)\r\n            ];\r\n\r\n            function apply_vbr_preset(gfp, a, enforce) {\r\n                var vbr_preset = gfp.VBR == VbrMode.vbr_rh ? vbr_old_switch_map\r\n                    : vbr_psy_switch_map;\r\n\r\n                var x = gfp.VBR_q_frac;\r\n                var p = vbr_preset[a];\r\n                var q = vbr_preset[a + 1];\r\n                var set = p;\r\n\r\n                // NOOP(vbr_q);\r\n                // NOOP(quant_comp);\r\n                // NOOP(quant_comp_s);\r\n                // NOOP(expY);\r\n                p.st_lrm = p.st_lrm + x * (q.st_lrm - p.st_lrm);\r\n                // LERP(st_lrm);\r\n                p.st_s = p.st_s + x * (q.st_s - p.st_s);\r\n                // LERP(st_s);\r\n                p.masking_adj = p.masking_adj + x * (q.masking_adj - p.masking_adj);\r\n                // LERP(masking_adj);\r\n                p.masking_adj_short = p.masking_adj_short + x\r\n                    * (q.masking_adj_short - p.masking_adj_short);\r\n                // LERP(masking_adj_short);\r\n                p.ath_lower = p.ath_lower + x * (q.ath_lower - p.ath_lower);\r\n                // LERP(ath_lower);\r\n                p.ath_curve = p.ath_curve + x * (q.ath_curve - p.ath_curve);\r\n                // LERP(ath_curve);\r\n                p.ath_sensitivity = p.ath_sensitivity + x\r\n                    * (q.ath_sensitivity - p.ath_sensitivity);\r\n                // LERP(ath_sensitivity);\r\n                p.interch = p.interch + x * (q.interch - p.interch);\r\n                // LERP(interch);\r\n                // NOOP(safejoint);\r\n                // NOOP(sfb21mod);\r\n                p.msfix = p.msfix + x * (q.msfix - p.msfix);\r\n                // LERP(msfix);\r\n\r\n                lame_set_VBR_q(gfp, set.vbr_q);\r\n\r\n                if (enforce != 0)\r\n                    gfp.quant_comp = set.quant_comp;\r\n                else if (!(Math.abs(gfp.quant_comp - -1) > 0))\r\n                    gfp.quant_comp = set.quant_comp;\r\n                // SET_OPTION(quant_comp, set.quant_comp, -1);\r\n                if (enforce != 0)\r\n                    gfp.quant_comp_short = set.quant_comp_s;\r\n                else if (!(Math.abs(gfp.quant_comp_short - -1) > 0))\r\n                    gfp.quant_comp_short = set.quant_comp_s;\r\n                // SET_OPTION(quant_comp_short, set.quant_comp_s, -1);\r\n                if (set.expY != 0) {\r\n                    gfp.experimentalY = set.expY != 0;\r\n                }\r\n                if (enforce != 0)\r\n                    gfp.internal_flags.nsPsy.attackthre = set.st_lrm;\r\n                else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre - -1) > 0))\r\n                    gfp.internal_flags.nsPsy.attackthre = set.st_lrm;\r\n                // SET_OPTION(short_threshold_lrm, set.st_lrm, -1);\r\n                if (enforce != 0)\r\n                    gfp.internal_flags.nsPsy.attackthre_s = set.st_s;\r\n                else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre_s - -1) > 0))\r\n                    gfp.internal_flags.nsPsy.attackthre_s = set.st_s;\r\n                // SET_OPTION(short_threshold_s, set.st_s, -1);\r\n                if (enforce != 0)\r\n                    gfp.maskingadjust = set.masking_adj;\r\n                else if (!(Math.abs(gfp.maskingadjust - 0) > 0))\r\n                    gfp.maskingadjust = set.masking_adj;\r\n                // SET_OPTION(maskingadjust, set.masking_adj, 0);\r\n                if (enforce != 0)\r\n                    gfp.maskingadjust_short = set.masking_adj_short;\r\n                else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\r\n                    gfp.maskingadjust_short = set.masking_adj_short;\r\n                // SET_OPTION(maskingadjust_short, set.masking_adj_short, 0);\r\n                if (enforce != 0)\r\n                    gfp.ATHlower = -set.ath_lower / 10.0;\r\n                else if (!(Math.abs((-gfp.ATHlower * 10.0) - 0) > 0))\r\n                    gfp.ATHlower = -set.ath_lower / 10.0;\r\n                // SET_OPTION(ATHlower, set.ath_lower, 0);\r\n                if (enforce != 0)\r\n                    gfp.ATHcurve = set.ath_curve;\r\n                else if (!(Math.abs(gfp.ATHcurve - -1) > 0))\r\n                    gfp.ATHcurve = set.ath_curve;\r\n                // SET_OPTION(ATHcurve, set.ath_curve, -1);\r\n                if (enforce != 0)\r\n                    gfp.athaa_sensitivity = set.ath_sensitivity;\r\n                else if (!(Math.abs(gfp.athaa_sensitivity - -1) > 0))\r\n                    gfp.athaa_sensitivity = set.ath_sensitivity;\r\n                // SET_OPTION(athaa_sensitivity, set.ath_sensitivity, 0);\r\n                if (set.interch > 0) {\r\n                    if (enforce != 0)\r\n                        gfp.interChRatio = set.interch;\r\n                    else if (!(Math.abs(gfp.interChRatio - -1) > 0))\r\n                        gfp.interChRatio = set.interch;\r\n                    // SET_OPTION(interChRatio, set.interch, -1);\r\n                }\r\n\r\n                /* parameters for which there is no proper set/get interface */\r\n                if (set.safejoint > 0) {\r\n                    gfp.exp_nspsytune = gfp.exp_nspsytune | set.safejoint;\r\n                }\r\n                if (set.sfb21mod > 0) {\r\n                    gfp.exp_nspsytune = gfp.exp_nspsytune | (set.sfb21mod << 20);\r\n                }\r\n                if (enforce != 0)\r\n                    gfp.msfix = set.msfix;\r\n                else if (!(Math.abs(gfp.msfix - -1) > 0))\r\n                    gfp.msfix = set.msfix;\r\n                // SET_OPTION(msfix, set.msfix, -1);\r\n\r\n                if (enforce == 0) {\r\n                    gfp.VBR_q = a;\r\n                    gfp.VBR_q_frac = x;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * <PRE>\r\n             *  Switch mappings for ABR mode\r\n             *\r\n             *              kbps  quant q_s safejoint nsmsfix st_lrm  st_s  ns-bass scale   msk ath_lwr ath_curve  interch , sfscale\r\n             * </PRE>\r\n             */\r\n            var abr_switch_map = [\r\n                new ABRPresets(8, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -30.0, 11, 0.0012, 1), /*   8, impossible to use in stereo */\r\n                new ABRPresets(16, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -25.0, 11, 0.0010, 1), /*  16 */\r\n                new ABRPresets(24, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -20.0, 11, 0.0010, 1), /*  24 */\r\n                new ABRPresets(32, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -15.0, 11, 0.0010, 1), /*  32 */\r\n                new ABRPresets(40, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -10.0, 11, 0.0009, 1), /*  40 */\r\n                new ABRPresets(48, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -10.0, 11, 0.0009, 1), /*  48 */\r\n                new ABRPresets(56, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -6.0, 11, 0.0008, 1), /*  56 */\r\n                new ABRPresets(64, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, -2.0, 11, 0.0008, 1), /*  64 */\r\n                new ABRPresets(80, 9, 9, 0, 0, 6.60, 145, 0, 0.95, 0, .0, 8, 0.0007, 1), /*  80 */\r\n                new ABRPresets(96, 9, 9, 0, 2.50, 6.60, 145, 0, 0.95, 0, 1.0, 5.5, 0.0006, 1), /*  96 */\r\n                new ABRPresets(112, 9, 9, 0, 2.25, 6.60, 145, 0, 0.95, 0, 2.0, 4.5, 0.0005, 1), /* 112 */\r\n                new ABRPresets(128, 9, 9, 0, 1.95, 6.40, 140, 0, 0.95, 0, 3.0, 4, 0.0002, 1), /* 128 */\r\n                new ABRPresets(160, 9, 9, 1, 1.79, 6.00, 135, 0, 0.95, -2, 5.0, 3.5, 0, 1), /* 160 */\r\n                new ABRPresets(192, 9, 9, 1, 1.49, 5.60, 125, 0, 0.97, -4, 7.0, 3, 0, 0), /* 192 */\r\n                new ABRPresets(224, 9, 9, 1, 1.25, 5.20, 125, 0, 0.98, -6, 9.0, 2, 0, 0), /* 224 */\r\n                new ABRPresets(256, 9, 9, 1, 0.97, 5.20, 125, 0, 1.00, -8, 10.0, 1, 0, 0), /* 256 */\r\n                new ABRPresets(320, 9, 9, 1, 0.90, 5.20, 125, 0, 1.00, -10, 12.0, 0, 0, 0)  /* 320 */\r\n            ];\r\n\r\n            function apply_abr_preset(gfp, preset, enforce) {\r\n                /* Variables for the ABR stuff */\r\n                var actual_bitrate = preset;\r\n\r\n                var r = lame.nearestBitrateFullIndex(preset);\r\n\r\n                gfp.VBR = VbrMode.vbr_abr;\r\n                gfp.VBR_mean_bitrate_kbps = actual_bitrate;\r\n                gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps, 320);\r\n                gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps, 8);\r\n                gfp.brate = gfp.VBR_mean_bitrate_kbps;\r\n                if (gfp.VBR_mean_bitrate_kbps > 320) {\r\n                    gfp.disable_reservoir = true;\r\n                }\r\n\r\n                /* parameters for which there is no proper set/get interface */\r\n                if (abr_switch_map[r].safejoint > 0)\r\n                    gfp.exp_nspsytune = gfp.exp_nspsytune | 2;\r\n                /* safejoint */\r\n\r\n                if (abr_switch_map[r].sfscale > 0) {\r\n                    gfp.internal_flags.noise_shaping = 2;\r\n                }\r\n                /* ns-bass tweaks */\r\n                if (Math.abs(abr_switch_map[r].nsbass) > 0) {\r\n                    var k = (int)(abr_switch_map[r].nsbass * 4);\r\n                    if (k < 0)\r\n                        k += 64;\r\n                    gfp.exp_nspsytune = gfp.exp_nspsytune | (k << 2);\r\n                }\r\n\r\n                if (enforce != 0)\r\n                    gfp.quant_comp = abr_switch_map[r].quant_comp;\r\n                else if (!(Math.abs(gfp.quant_comp - -1) > 0))\r\n                    gfp.quant_comp = abr_switch_map[r].quant_comp;\r\n                // SET_OPTION(quant_comp, abr_switch_map[r].quant_comp, -1);\r\n                if (enforce != 0)\r\n                    gfp.quant_comp_short = abr_switch_map[r].quant_comp_s;\r\n                else if (!(Math.abs(gfp.quant_comp_short - -1) > 0))\r\n                    gfp.quant_comp_short = abr_switch_map[r].quant_comp_s;\r\n                // SET_OPTION(quant_comp_short, abr_switch_map[r].quant_comp_s, -1);\r\n\r\n                if (enforce != 0)\r\n                    gfp.msfix = abr_switch_map[r].nsmsfix;\r\n                else if (!(Math.abs(gfp.msfix - -1) > 0))\r\n                    gfp.msfix = abr_switch_map[r].nsmsfix;\r\n                // SET_OPTION(msfix, abr_switch_map[r].nsmsfix, -1);\r\n\r\n                if (enforce != 0)\r\n                    gfp.internal_flags.nsPsy.attackthre = abr_switch_map[r].st_lrm;\r\n                else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre - -1) > 0))\r\n                    gfp.internal_flags.nsPsy.attackthre = abr_switch_map[r].st_lrm;\r\n                // SET_OPTION(short_threshold_lrm, abr_switch_map[r].st_lrm, -1);\r\n                if (enforce != 0)\r\n                    gfp.internal_flags.nsPsy.attackthre_s = abr_switch_map[r].st_s;\r\n                else if (!(Math.abs(gfp.internal_flags.nsPsy.attackthre_s - -1) > 0))\r\n                    gfp.internal_flags.nsPsy.attackthre_s = abr_switch_map[r].st_s;\r\n                // SET_OPTION(short_threshold_s, abr_switch_map[r].st_s, -1);\r\n\r\n                /*\r\n                 * ABR seems to have big problems with clipping, especially at low\r\n                 * bitrates\r\n                 */\r\n                /*\r\n                 * so we compensate for that here by using a scale value depending on\r\n                 * bitrate\r\n                 */\r\n                if (enforce != 0)\r\n                    gfp.scale = abr_switch_map[r].scale;\r\n                else if (!(Math.abs(gfp.scale - -1) > 0))\r\n                    gfp.scale = abr_switch_map[r].scale;\r\n                // SET_OPTION(scale, abr_switch_map[r].scale, -1);\r\n\r\n                if (enforce != 0)\r\n                    gfp.maskingadjust = abr_switch_map[r].masking_adj;\r\n                else if (!(Math.abs(gfp.maskingadjust - 0) > 0))\r\n                    gfp.maskingadjust = abr_switch_map[r].masking_adj;\r\n                // SET_OPTION(maskingadjust, abr_switch_map[r].masking_adj, 0);\r\n                if (abr_switch_map[r].masking_adj > 0) {\r\n                    if (enforce != 0)\r\n                        gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * .9);\r\n                    else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\r\n                        gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * .9);\r\n                    // SET_OPTION(maskingadjust_short, abr_switch_map[r].masking_adj *\r\n                    // .9, 0);\r\n                } else {\r\n                    if (enforce != 0)\r\n                        gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * 1.1);\r\n                    else if (!(Math.abs(gfp.maskingadjust_short - 0) > 0))\r\n                        gfp.maskingadjust_short = (abr_switch_map[r].masking_adj * 1.1);\r\n                    // SET_OPTION(maskingadjust_short, abr_switch_map[r].masking_adj *\r\n                    // 1.1, 0);\r\n                }\r\n\r\n                if (enforce != 0)\r\n                    gfp.ATHlower = -abr_switch_map[r].ath_lower / 10.;\r\n                else if (!(Math.abs((-gfp.ATHlower * 10.) - 0) > 0))\r\n                    gfp.ATHlower = -abr_switch_map[r].ath_lower / 10.;\r\n                // SET_OPTION(ATHlower, abr_switch_map[r].ath_lower, 0);\r\n                if (enforce != 0)\r\n                    gfp.ATHcurve = abr_switch_map[r].ath_curve;\r\n                else if (!(Math.abs(gfp.ATHcurve - -1) > 0))\r\n                    gfp.ATHcurve = abr_switch_map[r].ath_curve;\r\n                // SET_OPTION(ATHcurve, abr_switch_map[r].ath_curve, -1);\r\n\r\n                if (enforce != 0)\r\n                    gfp.interChRatio = abr_switch_map[r].interch;\r\n                else if (!(Math.abs(gfp.interChRatio - -1) > 0))\r\n                    gfp.interChRatio = abr_switch_map[r].interch;\r\n                // SET_OPTION(interChRatio, abr_switch_map[r].interch, -1);\r\n\r\n                return preset;\r\n            }\r\n\r\n            this.apply_preset = function(gfp, preset, enforce) {\r\n                /* translate legacy presets */\r\n                switch (preset) {\r\n                    case Lame.R3MIX:\r\n                    {\r\n                        preset = Lame.V3;\r\n                        gfp.VBR = VbrMode.vbr_mtrh;\r\n                        break;\r\n                    }\r\n                    case Lame.MEDIUM:\r\n                    {\r\n                        preset = Lame.V4;\r\n                        gfp.VBR = VbrMode.vbr_rh;\r\n                        break;\r\n                    }\r\n                    case Lame.MEDIUM_FAST:\r\n                    {\r\n                        preset = Lame.V4;\r\n                        gfp.VBR = VbrMode.vbr_mtrh;\r\n                        break;\r\n                    }\r\n                    case Lame.STANDARD:\r\n                    {\r\n                        preset = Lame.V2;\r\n                        gfp.VBR = VbrMode.vbr_rh;\r\n                        break;\r\n                    }\r\n                    case Lame.STANDARD_FAST:\r\n                    {\r\n                        preset = Lame.V2;\r\n                        gfp.VBR = VbrMode.vbr_mtrh;\r\n                        break;\r\n                    }\r\n                    case Lame.EXTREME:\r\n                    {\r\n                        preset = Lame.V0;\r\n                        gfp.VBR = VbrMode.vbr_rh;\r\n                        break;\r\n                    }\r\n                    case Lame.EXTREME_FAST:\r\n                    {\r\n                        preset = Lame.V0;\r\n                        gfp.VBR = VbrMode.vbr_mtrh;\r\n                        break;\r\n                    }\r\n                    case Lame.INSANE:\r\n                    {\r\n                        preset = 320;\r\n                        gfp.preset = preset;\r\n                        apply_abr_preset(gfp, preset, enforce);\r\n                        gfp.VBR = VbrMode.vbr_off;\r\n                        return preset;\r\n                    }\r\n                }\r\n\r\n                gfp.preset = preset;\r\n                {\r\n                    switch (preset) {\r\n                        case Lame.V9:\r\n                            apply_vbr_preset(gfp, 9, enforce);\r\n                            return preset;\r\n                        case Lame.V8:\r\n                            apply_vbr_preset(gfp, 8, enforce);\r\n                            return preset;\r\n                        case Lame.V7:\r\n                            apply_vbr_preset(gfp, 7, enforce);\r\n                            return preset;\r\n                        case Lame.V6:\r\n                            apply_vbr_preset(gfp, 6, enforce);\r\n                            return preset;\r\n                        case Lame.V5:\r\n                            apply_vbr_preset(gfp, 5, enforce);\r\n                            return preset;\r\n                        case Lame.V4:\r\n                            apply_vbr_preset(gfp, 4, enforce);\r\n                            return preset;\r\n                        case Lame.V3:\r\n                            apply_vbr_preset(gfp, 3, enforce);\r\n                            return preset;\r\n                        case Lame.V2:\r\n                            apply_vbr_preset(gfp, 2, enforce);\r\n                            return preset;\r\n                        case Lame.V1:\r\n                            apply_vbr_preset(gfp, 1, enforce);\r\n                            return preset;\r\n                        case Lame.V0:\r\n                            apply_vbr_preset(gfp, 0, enforce);\r\n                            return preset;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n                if (8 <= preset && preset <= 320) {\r\n                    return apply_abr_preset(gfp, preset, enforce);\r\n                }\r\n\r\n                /* no corresponding preset found */\r\n                gfp.preset = 0;\r\n                return preset;\r\n            }\r\n\r\n            // Rest from getset.c:\r\n\r\n            /**\r\n             * VBR quality level.<BR>\r\n             * 0 = highest<BR>\r\n             * 9 = lowest\r\n             */\r\n            function lame_set_VBR_q(gfp, VBR_q) {\r\n                var ret = 0;\r\n\r\n                if (0 > VBR_q) {\r\n                    /* Unknown VBR quality level! */\r\n                    ret = -1;\r\n                    VBR_q = 0;\r\n                }\r\n                if (9 < VBR_q) {\r\n                    ret = -1;\r\n                    VBR_q = 9;\r\n                }\r\n\r\n                gfp.VBR_q = VBR_q;\r\n                gfp.VBR_q_frac = 0;\r\n                return ret;\r\n            }\r\n\r\n        }\r\n\r\n        /*\r\n         *      bit reservoir source file\r\n         *\r\n         *      Copyright (c) 1999-2000 Mark Taylor\r\n         *\r\n         * This library is free software; you can redistribute it and/or\r\n         * modify it under the terms of the GNU Lesser General Public\r\n         * License as published by the Free Software Foundation; either\r\n         * version 2 of the License, or (at your option) any later version.\r\n         *\r\n         * This library is distributed in the hope that it will be useful,\r\n         * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n         * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n         * Library General Public License for more details.\r\n         *\r\n         * You should have received a copy of the GNU Lesser General Public\r\n         * License along with this library; if not, write to the\r\n         * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\r\n         * Boston, MA 02111-1307, USA.\r\n         */\r\n\r\n        /* $Id: Reservoir.java,v 1.9 2011/05/24 20:48:06 kenchis Exp $ */\r\n\r\n//package mp3;\r\n\r\n        /**\r\n         * ResvFrameBegin:<BR>\r\n         * Called (repeatedly) at the beginning of a frame. Updates the maximum size of\r\n         * the reservoir, and checks to make sure main_data_begin was set properly by\r\n         * the formatter<BR>\r\n         * Background information:\r\n         *\r\n         * This is the original text from the ISO standard. Because of sooo many bugs\r\n         * and irritations correcting comments are added in brackets []. A '^W' means\r\n         * you should remove the last word.\r\n         *\r\n         * <PRE>\r\n         *  1. The following rule can be used to calculate the maximum\r\n         *     number of bits used for one granule [^W frame]:<BR>\r\n         *     At the highest possible bitrate of Layer III (320 kbps\r\n         *     per stereo signal [^W^W^W], 48 kHz) the frames must be of\r\n         *     [^W^W^W are designed to have] constant length, i.e.\r\n         *     one buffer [^W^W the frame] length is:<BR>\r\n         *\r\n         *         320 kbps * 1152/48 kHz = 7680 bit = 960 byte\r\n         *\r\n         *     This value is used as the maximum buffer per channel [^W^W] at\r\n         *     lower bitrates [than 320 kbps]. At 64 kbps mono or 128 kbps\r\n         *     stereo the main granule length is 64 kbps * 576/48 kHz = 768 bit\r\n         *     [per granule and channel] at 48 kHz sampling frequency.\r\n         *     This means that there is a maximum deviation (short time buffer\r\n         *     [= reservoir]) of 7680 - 2*2*768 = 4608 bits is allowed at 64 kbps.\r\n         *     The actual deviation is equal to the number of bytes [with the\r\n         *     meaning of octets] denoted by the main_data_end offset pointer.\r\n         *     The actual maximum deviation is (2^9-1)*8 bit = 4088 bits\r\n         *     [for MPEG-1 and (2^8-1)*8 bit for MPEG-2, both are hard limits].\r\n         *     ... The xchange of buffer bits between the left and right channel\r\n         *     is allowed without restrictions [exception: dual channel].\r\n         *     Because of the [constructed] constraint on the buffer size\r\n         *     main_data_end is always set to 0 in the case of bit_rate_index==14,\r\n         *     i.e. data rate 320 kbps per stereo signal [^W^W^W]. In this case\r\n         *     all data are allocated between adjacent header [^W sync] words\r\n         *     [, i.e. there is no buffering at all].\r\n         * </PRE>\r\n         */\r\n\r\n\r\n        function Reservoir() {\r\n            var bs;\r\n\r\n            this.setModules  = function(_bs) {\r\n                bs = _bs;\r\n            }\r\n\r\n            this.ResvFrameBegin = function(gfp, mean_bits) {\r\n                var gfc = gfp.internal_flags;\r\n                var maxmp3buf;\r\n                var l3_side = gfc.l3_side;\r\n\r\n                var frameLength = bs.getframebits(gfp);\r\n                mean_bits.bits = (frameLength - gfc.sideinfo_len * 8) / gfc.mode_gr;\r\n\r\n                /**\r\n                 * <PRE>\r\n                 *  Meaning of the variables:\r\n                 *      resvLimit: (0, 8, ..., 8*255 (MPEG-2), 8*511 (MPEG-1))\r\n                 *          Number of bits can be stored in previous frame(s) due to\r\n                 *          counter size constaints\r\n                 *      maxmp3buf: ( ??? ... 8*1951 (MPEG-1 and 2), 8*2047 (MPEG-2.5))\r\n                 *          Number of bits allowed to encode one frame (you can take 8*511 bit\r\n                 *          from the bit reservoir and at most 8*1440 bit from the current\r\n                 *          frame (320 kbps, 32 kHz), so 8*1951 bit is the largest possible\r\n                 *          value for MPEG-1 and -2)\r\n                 *\r\n                 *          maximum allowed granule/channel size times 4 = 8*2047 bits.,\r\n                 *          so this is the absolute maximum supported by the format.\r\n                 *\r\n                 *\r\n                 *      fullFrameBits:  maximum number of bits available for encoding\r\n                 *                      the current frame.\r\n                 *\r\n                 *      mean_bits:      target number of bits per granule.\r\n                 *\r\n                 *      frameLength:\r\n                 *\r\n                 *      gfc.ResvMax:   maximum allowed reservoir\r\n                 *\r\n                 *      gfc.ResvSize:  current reservoir size\r\n                 *\r\n                 *      l3_side.resvDrain_pre:\r\n                 *         ancillary data to be added to previous frame:\r\n                 *         (only usefull in VBR modes if it is possible to have\r\n                 *         maxmp3buf < fullFrameBits)).  Currently disabled,\r\n                 *         see #define NEW_DRAIN\r\n                 *         2010-02-13: RH now enabled, it seems to be needed for CBR too,\r\n                 *                     as there exists one example, where the FhG decoder\r\n                 *                     can't decode a -b320 CBR file anymore.\r\n                 *\r\n                 *      l3_side.resvDrain_post:\r\n                 *         ancillary data to be added to this frame:\r\n                 *\r\n                 * </PRE>\r\n                 */\r\n\r\n                /* main_data_begin has 9 bits in MPEG-1, 8 bits MPEG-2 */\r\n                var resvLimit = (8 * 256) * gfc.mode_gr - 8;\r\n\r\n                /*\r\n                 * maximum allowed frame size. dont use more than this number of bits,\r\n                 * even if the frame has the space for them:\r\n                 */\r\n                if (gfp.brate > 320) {\r\n                    /* in freeformat the buffer is constant */\r\n                    maxmp3buf = 8 * ((int) ((gfp.brate * 1000)\r\n                            / (gfp.out_samplerate / 1152) / 8 + .5));\r\n                } else {\r\n                    /*\r\n                     * all mp3 decoders should have enough buffer to handle this value:\r\n                     * size of a 320kbps 32kHz frame\r\n                     */\r\n                    maxmp3buf = 8 * 1440;\r\n\r\n                    /*\r\n                     * Bouvigne suggests this more lax interpretation of the ISO doc\r\n                     * instead of using 8*960.\r\n                     */\r\n\r\n                    if (gfp.strict_ISO) {\r\n                        maxmp3buf = 8 * ((int) (320000 / (gfp.out_samplerate / 1152) / 8 + .5));\r\n                    }\r\n                }\r\n\r\n                gfc.ResvMax = maxmp3buf - frameLength;\r\n                if (gfc.ResvMax > resvLimit)\r\n                    gfc.ResvMax = resvLimit;\r\n                if (gfc.ResvMax < 0 || gfp.disable_reservoir)\r\n                    gfc.ResvMax = 0;\r\n\r\n                var fullFrameBits = mean_bits.bits * gfc.mode_gr\r\n                    + Math.min(gfc.ResvSize, gfc.ResvMax);\r\n\r\n                if (fullFrameBits > maxmp3buf)\r\n                    fullFrameBits = maxmp3buf;\r\n\r\n\r\n                l3_side.resvDrain_pre = 0;\r\n\r\n                // frame analyzer code\r\n                if (gfc.pinfo != null) {\r\n                    /*\r\n                     * expected bits per channel per granule [is this also right for\r\n                     * mono/stereo, MPEG-1/2 ?]\r\n                     */\r\n                    gfc.pinfo.mean_bits = mean_bits.bits / 2;\r\n                    gfc.pinfo.resvsize = gfc.ResvSize;\r\n                }\r\n\r\n                return fullFrameBits;\r\n            }\r\n\r\n            /**\r\n             * returns targ_bits: target number of bits to use for 1 granule<BR>\r\n             * extra_bits: amount extra available from reservoir<BR>\r\n             * Mark Taylor 4/99\r\n             */\r\n            this.ResvMaxBits = function(gfp, mean_bits, targ_bits, cbr) {\r\n                var gfc = gfp.internal_flags;\r\n                var add_bits;\r\n                var ResvSize = gfc.ResvSize, ResvMax = gfc.ResvMax;\r\n\r\n                /* compensate the saved bits used in the 1st granule */\r\n                if (cbr != 0)\r\n                    ResvSize += mean_bits;\r\n\r\n                if ((gfc.substep_shaping & 1) != 0)\r\n                    ResvMax *= 0.9;\r\n\r\n                targ_bits.bits = mean_bits;\r\n\r\n                /* extra bits if the reservoir is almost full */\r\n                if (ResvSize * 10 > ResvMax * 9) {\r\n                    add_bits = ResvSize - (ResvMax * 9) / 10;\r\n                    targ_bits.bits += add_bits;\r\n                    gfc.substep_shaping |= 0x80;\r\n                } else {\r\n                    add_bits = 0;\r\n                    gfc.substep_shaping &= 0x7f;\r\n                    /*\r\n                     * build up reservoir. this builds the reservoir a little slower\r\n                     * than FhG. It could simple be mean_bits/15, but this was rigged to\r\n                     * always produce 100 (the old value) at 128kbs\r\n                     */\r\n                    if (!gfp.disable_reservoir && 0 == (gfc.substep_shaping & 1))\r\n                        targ_bits.bits -= .1 * mean_bits;\r\n                }\r\n\r\n                /* amount from the reservoir we are allowed to use. ISO says 6/10 */\r\n                var extra_bits = (ResvSize < (gfc.ResvMax * 6) / 10 ? ResvSize\r\n                    : (gfc.ResvMax * 6) / 10);\r\n                extra_bits -= add_bits;\r\n\r\n                if (extra_bits < 0)\r\n                    extra_bits = 0;\r\n                return extra_bits;\r\n            }\r\n\r\n            /**\r\n             * Called after a granule's bit allocation. Readjusts the size of the\r\n             * reservoir to reflect the granule's usage.\r\n             */\r\n            this.ResvAdjust = function(gfc, gi) {\r\n                gfc.ResvSize -= gi.part2_3_length + gi.part2_length;\r\n            }\r\n\r\n            /**\r\n             * Called after all granules in a frame have been allocated. Makes sure that\r\n             * the reservoir size is within limits, possibly by adding stuffing bits.\r\n             */\r\n            this.ResvFrameEnd = function(gfc, mean_bits) {\r\n                var over_bits;\r\n                var l3_side = gfc.l3_side;\r\n\r\n                gfc.ResvSize += mean_bits * gfc.mode_gr;\r\n                var stuffingBits = 0;\r\n                l3_side.resvDrain_post = 0;\r\n                l3_side.resvDrain_pre = 0;\r\n\r\n                /* we must be byte aligned */\r\n                if ((over_bits = gfc.ResvSize % 8) != 0)\r\n                    stuffingBits += over_bits;\r\n\r\n                over_bits = (gfc.ResvSize - stuffingBits) - gfc.ResvMax;\r\n                if (over_bits > 0) {\r\n                    stuffingBits += over_bits;\r\n                }\r\n\r\n                /*\r\n                 * NOTE: enabling the NEW_DRAIN code fixes some problems with FhG\r\n                 * decoder shipped with MS Windows operating systems. Using this, it is\r\n                 * even possible to use Gabriel's lax buffer consideration again, which\r\n                 * assumes, any decoder should have a buffer large enough for a 320 kbps\r\n                 * frame at 32 kHz sample rate.\r\n                 *\r\n                 * old drain code: lame -b320 BlackBird.wav --. does not play with\r\n                 * GraphEdit.exe using FhG decoder V1.5 Build 50\r\n                 *\r\n                 * new drain code: lame -b320 BlackBird.wav --. plays fine with\r\n                 * GraphEdit.exe using FhG decoder V1.5 Build 50\r\n                 *\r\n                 * Robert Hegemann, 2010-02-13.\r\n                 */\r\n                /*\r\n                 * drain as many bits as possible into previous frame ancillary data In\r\n                 * particular, in VBR mode ResvMax may have changed, and we have to make\r\n                 * sure main_data_begin does not create a reservoir bigger than ResvMax\r\n                 * mt 4/00\r\n                 */\r\n                {\r\n                    var mdb_bytes = Math.min(l3_side.main_data_begin * 8, stuffingBits) / 8;\r\n                    l3_side.resvDrain_pre += 8 * mdb_bytes;\r\n                    stuffingBits -= 8 * mdb_bytes;\r\n                    gfc.ResvSize -= 8 * mdb_bytes;\r\n                    l3_side.main_data_begin -= mdb_bytes;\r\n                }\r\n                /* drain the rest into this frames ancillary data */\r\n                l3_side.resvDrain_post += stuffingBits;\r\n                gfc.ResvSize -= stuffingBits;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * A Vbr header may be present in the ancillary data field of the first frame of\r\n         * an mp3 bitstream<BR>\r\n         * The Vbr header (optionally) contains\r\n         * <UL>\r\n         * <LI>frames total number of audio frames in the bitstream\r\n         * <LI>bytes total number of bytes in the bitstream\r\n         * <LI>toc table of contents\r\n         * </UL>\r\n         *\r\n         * toc (table of contents) gives seek points for random access.<BR>\r\n         * The ith entry determines the seek point for i-percent duration.<BR>\r\n         * seek point in bytes = (toc[i]/256.0) * total_bitstream_bytes<BR>\r\n         * e.g. half duration seek point = (toc[50]/256.0) * total_bitstream_bytes\r\n         */\r\n        VBRTag.NUMTOCENTRIES = 100;\r\n        VBRTag.MAXFRAMESIZE = 2880;\r\n\r\n        function VBRTag() {\r\n\r\n            var lame;\r\n            var bs;\r\n            var v;\r\n\r\n            this.setModules = function (_lame, _bs, _v) {\r\n                lame = _lame;\r\n                bs = _bs;\r\n                v = _v;\r\n            };\r\n\r\n            var FRAMES_FLAG = 0x0001;\r\n            var BYTES_FLAG = 0x0002;\r\n            var TOC_FLAG = 0x0004;\r\n            var VBR_SCALE_FLAG = 0x0008;\r\n\r\n            var NUMTOCENTRIES = VBRTag.NUMTOCENTRIES;\r\n\r\n            /**\r\n             * (0xB40) the max freeformat 640 32kHz framesize.\r\n             */\r\n            var MAXFRAMESIZE = VBRTag.MAXFRAMESIZE;\r\n\r\n            /**\r\n             * <PRE>\r\n             *    4 bytes for Header Tag\r\n             *    4 bytes for Header Flags\r\n             *  100 bytes for entry (toc)\r\n             *    4 bytes for frame size\r\n             *    4 bytes for stream size\r\n             *    4 bytes for VBR scale. a VBR quality indicator: 0=best 100=worst\r\n             *   20 bytes for LAME tag.  for example, \"LAME3.12 (beta 6)\"\r\n             * ___________\r\n             *  140 bytes\r\n             * </PRE>\r\n             */\r\n            var VBRHEADERSIZE = (NUMTOCENTRIES + 4 + 4 + 4 + 4 + 4);\r\n\r\n            var LAMEHEADERSIZE = (VBRHEADERSIZE + 9 + 1 + 1 + 8\r\n            + 1 + 1 + 3 + 1 + 1 + 2 + 4 + 2 + 2);\r\n\r\n            /**\r\n             * The size of the Xing header MPEG-1, bit rate in kbps.\r\n             */\r\n            var XING_BITRATE1 = 128;\r\n            /**\r\n             * The size of the Xing header MPEG-2, bit rate in kbps.\r\n             */\r\n            var XING_BITRATE2 = 64;\r\n            /**\r\n             * The size of the Xing header MPEG-2.5, bit rate in kbps.\r\n             */\r\n            var XING_BITRATE25 = 32;\r\n\r\n            /**\r\n             * ISO-8859-1 charset for byte to string operations.\r\n             */\r\n            var ISO_8859_1 = null; //Charset.forName(\"ISO-8859-1\");\r\n\r\n            /**\r\n             * VBR header magic string.\r\n             */\r\n            var VBRTag0 = \"Xing\";\r\n            /**\r\n             * VBR header magic string (VBR == VBRMode.vbr_off).\r\n             */\r\n            var VBRTag1 = \"Info\";\r\n\r\n            /**\r\n             * Lookup table for fast CRC-16 computation. Uses the polynomial\r\n             * x^16+x^15+x^2+1\r\n             */\r\n            var crc16Lookup = [0x0000, 0xC0C1, 0xC181, 0x0140,\r\n                0xC301, 0x03C0, 0x0280, 0xC241, 0xC601, 0x06C0, 0x0780, 0xC741,\r\n                0x0500, 0xC5C1, 0xC481, 0x0440, 0xCC01, 0x0CC0, 0x0D80, 0xCD41,\r\n                0x0F00, 0xCFC1, 0xCE81, 0x0E40, 0x0A00, 0xCAC1, 0xCB81, 0x0B40,\r\n                0xC901, 0x09C0, 0x0880, 0xC841, 0xD801, 0x18C0, 0x1980, 0xD941,\r\n                0x1B00, 0xDBC1, 0xDA81, 0x1A40, 0x1E00, 0xDEC1, 0xDF81, 0x1F40,\r\n                0xDD01, 0x1DC0, 0x1C80, 0xDC41, 0x1400, 0xD4C1, 0xD581, 0x1540,\r\n                0xD701, 0x17C0, 0x1680, 0xD641, 0xD201, 0x12C0, 0x1380, 0xD341,\r\n                0x1100, 0xD1C1, 0xD081, 0x1040, 0xF001, 0x30C0, 0x3180, 0xF141,\r\n                0x3300, 0xF3C1, 0xF281, 0x3240, 0x3600, 0xF6C1, 0xF781, 0x3740,\r\n                0xF501, 0x35C0, 0x3480, 0xF441, 0x3C00, 0xFCC1, 0xFD81, 0x3D40,\r\n                0xFF01, 0x3FC0, 0x3E80, 0xFE41, 0xFA01, 0x3AC0, 0x3B80, 0xFB41,\r\n                0x3900, 0xF9C1, 0xF881, 0x3840, 0x2800, 0xE8C1, 0xE981, 0x2940,\r\n                0xEB01, 0x2BC0, 0x2A80, 0xEA41, 0xEE01, 0x2EC0, 0x2F80, 0xEF41,\r\n                0x2D00, 0xEDC1, 0xEC81, 0x2C40, 0xE401, 0x24C0, 0x2580, 0xE541,\r\n                0x2700, 0xE7C1, 0xE681, 0x2640, 0x2200, 0xE2C1, 0xE381, 0x2340,\r\n                0xE101, 0x21C0, 0x2080, 0xE041, 0xA001, 0x60C0, 0x6180, 0xA141,\r\n                0x6300, 0xA3C1, 0xA281, 0x6240, 0x6600, 0xA6C1, 0xA781, 0x6740,\r\n                0xA501, 0x65C0, 0x6480, 0xA441, 0x6C00, 0xACC1, 0xAD81, 0x6D40,\r\n                0xAF01, 0x6FC0, 0x6E80, 0xAE41, 0xAA01, 0x6AC0, 0x6B80, 0xAB41,\r\n                0x6900, 0xA9C1, 0xA881, 0x6840, 0x7800, 0xB8C1, 0xB981, 0x7940,\r\n                0xBB01, 0x7BC0, 0x7A80, 0xBA41, 0xBE01, 0x7EC0, 0x7F80, 0xBF41,\r\n                0x7D00, 0xBDC1, 0xBC81, 0x7C40, 0xB401, 0x74C0, 0x7580, 0xB541,\r\n                0x7700, 0xB7C1, 0xB681, 0x7640, 0x7200, 0xB2C1, 0xB381, 0x7340,\r\n                0xB101, 0x71C0, 0x7080, 0xB041, 0x5000, 0x90C1, 0x9181, 0x5140,\r\n                0x9301, 0x53C0, 0x5280, 0x9241, 0x9601, 0x56C0, 0x5780, 0x9741,\r\n                0x5500, 0x95C1, 0x9481, 0x5440, 0x9C01, 0x5CC0, 0x5D80, 0x9D41,\r\n                0x5F00, 0x9FC1, 0x9E81, 0x5E40, 0x5A00, 0x9AC1, 0x9B81, 0x5B40,\r\n                0x9901, 0x59C0, 0x5880, 0x9841, 0x8801, 0x48C0, 0x4980, 0x8941,\r\n                0x4B00, 0x8BC1, 0x8A81, 0x4A40, 0x4E00, 0x8EC1, 0x8F81, 0x4F40,\r\n                0x8D01, 0x4DC0, 0x4C80, 0x8C41, 0x4400, 0x84C1, 0x8581, 0x4540,\r\n                0x8701, 0x47C0, 0x4680, 0x8641, 0x8201, 0x42C0, 0x4380, 0x8341,\r\n                0x4100, 0x81C1, 0x8081, 0x4040];\r\n\r\n            /***********************************************************************\r\n             * Robert Hegemann 2001-01-17\r\n             ***********************************************************************/\r\n\r\n            function addVbr(v, bitrate) {\r\n                v.nVbrNumFrames++;\r\n                v.sum += bitrate;\r\n                v.seen++;\r\n\r\n                if (v.seen < v.want) {\r\n                    return;\r\n                }\r\n\r\n                if (v.pos < v.size) {\r\n                    v.bag[v.pos] = v.sum;\r\n                    v.pos++;\r\n                    v.seen = 0;\r\n                }\r\n                if (v.pos == v.size) {\r\n                    for (var i = 1; i < v.size; i += 2) {\r\n                        v.bag[i / 2] = v.bag[i];\r\n                    }\r\n                    v.want *= 2;\r\n                    v.pos /= 2;\r\n                }\r\n            }\r\n\r\n            function xingSeekTable(v, t) {\r\n                if (v.pos <= 0)\r\n                    return;\r\n\r\n                for (var i = 1; i < NUMTOCENTRIES; ++i) {\r\n                    var j = i / NUMTOCENTRIES, act, sum;\r\n                    var indx = 0 | (Math.floor(j * v.pos));\r\n                    if (indx > v.pos - 1)\r\n                        indx = v.pos - 1;\r\n                    act = v.bag[indx];\r\n                    sum = v.sum;\r\n                    var seek_point = 0 | (256. * act / sum);\r\n                    if (seek_point > 255)\r\n                        seek_point = 255;\r\n                    t[i] = 0xff & seek_point;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Add VBR entry, used to fill the VBR TOC entries.\r\n             *\r\n             * @param gfp\r\n             *            global flags\r\n             */\r\n            this.addVbrFrame = function (gfp) {\r\n                var gfc = gfp.internal_flags;\r\n                var kbps = Tables.bitrate_table[gfp.version][gfc.bitrate_index];\r\n                addVbr(gfc.VBR_seek_table, kbps);\r\n            }\r\n\r\n            /**\r\n             * Read big endian integer (4-bytes) from header.\r\n             *\r\n             * @param buf\r\n             *            header containing the integer\r\n             * @param bufPos\r\n             *            offset into the header\r\n             * @return extracted integer\r\n             */\r\n            function extractInteger(buf, bufPos) {\r\n                var x = buf[bufPos + 0] & 0xff;\r\n                x <<= 8;\r\n                x |= buf[bufPos + 1] & 0xff;\r\n                x <<= 8;\r\n                x |= buf[bufPos + 2] & 0xff;\r\n                x <<= 8;\r\n                x |= buf[bufPos + 3] & 0xff;\r\n                return x;\r\n            }\r\n\r\n            /**\r\n             * Write big endian integer (4-bytes) in the header.\r\n             *\r\n             * @param buf\r\n             *            header to write the integer into\r\n             * @param bufPos\r\n             *            offset into the header\r\n             * @param value\r\n             *            integer value to write\r\n             */\r\n            function createInteger(buf, bufPos, value) {\r\n                buf[bufPos + 0] = 0xff & ((value >> 24) & 0xff);\r\n                buf[bufPos + 1] = 0xff & ((value >> 16) & 0xff);\r\n                buf[bufPos + 2] = 0xff & ((value >> 8) & 0xff);\r\n                buf[bufPos + 3] = 0xff & (value & 0xff);\r\n            }\r\n\r\n            /**\r\n             * Write big endian short (2-bytes) in the header.\r\n             *\r\n             * @param buf\r\n             *            header to write the integer into\r\n             * @param bufPos\r\n             *            offset into the header\r\n             * @param value\r\n             *            integer value to write\r\n             */\r\n            function createShort(buf, bufPos, value) {\r\n                buf[bufPos + 0] = 0xff & ((value >> 8) & 0xff);\r\n                buf[bufPos + 1] = 0xff & (value & 0xff);\r\n            }\r\n\r\n            /**\r\n             * Check for magic strings (Xing/Info).\r\n             *\r\n             * @param buf\r\n             *            header to check\r\n             * @param bufPos\r\n             *            header offset to check\r\n             * @return magic string found\r\n             */\r\n            function isVbrTag(buf, bufPos) {\r\n                return new String(buf, bufPos, VBRTag0.length(), ISO_8859_1)\r\n                        .equals(VBRTag0)\r\n                    || new String(buf, bufPos, VBRTag1.length(), ISO_8859_1)\r\n                        .equals(VBRTag1);\r\n            }\r\n\r\n            function shiftInBitsValue(x, n, v) {\r\n                return 0xff & ((x << n) | (v & ~(-1 << n)));\r\n            }\r\n\r\n            /**\r\n             * Construct the MP3 header using the settings of the global flags.\r\n             *\r\n             * <img src=\"1000px-Mp3filestructure.svg.png\">\r\n             *\r\n             * @param gfp\r\n             *            global flags\r\n             * @param buffer\r\n             *            header\r\n             */\r\n            function setLameTagFrameHeader(gfp, buffer) {\r\n                var gfc = gfp.internal_flags;\r\n\r\n                // MP3 Sync Word\r\n                buffer[0] = shiftInBitsValue(buffer[0], 8, 0xff);\r\n\r\n                buffer[1] = shiftInBitsValue(buffer[1], 3, 7);\r\n                buffer[1] = shiftInBitsValue(buffer[1], 1,\r\n                    (gfp.out_samplerate < 16000) ? 0 : 1);\r\n                // Version\r\n                buffer[1] = shiftInBitsValue(buffer[1], 1, gfp.version);\r\n                // 01 == Layer 3\r\n                buffer[1] = shiftInBitsValue(buffer[1], 2, 4 - 3);\r\n                // Error protection\r\n                buffer[1] = shiftInBitsValue(buffer[1], 1, (!gfp.error_protection) ? 1\r\n                    : 0);\r\n\r\n                // Bit rate\r\n                buffer[2] = shiftInBitsValue(buffer[2], 4, gfc.bitrate_index);\r\n                // Frequency\r\n                buffer[2] = shiftInBitsValue(buffer[2], 2, gfc.samplerate_index);\r\n                // Pad. Bit\r\n                buffer[2] = shiftInBitsValue(buffer[2], 1, 0);\r\n                // Priv. Bit\r\n                buffer[2] = shiftInBitsValue(buffer[2], 1, gfp.extension);\r\n\r\n                // Mode\r\n                buffer[3] = shiftInBitsValue(buffer[3], 2, gfp.mode.ordinal());\r\n                // Mode extension (Used with Joint Stereo)\r\n                buffer[3] = shiftInBitsValue(buffer[3], 2, gfc.mode_ext);\r\n                // Copy\r\n                buffer[3] = shiftInBitsValue(buffer[3], 1, gfp.copyright);\r\n                // Original\r\n                buffer[3] = shiftInBitsValue(buffer[3], 1, gfp.original);\r\n                // Emphasis\r\n                buffer[3] = shiftInBitsValue(buffer[3], 2, gfp.emphasis);\r\n\r\n                /* the default VBR header. 48 kbps layer III, no padding, no crc */\r\n                /* but sampling freq, mode and copyright/copy protection taken */\r\n                /* from first valid frame */\r\n                buffer[0] = 0xff;\r\n                var abyte = 0xff & (buffer[1] & 0xf1);\r\n                var bitrate;\r\n                if (1 == gfp.version) {\r\n                    bitrate = XING_BITRATE1;\r\n                } else {\r\n                    if (gfp.out_samplerate < 16000)\r\n                        bitrate = XING_BITRATE25;\r\n                    else\r\n                        bitrate = XING_BITRATE2;\r\n                }\r\n\r\n                if (gfp.VBR == VbrMode.vbr_off)\r\n                    bitrate = gfp.brate;\r\n\r\n                var bbyte;\r\n                if (gfp.free_format)\r\n                    bbyte = 0x00;\r\n                else\r\n                    bbyte = 0xff & (16 * lame.BitrateIndex(bitrate, gfp.version,\r\n                            gfp.out_samplerate));\r\n\r\n                /*\r\n                 * Use as much of the info from the real frames in the Xing header:\r\n                 * samplerate, channels, crc, etc...\r\n                 */\r\n                if (gfp.version == 1) {\r\n                    /* MPEG1 */\r\n                    buffer[1] = 0xff & (abyte | 0x0a);\r\n                    /* was 0x0b; */\r\n                    abyte = 0xff & (buffer[2] & 0x0d);\r\n                    /* AF keep also private bit */\r\n                    buffer[2] = 0xff & (bbyte | abyte);\r\n                    /* 64kbs MPEG1 frame */\r\n                } else {\r\n                    /* MPEG2 */\r\n                    buffer[1] = 0xff & (abyte | 0x02);\r\n                    /* was 0x03; */\r\n                    abyte = 0xff & (buffer[2] & 0x0d);\r\n                    /* AF keep also private bit */\r\n                    buffer[2] = 0xff & (bbyte | abyte);\r\n                    /* 64kbs MPEG2 frame */\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Get VBR tag information\r\n             *\r\n             * @param buf\r\n             *            header to analyze\r\n             * @param bufPos\r\n             *            offset into the header\r\n             * @return VBR tag data\r\n             */\r\n            this.getVbrTag = function (buf) {\r\n                var pTagData = new VBRTagData();\r\n                var bufPos = 0;\r\n\r\n                /* get Vbr header data */\r\n                pTagData.flags = 0;\r\n\r\n                /* get selected MPEG header data */\r\n                var hId = (buf[bufPos + 1] >> 3) & 1;\r\n                var hSrIndex = (buf[bufPos + 2] >> 2) & 3;\r\n                var hMode = (buf[bufPos + 3] >> 6) & 3;\r\n                var hBitrate = ((buf[bufPos + 2] >> 4) & 0xf);\r\n                hBitrate = Tables.bitrate_table[hId][hBitrate];\r\n\r\n                /* check for FFE syncword */\r\n                if ((buf[bufPos + 1] >> 4) == 0xE)\r\n                    pTagData.samprate = Tables.samplerate_table[2][hSrIndex];\r\n                else\r\n                    pTagData.samprate = Tables.samplerate_table[hId][hSrIndex];\r\n\r\n                /* determine offset of header */\r\n                if (hId != 0) {\r\n                    /* mpeg1 */\r\n                    if (hMode != 3)\r\n                        bufPos += (32 + 4);\r\n                    else\r\n                        bufPos += (17 + 4);\r\n                } else {\r\n                    /* mpeg2 */\r\n                    if (hMode != 3)\r\n                        bufPos += (17 + 4);\r\n                    else\r\n                        bufPos += (9 + 4);\r\n                }\r\n\r\n                if (!isVbrTag(buf, bufPos))\r\n                    return null;\r\n\r\n                bufPos += 4;\r\n\r\n                pTagData.hId = hId;\r\n\r\n                /* get flags */\r\n                var head_flags = pTagData.flags = extractInteger(buf, bufPos);\r\n                bufPos += 4;\r\n\r\n                if ((head_flags & FRAMES_FLAG) != 0) {\r\n                    pTagData.frames = extractInteger(buf, bufPos);\r\n                    bufPos += 4;\r\n                }\r\n\r\n                if ((head_flags & BYTES_FLAG) != 0) {\r\n                    pTagData.bytes = extractInteger(buf, bufPos);\r\n                    bufPos += 4;\r\n                }\r\n\r\n                if ((head_flags & TOC_FLAG) != 0) {\r\n                    if (pTagData.toc != null) {\r\n                        for (var i = 0; i < NUMTOCENTRIES; i++)\r\n                            pTagData.toc[i] = buf[bufPos + i];\r\n                    }\r\n                    bufPos += NUMTOCENTRIES;\r\n                }\r\n\r\n                pTagData.vbrScale = -1;\r\n\r\n                if ((head_flags & VBR_SCALE_FLAG) != 0) {\r\n                    pTagData.vbrScale = extractInteger(buf, bufPos);\r\n                    bufPos += 4;\r\n                }\r\n\r\n                pTagData.headersize = ((hId + 1) * 72000 * hBitrate)\r\n                    / pTagData.samprate;\r\n\r\n                bufPos += 21;\r\n                var encDelay = buf[bufPos + 0] << 4;\r\n                encDelay += buf[bufPos + 1] >> 4;\r\n                var encPadding = (buf[bufPos + 1] & 0x0F) << 8;\r\n                encPadding += buf[bufPos + 2] & 0xff;\r\n                /* check for reasonable values (this may be an old Xing header, */\r\n                /* not a INFO tag) */\r\n                if (encDelay < 0 || encDelay > 3000)\r\n                    encDelay = -1;\r\n                if (encPadding < 0 || encPadding > 3000)\r\n                    encPadding = -1;\r\n\r\n                pTagData.encDelay = encDelay;\r\n                pTagData.encPadding = encPadding;\r\n\r\n                /* success */\r\n                return pTagData;\r\n            }\r\n\r\n            /**\r\n             * Initializes the header\r\n             *\r\n             * @param gfp\r\n             *            global flags\r\n             */\r\n            this.InitVbrTag = function (gfp) {\r\n                var gfc = gfp.internal_flags;\r\n\r\n                /**\r\n                 * <PRE>\r\n                 * Xing VBR pretends to be a 48kbs layer III frame.  (at 44.1kHz).\r\n                 * (at 48kHz they use 56kbs since 48kbs frame not big enough for\r\n                 * table of contents)\r\n                 * let's always embed Xing header inside a 64kbs layer III frame.\r\n                 * this gives us enough room for a LAME version string too.\r\n                 * size determined by sampling frequency (MPEG1)\r\n                 * 32kHz:    216 bytes@48kbs    288bytes@ 64kbs\r\n                 * 44.1kHz:  156 bytes          208bytes@64kbs     (+1 if padding = 1)\r\n                 * 48kHz:    144 bytes          192\r\n                 *\r\n                 * MPEG 2 values are the same since the framesize and samplerate\r\n                 * are each reduced by a factor of 2.\r\n                 * </PRE>\r\n                 */\r\n                var kbps_header;\r\n                if (1 == gfp.version) {\r\n                    kbps_header = XING_BITRATE1;\r\n                } else {\r\n                    if (gfp.out_samplerate < 16000)\r\n                        kbps_header = XING_BITRATE25;\r\n                    else\r\n                        kbps_header = XING_BITRATE2;\r\n                }\r\n\r\n                if (gfp.VBR == VbrMode.vbr_off)\r\n                    kbps_header = gfp.brate;\r\n\r\n                // make sure LAME Header fits into Frame\r\n                var totalFrameSize = ((gfp.version + 1) * 72000 * kbps_header)\r\n                    / gfp.out_samplerate;\r\n                var headerSize = (gfc.sideinfo_len + LAMEHEADERSIZE);\r\n                gfc.VBR_seek_table.TotalFrameSize = totalFrameSize;\r\n                if (totalFrameSize < headerSize || totalFrameSize > MAXFRAMESIZE) {\r\n                    /* disable tag, it wont fit */\r\n                    gfp.bWriteVbrTag = false;\r\n                    return;\r\n                }\r\n\r\n                gfc.VBR_seek_table.nVbrNumFrames = 0;\r\n                gfc.VBR_seek_table.nBytesWritten = 0;\r\n                gfc.VBR_seek_table.sum = 0;\r\n\r\n                gfc.VBR_seek_table.seen = 0;\r\n                gfc.VBR_seek_table.want = 1;\r\n                gfc.VBR_seek_table.pos = 0;\r\n\r\n                if (gfc.VBR_seek_table.bag == null) {\r\n                    gfc.VBR_seek_table.bag = new int[400];\r\n                    gfc.VBR_seek_table.size = 400;\r\n                }\r\n\r\n                // write dummy VBR tag of all 0's into bitstream\r\n                var buffer = new_byte(MAXFRAMESIZE);\r\n\r\n                setLameTagFrameHeader(gfp, buffer);\r\n                var n = gfc.VBR_seek_table.TotalFrameSize;\r\n                for (var i = 0; i < n; ++i) {\r\n                    bs.add_dummy_byte(gfp, buffer[i] & 0xff, 1);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Fast CRC-16 computation (uses table crc16Lookup).\r\n             *\r\n             * @param value\r\n             * @param crc\r\n             * @return\r\n             */\r\n            function crcUpdateLookup(value, crc) {\r\n                var tmp = crc ^ value;\r\n                crc = (crc >> 8) ^ crc16Lookup[tmp & 0xff];\r\n                return crc;\r\n            }\r\n\r\n            this.updateMusicCRC = function (crc, buffer, bufferPos, size) {\r\n                for (var i = 0; i < size; ++i)\r\n                    crc[0] = crcUpdateLookup(buffer[bufferPos + i], crc[0]);\r\n            }\r\n\r\n            /**\r\n             * Write LAME info: mini version + info on various switches used (Jonathan\r\n             * Dee 2001/08/31).\r\n             *\r\n             * @param gfp\r\n             *            global flags\r\n             * @param musicLength\r\n             *            music length\r\n             * @param streamBuffer\r\n             *            pointer to output buffer\r\n             * @param streamBufferPos\r\n             *            offset into the output buffer\r\n             * @param crc\r\n             *            computation of CRC-16 of Lame Tag so far (starting at frame\r\n             *            sync)\r\n             * @return number of bytes written to the stream\r\n             */\r\n            function putLameVBR(gfp, musicLength, streamBuffer, streamBufferPos, crc) {\r\n                var gfc = gfp.internal_flags;\r\n                var bytesWritten = 0;\r\n\r\n                /* encoder delay */\r\n                var encDelay = gfp.encoder_delay;\r\n                /* encoder padding */\r\n                var encPadding = gfp.encoder_padding;\r\n\r\n                /* recall: gfp.VBR_q is for example set by the switch -V */\r\n                /* gfp.quality by -q, -h, -f, etc */\r\n                var quality = (100 - 10 * gfp.VBR_q - gfp.quality);\r\n\r\n                var version = v.getLameVeryShortVersion();\r\n                var vbr;\r\n                var revision = 0x00;\r\n                var revMethod;\r\n                // numbering different in vbr_mode vs. Lame tag\r\n                var vbrTypeTranslator = [1, 5, 3, 2, 4, 0, 3];\r\n                var lowpass = 0 | (((gfp.lowpassfreq / 100.0) + .5) > 255 ? 255\r\n                        : (gfp.lowpassfreq / 100.0) + .5);\r\n                var peakSignalAmplitude = 0;\r\n                var radioReplayGain = 0;\r\n                var audiophileReplayGain = 0;\r\n                var noiseShaping = gfp.internal_flags.noise_shaping;\r\n                var stereoMode = 0;\r\n                var nonOptimal = 0;\r\n                var sourceFreq = 0;\r\n                var misc = 0;\r\n                var musicCRC = 0;\r\n\r\n                // psy model type: Gpsycho or NsPsytune\r\n                var expNPsyTune = (gfp.exp_nspsytune & 1) != 0;\r\n                var safeJoint = (gfp.exp_nspsytune & 2) != 0;\r\n                var noGapMore = false;\r\n                var noGapPrevious = false;\r\n                var noGapCount = gfp.internal_flags.nogap_total;\r\n                var noGapCurr = gfp.internal_flags.nogap_current;\r\n\r\n                // 4 bits\r\n                var athType = gfp.ATHtype;\r\n                var flags = 0;\r\n\r\n                // vbr modes\r\n                var abrBitrate;\r\n                switch (gfp.VBR) {\r\n                    case vbr_abr:\r\n                        abrBitrate = gfp.VBR_mean_bitrate_kbps;\r\n                        break;\r\n                    case vbr_off:\r\n                        abrBitrate = gfp.brate;\r\n                        break;\r\n                    default:\r\n                        abrBitrate = gfp.VBR_min_bitrate_kbps;\r\n                }\r\n\r\n                // revision and vbr method\r\n                if (gfp.VBR.ordinal() < vbrTypeTranslator.length)\r\n                    vbr = vbrTypeTranslator[gfp.VBR.ordinal()];\r\n                else\r\n                    vbr = 0x00; // unknown\r\n\r\n                revMethod = 0x10 * revision + vbr;\r\n\r\n                // ReplayGain\r\n                if (gfc.findReplayGain) {\r\n                    if (gfc.RadioGain > 0x1FE)\r\n                        gfc.RadioGain = 0x1FE;\r\n                    if (gfc.RadioGain < -0x1FE)\r\n                        gfc.RadioGain = -0x1FE;\r\n\r\n                    // set name code\r\n                    radioReplayGain = 0x2000;\r\n                    // set originator code to `determined automatically'\r\n                    radioReplayGain |= 0xC00;\r\n\r\n                    if (gfc.RadioGain >= 0) {\r\n                        // set gain adjustment\r\n                        radioReplayGain |= gfc.RadioGain;\r\n                    } else {\r\n                        // set the sign bit\r\n                        radioReplayGain |= 0x200;\r\n                        // set gain adjustment\r\n                        radioReplayGain |= -gfc.RadioGain;\r\n                    }\r\n                }\r\n\r\n                // peak sample\r\n                if (gfc.findPeakSample)\r\n                    peakSignalAmplitude = Math\r\n                        .abs(0 | ((( gfc.PeakSample) / 32767.0) * Math.pow(2, 23) + .5));\r\n\r\n                // nogap\r\n                if (noGapCount != -1) {\r\n                    if (noGapCurr > 0)\r\n                        noGapPrevious = true;\r\n\r\n                    if (noGapCurr < noGapCount - 1)\r\n                        noGapMore = true;\r\n                }\r\n\r\n                // flags\r\n                flags = athType + ((expNPsyTune ? 1 : 0) << 4)\r\n                    + ((safeJoint ? 1 : 0) << 5) + ((noGapMore ? 1 : 0) << 6)\r\n                    + ((noGapPrevious ? 1 : 0) << 7);\r\n\r\n                if (quality < 0)\r\n                    quality = 0;\r\n\r\n                // stereo mode field (Intensity stereo is not implemented)\r\n                switch (gfp.mode) {\r\n                    case MONO:\r\n                        stereoMode = 0;\r\n                        break;\r\n                    case STEREO:\r\n                        stereoMode = 1;\r\n                        break;\r\n                    case DUAL_CHANNEL:\r\n                        stereoMode = 2;\r\n                        break;\r\n                    case JOINT_STEREO:\r\n                        if (gfp.force_ms)\r\n                            stereoMode = 4;\r\n                        else\r\n                            stereoMode = 3;\r\n                        break;\r\n                    case NOT_SET:\r\n                    //$FALL-THROUGH$\r\n                    default:\r\n                        stereoMode = 7;\r\n                        break;\r\n                }\r\n\r\n                if (gfp.in_samplerate <= 32000)\r\n                    sourceFreq = 0x00;\r\n                else if (gfp.in_samplerate == 48000)\r\n                    sourceFreq = 0x02;\r\n                else if (gfp.in_samplerate > 48000)\r\n                    sourceFreq = 0x03;\r\n                else {\r\n                    // default is 44100Hz\r\n                    sourceFreq = 0x01;\r\n                }\r\n\r\n                // Check if the user overrided the default LAME behavior with some\r\n                // nasty options\r\n                if (gfp.short_blocks == ShortBlock.short_block_forced\r\n                    || gfp.short_blocks == ShortBlock.short_block_dispensed\r\n                    || ((gfp.lowpassfreq == -1) && (gfp.highpassfreq == -1)) || /* \"-k\" */\r\n                    (gfp.scale_left < gfp.scale_right)\r\n                    || (gfp.scale_left > gfp.scale_right)\r\n                    || (gfp.disable_reservoir && gfp.brate < 320) || gfp.noATH\r\n                    || gfp.ATHonly || (athType == 0) || gfp.in_samplerate <= 32000)\r\n                    nonOptimal = 1;\r\n\r\n                misc = noiseShaping + (stereoMode << 2) + (nonOptimal << 5)\r\n                    + (sourceFreq << 6);\r\n\r\n                musicCRC = gfc.nMusicCRC;\r\n\r\n                // Write all this information into the stream\r\n\r\n                createInteger(streamBuffer, streamBufferPos + bytesWritten, quality);\r\n                bytesWritten += 4;\r\n\r\n                for (var j = 0; j < 9; j++) {\r\n                    streamBuffer[streamBufferPos + bytesWritten + j] = 0xff & version .charAt(j);\r\n                }\r\n                bytesWritten += 9;\r\n\r\n                streamBuffer[streamBufferPos + bytesWritten] = 0xff & revMethod;\r\n                bytesWritten++;\r\n\r\n                streamBuffer[streamBufferPos + bytesWritten] = 0xff & lowpass;\r\n                bytesWritten++;\r\n\r\n                createInteger(streamBuffer, streamBufferPos + bytesWritten,\r\n                    peakSignalAmplitude);\r\n                bytesWritten += 4;\r\n\r\n                createShort(streamBuffer, streamBufferPos + bytesWritten,\r\n                    radioReplayGain);\r\n                bytesWritten += 2;\r\n\r\n                createShort(streamBuffer, streamBufferPos + bytesWritten,\r\n                    audiophileReplayGain);\r\n                bytesWritten += 2;\r\n\r\n                streamBuffer[streamBufferPos + bytesWritten] = 0xff & flags;\r\n                bytesWritten++;\r\n\r\n                if (abrBitrate >= 255)\r\n                    streamBuffer[streamBufferPos + bytesWritten] = 0xFF;\r\n                else\r\n                    streamBuffer[streamBufferPos + bytesWritten] = 0xff & abrBitrate;\r\n                bytesWritten++;\r\n\r\n                streamBuffer[streamBufferPos + bytesWritten] = 0xff & (encDelay >> 4);\r\n                streamBuffer[streamBufferPos + bytesWritten + 1] = 0xff & ((encDelay << 4) + (encPadding >> 8));\r\n                streamBuffer[streamBufferPos + bytesWritten + 2] = 0xff & encPadding;\r\n\r\n                bytesWritten += 3;\r\n\r\n                streamBuffer[streamBufferPos + bytesWritten] = 0xff & misc;\r\n                bytesWritten++;\r\n\r\n                // unused in rev0\r\n                streamBuffer[streamBufferPos + bytesWritten++] = 0;\r\n\r\n                createShort(streamBuffer, streamBufferPos + bytesWritten, gfp.preset);\r\n                bytesWritten += 2;\r\n\r\n                createInteger(streamBuffer, streamBufferPos + bytesWritten, musicLength);\r\n                bytesWritten += 4;\r\n\r\n                createShort(streamBuffer, streamBufferPos + bytesWritten, musicCRC);\r\n                bytesWritten += 2;\r\n\r\n                // Calculate tag CRC.... must be done here, since it includes previous\r\n                // information\r\n\r\n                for (var i = 0; i < bytesWritten; i++)\r\n                    crc = crcUpdateLookup(streamBuffer[streamBufferPos + i], crc);\r\n\r\n                createShort(streamBuffer, streamBufferPos + bytesWritten, crc);\r\n                bytesWritten += 2;\r\n\r\n                return bytesWritten;\r\n            }\r\n\r\n            function skipId3v2(fpStream) {\r\n                // seek to the beginning of the stream\r\n                fpStream.seek(0);\r\n                // read 10 bytes in case there's an ID3 version 2 header here\r\n                var id3v2Header = new_byte(10);\r\n                fpStream.readFully(id3v2Header);\r\n                /* does the stream begin with the ID3 version 2 file identifier? */\r\n                var id3v2TagSize;\r\n                if (!new String(id3v2Header, \"ISO-8859-1\").startsWith(\"ID3\")) {\r\n                    /*\r\n                     * the tag size (minus the 10-byte header) is encoded into four\r\n                     * bytes where the most significant bit is clear in each byte\r\n                     */\r\n                    id3v2TagSize = (((id3v2Header[6] & 0x7f) << 21)\r\n                        | ((id3v2Header[7] & 0x7f) << 14)\r\n                        | ((id3v2Header[8] & 0x7f) << 7) | (id3v2Header[9] & 0x7f))\r\n                        + id3v2Header.length;\r\n                } else {\r\n                    /* no ID3 version 2 tag in this stream */\r\n                    id3v2TagSize = 0;\r\n                }\r\n                return id3v2TagSize;\r\n            }\r\n\r\n            this.getLameTagFrame = function (gfp, buffer) {\r\n                var gfc = gfp.internal_flags;\r\n\r\n                if (!gfp.bWriteVbrTag) {\r\n                    return 0;\r\n                }\r\n                if (gfc.Class_ID != Lame.LAME_ID) {\r\n                    return 0;\r\n                }\r\n                if (gfc.VBR_seek_table.pos <= 0) {\r\n                    return 0;\r\n                }\r\n                if (buffer.length < gfc.VBR_seek_table.TotalFrameSize) {\r\n                    return gfc.VBR_seek_table.TotalFrameSize;\r\n                }\r\n\r\n                Arrays.fill(buffer, 0, gfc.VBR_seek_table.TotalFrameSize, 0);\r\n\r\n                // 4 bytes frame header\r\n                setLameTagFrameHeader(gfp, buffer);\r\n\r\n                // Create TOC entries\r\n                var toc = new_byte(NUMTOCENTRIES);\r\n\r\n                if (gfp.free_format) {\r\n                    for (var i = 1; i < NUMTOCENTRIES; ++i)\r\n                        toc[i] = 0xff & (255 * i / 100);\r\n                } else {\r\n                    xingSeekTable(gfc.VBR_seek_table, toc);\r\n                }\r\n\r\n                // Start writing the tag after the zero frame\r\n                var streamIndex = gfc.sideinfo_len;\r\n                /**\r\n                 * Note: Xing header specifies that Xing data goes in the ancillary data\r\n                 * with NO ERROR PROTECTION. If error protecton in enabled, the Xing\r\n                 * data still starts at the same offset, and now it is in sideinfo data\r\n                 * block, and thus will not decode correctly by non-Xing tag aware\r\n                 * players\r\n                 */\r\n                if (gfp.error_protection)\r\n                    streamIndex -= 2;\r\n\r\n                // Put Vbr tag\r\n                if (gfp.VBR == VbrMode.vbr_off) {\r\n                    buffer[streamIndex++] = 0xff & VBRTag1.charAt(0);\r\n                    buffer[streamIndex++] = 0xff & VBRTag1.charAt(1);\r\n                    buffer[streamIndex++] = 0xff & VBRTag1.charAt(2);\r\n                    buffer[streamIndex++] = 0xff & VBRTag1.charAt(3);\r\n\r\n                } else {\r\n                    buffer[streamIndex++] = 0xff & VBRTag0.charAt(0);\r\n                    buffer[streamIndex++] = 0xff & VBRTag0.charAt(1);\r\n                    buffer[streamIndex++] = 0xff & VBRTag0.charAt(2);\r\n                    buffer[streamIndex++] = 0xff & VBRTag0.charAt(3);\r\n                }\r\n\r\n                // Put header flags\r\n                createInteger(buffer, streamIndex, FRAMES_FLAG + BYTES_FLAG + TOC_FLAG\r\n                    + VBR_SCALE_FLAG);\r\n                streamIndex += 4;\r\n\r\n                // Put Total Number of frames\r\n                createInteger(buffer, streamIndex, gfc.VBR_seek_table.nVbrNumFrames);\r\n                streamIndex += 4;\r\n\r\n                // Put total audio stream size, including Xing/LAME Header\r\n                var streamSize = (gfc.VBR_seek_table.nBytesWritten + gfc.VBR_seek_table.TotalFrameSize);\r\n                createInteger(buffer, streamIndex, 0 | streamSize);\r\n                streamIndex += 4;\r\n\r\n                /* Put TOC */\r\n                System.arraycopy(toc, 0, buffer, streamIndex, toc.length);\r\n                streamIndex += toc.length;\r\n\r\n                if (gfp.error_protection) {\r\n                    // (jo) error_protection: add crc16 information to header\r\n                    bs.CRC_writeheader(gfc, buffer);\r\n                }\r\n\r\n                // work out CRC so far: initially crc = 0\r\n                var crc = 0x00;\r\n                for (var i = 0; i < streamIndex; i++)\r\n                    crc = crcUpdateLookup(buffer[i], crc);\r\n                // Put LAME VBR info\r\n                streamIndex += putLameVBR(gfp, streamSize, buffer, streamIndex, crc);\r\n\r\n                return gfc.VBR_seek_table.TotalFrameSize;\r\n            }\r\n\r\n            /**\r\n             * Write final VBR tag to the file.\r\n             *\r\n             * @param gfp\r\n             *            global flags\r\n             * @param stream\r\n             *            stream to add the VBR tag to\r\n             * @return 0 (OK), -1 else\r\n             * @throws IOException\r\n             *             I/O error\r\n             */\r\n            this.putVbrTag = function (gfp, stream) {\r\n                var gfc = gfp.internal_flags;\r\n\r\n                if (gfc.VBR_seek_table.pos <= 0)\r\n                    return -1;\r\n\r\n                // Seek to end of file\r\n                stream.seek(stream.length());\r\n\r\n                // Get file size, abort if file has zero length.\r\n                if (stream.length() == 0)\r\n                    return -1;\r\n\r\n                // The VBR tag may NOT be located at the beginning of the stream. If an\r\n                // ID3 version 2 tag was added, then it must be skipped to write the VBR\r\n                // tag data.\r\n                var id3v2TagSize = skipId3v2(stream);\r\n\r\n                // Seek to the beginning of the stream\r\n                stream.seek(id3v2TagSize);\r\n\r\n                var buffer = new_byte(MAXFRAMESIZE);\r\n                var bytes = getLameTagFrame(gfp, buffer);\r\n                if (bytes > buffer.length) {\r\n                    return -1;\r\n                }\r\n\r\n                if (bytes < 1) {\r\n                    return 0;\r\n                }\r\n\r\n                // Put it all to disk again\r\n                stream.write(buffer, 0, bytes);\r\n                // success\r\n                return 0;\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        BitStream.EQ = function (a, b) {\r\n            return (Math.abs(a) > Math.abs(b)) ? (Math.abs((a) - (b)) <= (Math\r\n                .abs(a) * 1e-6))\r\n                : (Math.abs((a) - (b)) <= (Math.abs(b) * 1e-6));\r\n        };\r\n\r\n        BitStream.NEQ = function (a, b) {\r\n            return !BitStream.EQ(a, b);\r\n        };\r\n\r\n        function BitStream() {\r\n            var self = this;\r\n            var CRC16_POLYNOMIAL = 0x8005;\r\n\r\n            /*\r\n             * we work with ints, so when doing bit manipulation, we limit ourselves to\r\n             * MAX_LENGTH-2 just to be on the safe side\r\n             */\r\n            var MAX_LENGTH = 32;\r\n\r\n            //GainAnalysis ga;\r\n            //MPGLib mpg;\r\n            //Version ver;\r\n            //VBRTag vbr;\r\n            var ga = null;\r\n            var mpg = null;\r\n            var ver = null;\r\n            var vbr = null;\r\n\r\n            //public final void setModules(GainAnalysis ga, MPGLib mpg, Version ver,\r\n            //\tVBRTag vbr) {\r\n\r\n            this.setModules = function (_ga, _mpg, _ver, _vbr) {\r\n                ga = _ga;\r\n                mpg = _mpg;\r\n                ver = _ver;\r\n                vbr = _vbr;\r\n            };\r\n\r\n            /**\r\n             * Bit stream buffer.\r\n             */\r\n                //private byte[] buf;\r\n            var buf = null;\r\n            /**\r\n             * Bit counter of bit stream.\r\n             */\r\n            var totbit = 0;\r\n            /**\r\n             * Pointer to top byte in buffer.\r\n             */\r\n            var bufByteIdx = 0;\r\n            /**\r\n             * Pointer to top bit of top byte in buffer.\r\n             */\r\n            var bufBitIdx = 0;\r\n\r\n            /**\r\n             * compute bitsperframe and mean_bits for a layer III frame\r\n             */\r\n            this.getframebits = function (gfp) {\r\n                var gfc = gfp.internal_flags;\r\n                var bit_rate;\r\n\r\n                /* get bitrate in kbps [?] */\r\n                if (gfc.bitrate_index != 0)\r\n                    bit_rate = Tables.bitrate_table[gfp.version][gfc.bitrate_index];\r\n                else\r\n                    bit_rate = gfp.brate;\r\n\r\n                /* main encoding routine toggles padding on and off */\r\n                /* one Layer3 Slot consists of 8 bits */\r\n                var bytes = 0 | (gfp.version + 1) * 72000 * bit_rate / gfp.out_samplerate + gfc.padding;\r\n                return 8 * bytes;\r\n            };\r\n\r\n            function putheader_bits(gfc) {\r\n                System.arraycopy(gfc.header[gfc.w_ptr].buf, 0, buf, bufByteIdx, gfc.sideinfo_len);\r\n                bufByteIdx += gfc.sideinfo_len;\r\n                totbit += gfc.sideinfo_len * 8;\r\n                gfc.w_ptr = (gfc.w_ptr + 1) & (LameInternalFlags.MAX_HEADER_BUF - 1);\r\n            }\r\n\r\n            /**\r\n             * write j bits into the bit stream\r\n             */\r\n            function putbits2(gfc, val, j) {\r\n\r\n                while (j > 0) {\r\n                    var k;\r\n                    if (bufBitIdx == 0) {\r\n                        bufBitIdx = 8;\r\n                        bufByteIdx++;\r\n                        if (gfc.header[gfc.w_ptr].write_timing == totbit) {\r\n                            putheader_bits(gfc);\r\n                        }\r\n                        buf[bufByteIdx] = 0;\r\n                    }\r\n\r\n                    k = Math.min(j, bufBitIdx);\r\n                    j -= k;\r\n\r\n                    bufBitIdx -= k;\r\n\r\n                    /* 32 too large on 32 bit machines */\r\n\r\n                    buf[bufByteIdx] |= ((val >> j) << bufBitIdx);\r\n                    totbit += k;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * write j bits into the bit stream, ignoring frame headers\r\n             */\r\n            function putbits_noheaders(gfc, val, j) {\r\n\r\n                while (j > 0) {\r\n                    var k;\r\n                    if (bufBitIdx == 0) {\r\n                        bufBitIdx = 8;\r\n                        bufByteIdx++;\r\n                        buf[bufByteIdx] = 0;\r\n                    }\r\n\r\n                    k = Math.min(j, bufBitIdx);\r\n                    j -= k;\r\n\r\n                    bufBitIdx -= k;\r\n\r\n                    /* 32 too large on 32 bit machines */\r\n\r\n                    buf[bufByteIdx] |= ((val >> j) << bufBitIdx);\r\n                    totbit += k;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Some combinations of bitrate, Fs, and stereo make it impossible to stuff\r\n             * out a frame using just main_data, due to the limited number of bits to\r\n             * indicate main_data_length. In these situations, we put stuffing bits into\r\n             * the ancillary data...\r\n             */\r\n            function drain_into_ancillary(gfp, remainingBits) {\r\n                var gfc = gfp.internal_flags;\r\n                var i;\r\n\r\n                if (remainingBits >= 8) {\r\n                    putbits2(gfc, 0x4c, 8);\r\n                    remainingBits -= 8;\r\n                }\r\n                if (remainingBits >= 8) {\r\n                    putbits2(gfc, 0x41, 8);\r\n                    remainingBits -= 8;\r\n                }\r\n                if (remainingBits >= 8) {\r\n                    putbits2(gfc, 0x4d, 8);\r\n                    remainingBits -= 8;\r\n                }\r\n                if (remainingBits >= 8) {\r\n                    putbits2(gfc, 0x45, 8);\r\n                    remainingBits -= 8;\r\n                }\r\n\r\n                if (remainingBits >= 32) {\r\n                    var version = ver.getLameShortVersion();\r\n                    if (remainingBits >= 32)\r\n                        for (i = 0; i < version.length && remainingBits >= 8; ++i) {\r\n                            remainingBits -= 8;\r\n                            putbits2(gfc, version.charAt(i), 8);\r\n                        }\r\n                }\r\n\r\n                for (; remainingBits >= 1; remainingBits -= 1) {\r\n                    putbits2(gfc, gfc.ancillary_flag, 1);\r\n                    gfc.ancillary_flag ^= (!gfp.disable_reservoir ? 1 : 0);\r\n                }\r\n\r\n\r\n            }\r\n\r\n            /**\r\n             * write N bits into the header\r\n             */\r\n            function writeheader(gfc, val, j) {\r\n                var ptr = gfc.header[gfc.h_ptr].ptr;\r\n\r\n                while (j > 0) {\r\n                    var k = Math.min(j, 8 - (ptr & 7));\r\n                    j -= k;\r\n                    /* >> 32 too large for 32 bit machines */\r\n\r\n                    gfc.header[gfc.h_ptr].buf[ptr >> 3] |= ((val >> j)) << (8 - (ptr & 7) - k);\r\n                    ptr += k;\r\n                }\r\n                gfc.header[gfc.h_ptr].ptr = ptr;\r\n            }\r\n\r\n            function CRC_update(value, crc) {\r\n                value <<= 8;\r\n                for (var i = 0; i < 8; i++) {\r\n                    value <<= 1;\r\n                    crc <<= 1;\r\n\r\n                    if ((((crc ^ value) & 0x10000) != 0))\r\n                        crc ^= CRC16_POLYNOMIAL;\r\n                }\r\n                return crc;\r\n            }\r\n\r\n            this.CRC_writeheader = function (gfc, header) {\r\n                var crc = 0xffff;\r\n                /* (jo) init crc16 for error_protection */\r\n\r\n                crc = CRC_update(header[2] & 0xff, crc);\r\n                crc = CRC_update(header[3] & 0xff, crc);\r\n                for (var i = 6; i < gfc.sideinfo_len; i++) {\r\n                    crc = CRC_update(header[i] & 0xff, crc);\r\n                }\r\n\r\n                header[4] = (byte)(crc >> 8);\r\n                header[5] = (byte)(crc & 255);\r\n            };\r\n\r\n            function encodeSideInfo2(gfp, bitsPerFrame) {\r\n                var gfc = gfp.internal_flags;\r\n                var l3_side;\r\n                var gr, ch;\r\n\r\n                l3_side = gfc.l3_side;\r\n                gfc.header[gfc.h_ptr].ptr = 0;\r\n                Arrays.fill(gfc.header[gfc.h_ptr].buf, 0, gfc.sideinfo_len, 0);\r\n                if (gfp.out_samplerate < 16000)\r\n                    writeheader(gfc, 0xffe, 12);\r\n                else\r\n                    writeheader(gfc, 0xfff, 12);\r\n                writeheader(gfc, (gfp.version), 1);\r\n                writeheader(gfc, 4 - 3, 2);\r\n                writeheader(gfc, (!gfp.error_protection ? 1 : 0), 1);\r\n                writeheader(gfc, (gfc.bitrate_index), 4);\r\n                writeheader(gfc, (gfc.samplerate_index), 2);\r\n                writeheader(gfc, (gfc.padding), 1);\r\n                writeheader(gfc, (gfp.extension), 1);\r\n                writeheader(gfc, (gfp.mode.ordinal()), 2);\r\n                writeheader(gfc, (gfc.mode_ext), 2);\r\n                writeheader(gfc, (gfp.copyright), 1);\r\n                writeheader(gfc, (gfp.original), 1);\r\n                writeheader(gfc, (gfp.emphasis), 2);\r\n                if (gfp.error_protection) {\r\n                    writeheader(gfc, 0, 16);\r\n                    /* dummy */\r\n                }\r\n\r\n                if (gfp.version == 1) {\r\n                    /* MPEG1 */\r\n                    writeheader(gfc, (l3_side.main_data_begin), 9);\r\n\r\n                    if (gfc.channels_out == 2)\r\n                        writeheader(gfc, l3_side.private_bits, 3);\r\n                    else\r\n                        writeheader(gfc, l3_side.private_bits, 5);\r\n\r\n                    for (ch = 0; ch < gfc.channels_out; ch++) {\r\n                        var band;\r\n                        for (band = 0; band < 4; band++) {\r\n                            writeheader(gfc, l3_side.scfsi[ch][band], 1);\r\n                        }\r\n                    }\r\n\r\n                    for (gr = 0; gr < 2; gr++) {\r\n                        for (ch = 0; ch < gfc.channels_out; ch++) {\r\n                            var gi = l3_side.tt[gr][ch];\r\n                            writeheader(gfc, gi.part2_3_length + gi.part2_length, 12);\r\n                            writeheader(gfc, gi.big_values / 2, 9);\r\n                            writeheader(gfc, gi.global_gain, 8);\r\n                            writeheader(gfc, gi.scalefac_compress, 4);\r\n\r\n                            if (gi.block_type != Encoder.NORM_TYPE) {\r\n                                writeheader(gfc, 1, 1);\r\n                                /* window_switching_flag */\r\n                                writeheader(gfc, gi.block_type, 2);\r\n                                writeheader(gfc, gi.mixed_block_flag, 1);\r\n\r\n                                if (gi.table_select[0] == 14)\r\n                                    gi.table_select[0] = 16;\r\n                                writeheader(gfc, gi.table_select[0], 5);\r\n                                if (gi.table_select[1] == 14)\r\n                                    gi.table_select[1] = 16;\r\n                                writeheader(gfc, gi.table_select[1], 5);\r\n\r\n                                writeheader(gfc, gi.subblock_gain[0], 3);\r\n                                writeheader(gfc, gi.subblock_gain[1], 3);\r\n                                writeheader(gfc, gi.subblock_gain[2], 3);\r\n                            } else {\r\n                                writeheader(gfc, 0, 1);\r\n                                /* window_switching_flag */\r\n                                if (gi.table_select[0] == 14)\r\n                                    gi.table_select[0] = 16;\r\n                                writeheader(gfc, gi.table_select[0], 5);\r\n                                if (gi.table_select[1] == 14)\r\n                                    gi.table_select[1] = 16;\r\n                                writeheader(gfc, gi.table_select[1], 5);\r\n                                if (gi.table_select[2] == 14)\r\n                                    gi.table_select[2] = 16;\r\n                                writeheader(gfc, gi.table_select[2], 5);\r\n\r\n                                writeheader(gfc, gi.region0_count, 4);\r\n                                writeheader(gfc, gi.region1_count, 3);\r\n                            }\r\n                            writeheader(gfc, gi.preflag, 1);\r\n                            writeheader(gfc, gi.scalefac_scale, 1);\r\n                            writeheader(gfc, gi.count1table_select, 1);\r\n                        }\r\n                    }\r\n                } else {\r\n                    /* MPEG2 */\r\n                    writeheader(gfc, (l3_side.main_data_begin), 8);\r\n                    writeheader(gfc, l3_side.private_bits, gfc.channels_out);\r\n\r\n                    gr = 0;\r\n                    for (ch = 0; ch < gfc.channels_out; ch++) {\r\n                        var gi = l3_side.tt[gr][ch];\r\n                        writeheader(gfc, gi.part2_3_length + gi.part2_length, 12);\r\n                        writeheader(gfc, gi.big_values / 2, 9);\r\n                        writeheader(gfc, gi.global_gain, 8);\r\n                        writeheader(gfc, gi.scalefac_compress, 9);\r\n\r\n                        if (gi.block_type != Encoder.NORM_TYPE) {\r\n                            writeheader(gfc, 1, 1);\r\n                            /* window_switching_flag */\r\n                            writeheader(gfc, gi.block_type, 2);\r\n                            writeheader(gfc, gi.mixed_block_flag, 1);\r\n\r\n                            if (gi.table_select[0] == 14)\r\n                                gi.table_select[0] = 16;\r\n                            writeheader(gfc, gi.table_select[0], 5);\r\n                            if (gi.table_select[1] == 14)\r\n                                gi.table_select[1] = 16;\r\n                            writeheader(gfc, gi.table_select[1], 5);\r\n\r\n                            writeheader(gfc, gi.subblock_gain[0], 3);\r\n                            writeheader(gfc, gi.subblock_gain[1], 3);\r\n                            writeheader(gfc, gi.subblock_gain[2], 3);\r\n                        } else {\r\n                            writeheader(gfc, 0, 1);\r\n                            /* window_switching_flag */\r\n                            if (gi.table_select[0] == 14)\r\n                                gi.table_select[0] = 16;\r\n                            writeheader(gfc, gi.table_select[0], 5);\r\n                            if (gi.table_select[1] == 14)\r\n                                gi.table_select[1] = 16;\r\n                            writeheader(gfc, gi.table_select[1], 5);\r\n                            if (gi.table_select[2] == 14)\r\n                                gi.table_select[2] = 16;\r\n                            writeheader(gfc, gi.table_select[2], 5);\r\n\r\n                            writeheader(gfc, gi.region0_count, 4);\r\n                            writeheader(gfc, gi.region1_count, 3);\r\n                        }\r\n\r\n                        writeheader(gfc, gi.scalefac_scale, 1);\r\n                        writeheader(gfc, gi.count1table_select, 1);\r\n                    }\r\n                }\r\n\r\n                if (gfp.error_protection) {\r\n                    /* (jo) error_protection: add crc16 information to header */\r\n                    CRC_writeheader(gfc, gfc.header[gfc.h_ptr].buf);\r\n                }\r\n\r\n                {\r\n                    var old = gfc.h_ptr;\r\n\r\n                    gfc.h_ptr = (old + 1) & (LameInternalFlags.MAX_HEADER_BUF - 1);\r\n                    gfc.header[gfc.h_ptr].write_timing = gfc.header[old].write_timing\r\n                        + bitsPerFrame;\r\n\r\n                    if (gfc.h_ptr == gfc.w_ptr) {\r\n                        /* yikes! we are out of header buffer space */\r\n                        System.err\r\n                            .println(\"Error: MAX_HEADER_BUF too small in bitstream.c \\n\");\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            function huffman_coder_count1(gfc, gi) {\r\n                /* Write count1 area */\r\n                var h = Tables.ht[gi.count1table_select + 32];\r\n                var i, bits = 0;\r\n\r\n                var ix = gi.big_values;\r\n                var xr = gi.big_values;\r\n\r\n                for (i = (gi.count1 - gi.big_values) / 4; i > 0; --i) {\r\n                    var huffbits = 0;\r\n                    var p = 0, v;\r\n\r\n                    v = gi.l3_enc[ix + 0];\r\n                    if (v != 0) {\r\n                        p += 8;\r\n                        if (gi.xr[xr + 0] < 0)\r\n                            huffbits++;\r\n                    }\r\n\r\n                    v = gi.l3_enc[ix + 1];\r\n                    if (v != 0) {\r\n                        p += 4;\r\n                        huffbits *= 2;\r\n                        if (gi.xr[xr + 1] < 0)\r\n                            huffbits++;\r\n                    }\r\n\r\n                    v = gi.l3_enc[ix + 2];\r\n                    if (v != 0) {\r\n                        p += 2;\r\n                        huffbits *= 2;\r\n                        if (gi.xr[xr + 2] < 0)\r\n                            huffbits++;\r\n                    }\r\n\r\n                    v = gi.l3_enc[ix + 3];\r\n                    if (v != 0) {\r\n                        p++;\r\n                        huffbits *= 2;\r\n                        if (gi.xr[xr + 3] < 0)\r\n                            huffbits++;\r\n                    }\r\n\r\n                    ix += 4;\r\n                    xr += 4;\r\n                    putbits2(gfc, huffbits + h.table[p], h.hlen[p]);\r\n                    bits += h.hlen[p];\r\n                }\r\n                return bits;\r\n            }\r\n\r\n            /**\r\n             * Implements the pseudocode of page 98 of the IS\r\n             */\r\n            function Huffmancode(gfc, tableindex, start, end, gi) {\r\n                var h = Tables.ht[tableindex];\r\n                var bits = 0;\r\n\r\n                if (0 == tableindex)\r\n                    return bits;\r\n\r\n                for (var i = start; i < end; i += 2) {\r\n                    var cbits = 0;\r\n                    var xbits = 0;\r\n                    var linbits = h.xlen;\r\n                    var xlen = h.xlen;\r\n                    var ext = 0;\r\n                    var x1 = gi.l3_enc[i];\r\n                    var x2 = gi.l3_enc[i + 1];\r\n\r\n                    if (x1 != 0) {\r\n                        if (gi.xr[i] < 0)\r\n                            ext++;\r\n                        cbits--;\r\n                    }\r\n\r\n                    if (tableindex > 15) {\r\n                        /* use ESC-words */\r\n                        if (x1 > 14) {\r\n                            var linbits_x1 = x1 - 15;\r\n                            ext |= linbits_x1 << 1;\r\n                            xbits = linbits;\r\n                            x1 = 15;\r\n                        }\r\n\r\n                        if (x2 > 14) {\r\n                            var linbits_x2 = x2 - 15;\r\n                            ext <<= linbits;\r\n                            ext |= linbits_x2;\r\n                            xbits += linbits;\r\n                            x2 = 15;\r\n                        }\r\n                        xlen = 16;\r\n                    }\r\n\r\n                    if (x2 != 0) {\r\n                        ext <<= 1;\r\n                        if (gi.xr[i + 1] < 0)\r\n                            ext++;\r\n                        cbits--;\r\n                    }\r\n\r\n\r\n                    x1 = x1 * xlen + x2;\r\n                    xbits -= cbits;\r\n                    cbits += h.hlen[x1];\r\n\r\n\r\n                    putbits2(gfc, h.table[x1], cbits);\r\n                    putbits2(gfc, ext, xbits);\r\n                    bits += cbits + xbits;\r\n                }\r\n                return bits;\r\n            }\r\n\r\n            /**\r\n             * Note the discussion of huffmancodebits() on pages 28 and 29 of the IS, as\r\n             * well as the definitions of the side information on pages 26 and 27.\r\n             */\r\n            function ShortHuffmancodebits(gfc, gi) {\r\n                var region1Start = 3 * gfc.scalefac_band.s[3];\r\n                if (region1Start > gi.big_values)\r\n                    region1Start = gi.big_values;\r\n\r\n                /* short blocks do not have a region2 */\r\n                var bits = Huffmancode(gfc, gi.table_select[0], 0, region1Start, gi);\r\n                bits += Huffmancode(gfc, gi.table_select[1], region1Start,\r\n                    gi.big_values, gi);\r\n                return bits;\r\n            }\r\n\r\n            function LongHuffmancodebits(gfc, gi) {\r\n                var bigvalues, bits;\r\n                var region1Start, region2Start;\r\n\r\n                bigvalues = gi.big_values;\r\n\r\n                var i = gi.region0_count + 1;\r\n                region1Start = gfc.scalefac_band.l[i];\r\n                i += gi.region1_count + 1;\r\n                region2Start = gfc.scalefac_band.l[i];\r\n\r\n                if (region1Start > bigvalues)\r\n                    region1Start = bigvalues;\r\n\r\n                if (region2Start > bigvalues)\r\n                    region2Start = bigvalues;\r\n\r\n                bits = Huffmancode(gfc, gi.table_select[0], 0, region1Start, gi);\r\n                bits += Huffmancode(gfc, gi.table_select[1], region1Start,\r\n                    region2Start, gi);\r\n                bits += Huffmancode(gfc, gi.table_select[2], region2Start, bigvalues,\r\n                    gi);\r\n                return bits;\r\n            }\r\n\r\n            function writeMainData(gfp) {\r\n                var gr, ch, sfb, data_bits, tot_bits = 0;\r\n                var gfc = gfp.internal_flags;\r\n                var l3_side = gfc.l3_side;\r\n\r\n                if (gfp.version == 1) {\r\n                    /* MPEG 1 */\r\n                    for (gr = 0; gr < 2; gr++) {\r\n                        for (ch = 0; ch < gfc.channels_out; ch++) {\r\n                            var gi = l3_side.tt[gr][ch];\r\n                            var slen1 = Takehiro.slen1_tab[gi.scalefac_compress];\r\n                            var slen2 = Takehiro.slen2_tab[gi.scalefac_compress];\r\n                            data_bits = 0;\r\n                            for (sfb = 0; sfb < gi.sfbdivide; sfb++) {\r\n                                if (gi.scalefac[sfb] == -1)\r\n                                    continue;\r\n                                /* scfsi is used */\r\n                                putbits2(gfc, gi.scalefac[sfb], slen1);\r\n                                data_bits += slen1;\r\n                            }\r\n                            for (; sfb < gi.sfbmax; sfb++) {\r\n                                if (gi.scalefac[sfb] == -1)\r\n                                    continue;\r\n                                /* scfsi is used */\r\n                                putbits2(gfc, gi.scalefac[sfb], slen2);\r\n                                data_bits += slen2;\r\n                            }\r\n\r\n                            if (gi.block_type == Encoder.SHORT_TYPE) {\r\n                                data_bits += ShortHuffmancodebits(gfc, gi);\r\n                            } else {\r\n                                data_bits += LongHuffmancodebits(gfc, gi);\r\n                            }\r\n                            data_bits += huffman_coder_count1(gfc, gi);\r\n                            /* does bitcount in quantize.c agree with actual bit count? */\r\n                            tot_bits += data_bits;\r\n                        }\r\n                        /* for ch */\r\n                    }\r\n                    /* for gr */\r\n                } else {\r\n                    /* MPEG 2 */\r\n                    gr = 0;\r\n                    for (ch = 0; ch < gfc.channels_out; ch++) {\r\n                        var gi = l3_side.tt[gr][ch];\r\n                        var i, sfb_partition, scale_bits = 0;\r\n                        data_bits = 0;\r\n                        sfb = 0;\r\n                        sfb_partition = 0;\r\n\r\n                        if (gi.block_type == Encoder.SHORT_TYPE) {\r\n                            for (; sfb_partition < 4; sfb_partition++) {\r\n                                var sfbs = gi.sfb_partition_table[sfb_partition] / 3;\r\n                                var slen = gi.slen[sfb_partition];\r\n                                for (i = 0; i < sfbs; i++, sfb++) {\r\n                                    putbits2(gfc,\r\n                                        Math.max(gi.scalefac[sfb * 3 + 0], 0), slen);\r\n                                    putbits2(gfc,\r\n                                        Math.max(gi.scalefac[sfb * 3 + 1], 0), slen);\r\n                                    putbits2(gfc,\r\n                                        Math.max(gi.scalefac[sfb * 3 + 2], 0), slen);\r\n                                    scale_bits += 3 * slen;\r\n                                }\r\n                            }\r\n                            data_bits += ShortHuffmancodebits(gfc, gi);\r\n                        } else {\r\n                            for (; sfb_partition < 4; sfb_partition++) {\r\n                                var sfbs = gi.sfb_partition_table[sfb_partition];\r\n                                var slen = gi.slen[sfb_partition];\r\n                                for (i = 0; i < sfbs; i++, sfb++) {\r\n                                    putbits2(gfc, Math.max(gi.scalefac[sfb], 0), slen);\r\n                                    scale_bits += slen;\r\n                                }\r\n                            }\r\n                            data_bits += LongHuffmancodebits(gfc, gi);\r\n                        }\r\n                        data_bits += huffman_coder_count1(gfc, gi);\r\n                        /* does bitcount in quantize.c agree with actual bit count? */\r\n                        tot_bits += scale_bits + data_bits;\r\n                    }\r\n                    /* for ch */\r\n                }\r\n                /* for gf */\r\n                return tot_bits;\r\n            }\r\n\r\n            /* main_data */\r\n\r\n            function TotalBytes() {\r\n                this.total = 0;\r\n            }\r\n\r\n            /*\r\n             * compute the number of bits required to flush all mp3 frames currently in\r\n             * the buffer. This should be the same as the reservoir size. Only call this\r\n             * routine between frames - i.e. only after all headers and data have been\r\n             * added to the buffer by format_bitstream().\r\n             *\r\n             * Also compute total_bits_output = size of mp3 buffer (including frame\r\n             * headers which may not have yet been send to the mp3 buffer) + number of\r\n             * bits needed to flush all mp3 frames.\r\n             *\r\n             * total_bytes_output is the size of the mp3 output buffer if\r\n             * lame_encode_flush_nogap() was called right now.\r\n             */\r\n            function compute_flushbits(gfp, total_bytes_output) {\r\n                var gfc = gfp.internal_flags;\r\n                var flushbits, remaining_headers;\r\n                var bitsPerFrame;\r\n                var last_ptr, first_ptr;\r\n                first_ptr = gfc.w_ptr;\r\n                /* first header to add to bitstream */\r\n                last_ptr = gfc.h_ptr - 1;\r\n                /* last header to add to bitstream */\r\n                if (last_ptr == -1)\r\n                    last_ptr = LameInternalFlags.MAX_HEADER_BUF - 1;\r\n\r\n                /* add this many bits to bitstream so we can flush all headers */\r\n                flushbits = gfc.header[last_ptr].write_timing - totbit;\r\n                total_bytes_output.total = flushbits;\r\n\r\n                if (flushbits >= 0) {\r\n                    /* if flushbits >= 0, some headers have not yet been written */\r\n                    /* reduce flushbits by the size of the headers */\r\n                    remaining_headers = 1 + last_ptr - first_ptr;\r\n                    if (last_ptr < first_ptr)\r\n                        remaining_headers = 1 + last_ptr - first_ptr\r\n                            + LameInternalFlags.MAX_HEADER_BUF;\r\n                    flushbits -= remaining_headers * 8 * gfc.sideinfo_len;\r\n                }\r\n\r\n                /*\r\n                 * finally, add some bits so that the last frame is complete these bits\r\n                 * are not necessary to decode the last frame, but some decoders will\r\n                 * ignore last frame if these bits are missing\r\n                 */\r\n                bitsPerFrame = self.getframebits(gfp);\r\n                flushbits += bitsPerFrame;\r\n                total_bytes_output.total += bitsPerFrame;\r\n                /* round up: */\r\n                if ((total_bytes_output.total % 8) != 0)\r\n                    total_bytes_output.total = 1 + (total_bytes_output.total / 8);\r\n                else\r\n                    total_bytes_output.total = (total_bytes_output.total / 8);\r\n                total_bytes_output.total += bufByteIdx + 1;\r\n\r\n                if (flushbits < 0) {\r\n                    System.err.println(\"strange error flushing buffer ... \\n\");\r\n                }\r\n                return flushbits;\r\n            }\r\n\r\n            this.flush_bitstream = function (gfp) {\r\n                var gfc = gfp.internal_flags;\r\n                var l3_side;\r\n                var flushbits;\r\n                var last_ptr = gfc.h_ptr - 1;\r\n                /* last header to add to bitstream */\r\n                if (last_ptr == -1)\r\n                    last_ptr = LameInternalFlags.MAX_HEADER_BUF - 1;\r\n                l3_side = gfc.l3_side;\r\n\r\n                if ((flushbits = compute_flushbits(gfp, new TotalBytes())) < 0)\r\n                    return;\r\n                drain_into_ancillary(gfp, flushbits);\r\n\r\n                /* check that the 100% of the last frame has been written to bitstream */\r\n\r\n                /*\r\n                 * we have padded out all frames with ancillary data, which is the same\r\n                 * as filling the bitreservoir with ancillary data, so :\r\n                 */\r\n                gfc.ResvSize = 0;\r\n                l3_side.main_data_begin = 0;\r\n\r\n                /* save the ReplayGain value */\r\n                if (gfc.findReplayGain) {\r\n                    var RadioGain = ga.GetTitleGain(gfc.rgdata);\r\n                    gfc.RadioGain = Math.floor(RadioGain * 10.0 + 0.5) | 0;\r\n                    /* round to nearest */\r\n                }\r\n\r\n                /* find the gain and scale change required for no clipping */\r\n                if (gfc.findPeakSample) {\r\n                    gfc.noclipGainChange = Math.ceil(Math\r\n                                .log10(gfc.PeakSample / 32767.0) * 20.0 * 10.0) | 0;\r\n                    /* round up */\r\n\r\n                    if (gfc.noclipGainChange > 0) {\r\n                        /* clipping occurs */\r\n                        if (EQ(gfp.scale, 1.0) || EQ(gfp.scale, 0.0))\r\n                            gfc.noclipScale = (Math\r\n                                .floor((32767.0 / gfc.PeakSample) * 100.0) / 100.0);\r\n                        /* round down */\r\n                        else {\r\n                            /*\r\n                             * the user specified his own scaling factor. We could\r\n                             * suggest the scaling factor of\r\n                             * (32767.0/gfp.PeakSample)*(gfp.scale) but it's usually\r\n                             * very inaccurate. So we'd rather not advice him on the\r\n                             * scaling factor.\r\n                             */\r\n                            gfc.noclipScale = -1;\r\n                        }\r\n                    } else\r\n                    /* no clipping */\r\n                        gfc.noclipScale = -1;\r\n                }\r\n            };\r\n\r\n            this.add_dummy_byte = function (gfp, val, n) {\r\n                var gfc = gfp.internal_flags;\r\n                var i;\r\n\r\n                while (n-- > 0) {\r\n                    putbits_noheaders(gfc, val, 8);\r\n\r\n                    for (i = 0; i < LameInternalFlags.MAX_HEADER_BUF; ++i)\r\n                        gfc.header[i].write_timing += 8;\r\n                }\r\n            };\r\n\r\n            /**\r\n             * This is called after a frame of audio has been quantized and coded. It\r\n             * will write the encoded audio to the bitstream. Note that from a layer3\r\n             * encoder's perspective the bit stream is primarily a series of main_data()\r\n             * blocks, with header and side information inserted at the proper locations\r\n             * to maintain framing. (See Figure A.7 in the IS).\r\n             */\r\n            this.format_bitstream = function (gfp) {\r\n                var gfc = gfp.internal_flags;\r\n                var l3_side;\r\n                l3_side = gfc.l3_side;\r\n\r\n                var bitsPerFrame = this.getframebits(gfp);\r\n                drain_into_ancillary(gfp, l3_side.resvDrain_pre);\r\n\r\n                encodeSideInfo2(gfp, bitsPerFrame);\r\n                var bits = 8 * gfc.sideinfo_len;\r\n                bits += writeMainData(gfp);\r\n                drain_into_ancillary(gfp, l3_side.resvDrain_post);\r\n                bits += l3_side.resvDrain_post;\r\n\r\n                l3_side.main_data_begin += (bitsPerFrame - bits) / 8;\r\n\r\n                /*\r\n                 * compare number of bits needed to clear all buffered mp3 frames with\r\n                 * what we think the resvsize is:\r\n                 */\r\n                if (compute_flushbits(gfp, new TotalBytes()) != gfc.ResvSize) {\r\n                    System.err.println(\"Internal buffer inconsistency. flushbits <> ResvSize\");\r\n                }\r\n\r\n                /*\r\n                 * compare main_data_begin for the next frame with what we think the\r\n                 * resvsize is:\r\n                 */\r\n                if ((l3_side.main_data_begin * 8) != gfc.ResvSize) {\r\n                    System.err.printf(\"bit reservoir error: \\n\"\r\n                        + \"l3_side.main_data_begin: %d \\n\"\r\n                        + \"Resvoir size:             %d \\n\"\r\n                        + \"resv drain (post)         %d \\n\"\r\n                        + \"resv drain (pre)          %d \\n\"\r\n                        + \"header and sideinfo:      %d \\n\"\r\n                        + \"data bits:                %d \\n\"\r\n                        + \"total bits:               %d (remainder: %d) \\n\"\r\n                        + \"bitsperframe:             %d \\n\",\r\n                        8 * l3_side.main_data_begin, gfc.ResvSize,\r\n                        l3_side.resvDrain_post, l3_side.resvDrain_pre,\r\n                        8 * gfc.sideinfo_len, bits - l3_side.resvDrain_post - 8\r\n                        * gfc.sideinfo_len, bits, bits % 8, bitsPerFrame);\r\n\r\n                    System.err.println(\"This is a fatal error.  It has several possible causes:\");\r\n                    System.err.println(\"90%%  LAME compiled with buggy version of gcc using advanced optimizations\");\r\n                    System.err.println(\" 9%%  Your system is overclocked\");\r\n                    System.err.println(\" 1%%  bug in LAME encoding library\");\r\n\r\n                    gfc.ResvSize = l3_side.main_data_begin * 8;\r\n                }\r\n                //;\r\n\r\n                if (totbit > 1000000000) {\r\n                    /*\r\n                     * to avoid totbit overflow, (at 8h encoding at 128kbs) lets reset\r\n                     * bit counter\r\n                     */\r\n                    var i;\r\n                    for (i = 0; i < LameInternalFlags.MAX_HEADER_BUF; ++i)\r\n                        gfc.header[i].write_timing -= totbit;\r\n                    totbit = 0;\r\n                }\r\n\r\n                return 0;\r\n            };\r\n\r\n            /**\r\n             * <PRE>\r\n             * copy data out of the internal MP3 bit buffer into a user supplied\r\n             *       unsigned char buffer.\r\n             *\r\n             *       mp3data=0      indicates data in buffer is an id3tags and VBR tags\r\n             *       mp3data=1      data is real mp3 frame data.\r\n             * </PRE>\r\n             */\r\n            this.copy_buffer = function (gfc, buffer, bufferPos, size, mp3data) {\r\n                var minimum = bufByteIdx + 1;\r\n                if (minimum <= 0)\r\n                    return 0;\r\n                if (size != 0 && minimum > size) {\r\n                    /* buffer is too small */\r\n                    return -1;\r\n                }\r\n                System.arraycopy(buf, 0, buffer, bufferPos, minimum);\r\n                bufByteIdx = -1;\r\n                bufBitIdx = 0;\r\n\r\n                if (mp3data != 0) {\r\n                    var crc = new_int(1);\r\n                    crc[0] = gfc.nMusicCRC;\r\n                    vbr.updateMusicCRC(crc, buffer, bufferPos, minimum);\r\n                    gfc.nMusicCRC = crc[0];\r\n\r\n                    /**\r\n                     * sum number of bytes belonging to the mp3 stream this info will be\r\n                     * written into the Xing/LAME header for seeking\r\n                     */\r\n                    if (minimum > 0) {\r\n                        gfc.VBR_seek_table.nBytesWritten += minimum;\r\n                    }\r\n\r\n                    if (gfc.decode_on_the_fly) { /* decode the frame */\r\n                        var pcm_buf = new_float_n([2, 1152]);\r\n                        var mp3_in = minimum;\r\n                        var samples_out = -1;\r\n                        var i;\r\n\r\n                        /* re-synthesis to pcm. Repeat until we get a samples_out=0 */\r\n                        while (samples_out != 0) {\r\n\r\n                            samples_out = mpg.hip_decode1_unclipped(gfc.hip, buffer,\r\n                                bufferPos, mp3_in, pcm_buf[0], pcm_buf[1]);\r\n                            /*\r\n                             * samples_out = 0: need more data to decode samples_out =\r\n                             * -1: error. Lets assume 0 pcm output samples_out = number\r\n                             * of samples output\r\n                             */\r\n\r\n                            /*\r\n                             * set the lenght of the mp3 input buffer to zero, so that\r\n                             * in the next iteration of the loop we will be querying\r\n                             * mpglib about buffered data\r\n                             */\r\n                            mp3_in = 0;\r\n\r\n                            if (samples_out == -1) {\r\n                                /*\r\n                                 * error decoding. Not fatal, but might screw up the\r\n                                 * ReplayGain tag. What should we do? Ignore for now\r\n                                 */\r\n                                samples_out = 0;\r\n                            }\r\n                            if (samples_out > 0) {\r\n                                /* process the PCM data */\r\n\r\n                                /*\r\n                                 * this should not be possible, and indicates we have\r\n                                 * overflown the pcm_buf buffer\r\n                                 */\r\n\r\n                                if (gfc.findPeakSample) {\r\n                                    for (i = 0; i < samples_out; i++) {\r\n                                        if (pcm_buf[0][i] > gfc.PeakSample)\r\n                                            gfc.PeakSample = pcm_buf[0][i];\r\n                                        else if (-pcm_buf[0][i] > gfc.PeakSample)\r\n                                            gfc.PeakSample = -pcm_buf[0][i];\r\n                                    }\r\n                                    if (gfc.channels_out > 1)\r\n                                        for (i = 0; i < samples_out; i++) {\r\n                                            if (pcm_buf[1][i] > gfc.PeakSample)\r\n                                                gfc.PeakSample = pcm_buf[1][i];\r\n                                            else if (-pcm_buf[1][i] > gfc.PeakSample)\r\n                                                gfc.PeakSample = -pcm_buf[1][i];\r\n                                        }\r\n                                }\r\n\r\n                                if (gfc.findReplayGain)\r\n                                    if (ga.AnalyzeSamples(gfc.rgdata, pcm_buf[0], 0,\r\n                                            pcm_buf[1], 0, samples_out,\r\n                                            gfc.channels_out) == GainAnalysis.GAIN_ANALYSIS_ERROR)\r\n                                        return -6;\r\n\r\n                            }\r\n                            /* if (samples_out>0) */\r\n                        }\r\n                        /* while (samples_out!=0) */\r\n                    }\r\n                    /* if (gfc.decode_on_the_fly) */\r\n\r\n                }\r\n                /* if (mp3data) */\r\n                return minimum;\r\n            };\r\n\r\n            this.init_bit_stream_w = function (gfc) {\r\n                buf = new_byte(Lame.LAME_MAXMP3BUFFER);\r\n\r\n                gfc.h_ptr = gfc.w_ptr = 0;\r\n                gfc.header[gfc.h_ptr].write_timing = 0;\r\n                bufByteIdx = -1;\r\n                bufBitIdx = 0;\r\n                totbit = 0;\r\n            };\r\n\r\n            // From machine.h\r\n\r\n\r\n        }\r\n\r\n        function HuffCodeTab(len, max, tab, hl) {\r\n            this.xlen = len;\r\n            this.linmax = max;\r\n            this.table = tab;\r\n            this.hlen = hl;\r\n        }\r\n\r\n        var Tables = {};\r\n\r\n\r\n        Tables.t1HB = [\r\n            1, 1,\r\n            1, 0\r\n        ];\r\n\r\n        Tables.t2HB = [\r\n            1, 2, 1,\r\n            3, 1, 1,\r\n            3, 2, 0\r\n        ];\r\n\r\n        Tables.t3HB = [\r\n            3, 2, 1,\r\n            1, 1, 1,\r\n            3, 2, 0\r\n        ];\r\n\r\n        Tables.t5HB = [\r\n            1, 2, 6, 5,\r\n            3, 1, 4, 4,\r\n            7, 5, 7, 1,\r\n            6, 1, 1, 0\r\n        ];\r\n\r\n        Tables.t6HB = [\r\n            7, 3, 5, 1,\r\n            6, 2, 3, 2,\r\n            5, 4, 4, 1,\r\n            3, 3, 2, 0\r\n        ];\r\n\r\n        Tables.t7HB = [\r\n            1, 2, 10, 19, 16, 10,\r\n            3, 3, 7, 10, 5, 3,\r\n            11, 4, 13, 17, 8, 4,\r\n            12, 11, 18, 15, 11, 2,\r\n            7, 6, 9, 14, 3, 1,\r\n            6, 4, 5, 3, 2, 0\r\n        ];\r\n\r\n        Tables.t8HB = [\r\n            3, 4, 6, 18, 12, 5,\r\n            5, 1, 2, 16, 9, 3,\r\n            7, 3, 5, 14, 7, 3,\r\n            19, 17, 15, 13, 10, 4,\r\n            13, 5, 8, 11, 5, 1,\r\n            12, 4, 4, 1, 1, 0\r\n        ];\r\n\r\n        Tables.t9HB = [\r\n            7, 5, 9, 14, 15, 7,\r\n            6, 4, 5, 5, 6, 7,\r\n            7, 6, 8, 8, 8, 5,\r\n            15, 6, 9, 10, 5, 1,\r\n            11, 7, 9, 6, 4, 1,\r\n            14, 4, 6, 2, 6, 0\r\n        ];\r\n\r\n        Tables.t10HB = [\r\n            1, 2, 10, 23, 35, 30, 12, 17,\r\n            3, 3, 8, 12, 18, 21, 12, 7,\r\n            11, 9, 15, 21, 32, 40, 19, 6,\r\n            14, 13, 22, 34, 46, 23, 18, 7,\r\n            20, 19, 33, 47, 27, 22, 9, 3,\r\n            31, 22, 41, 26, 21, 20, 5, 3,\r\n            14, 13, 10, 11, 16, 6, 5, 1,\r\n            9, 8, 7, 8, 4, 4, 2, 0\r\n        ];\r\n\r\n        Tables.t11HB = [\r\n            3, 4, 10, 24, 34, 33, 21, 15,\r\n            5, 3, 4, 10, 32, 17, 11, 10,\r\n            11, 7, 13, 18, 30, 31, 20, 5,\r\n            25, 11, 19, 59, 27, 18, 12, 5,\r\n            35, 33, 31, 58, 30, 16, 7, 5,\r\n            28, 26, 32, 19, 17, 15, 8, 14,\r\n            14, 12, 9, 13, 14, 9, 4, 1,\r\n            11, 4, 6, 6, 6, 3, 2, 0\r\n        ];\r\n\r\n        Tables.t12HB = [\r\n            9, 6, 16, 33, 41, 39, 38, 26,\r\n            7, 5, 6, 9, 23, 16, 26, 11,\r\n            17, 7, 11, 14, 21, 30, 10, 7,\r\n            17, 10, 15, 12, 18, 28, 14, 5,\r\n            32, 13, 22, 19, 18, 16, 9, 5,\r\n            40, 17, 31, 29, 17, 13, 4, 2,\r\n            27, 12, 11, 15, 10, 7, 4, 1,\r\n            27, 12, 8, 12, 6, 3, 1, 0\r\n        ];\r\n\r\n        Tables.t13HB = [\r\n            1, 5, 14, 21, 34, 51, 46, 71, 42, 52, 68, 52, 67, 44, 43, 19,\r\n            3, 4, 12, 19, 31, 26, 44, 33, 31, 24, 32, 24, 31, 35, 22, 14,\r\n            15, 13, 23, 36, 59, 49, 77, 65, 29, 40, 30, 40, 27, 33, 42, 16,\r\n            22, 20, 37, 61, 56, 79, 73, 64, 43, 76, 56, 37, 26, 31, 25, 14,\r\n            35, 16, 60, 57, 97, 75, 114, 91, 54, 73, 55, 41, 48, 53, 23, 24,\r\n            58, 27, 50, 96, 76, 70, 93, 84, 77, 58, 79, 29, 74, 49, 41, 17,\r\n            47, 45, 78, 74, 115, 94, 90, 79, 69, 83, 71, 50, 59, 38, 36, 15,\r\n            72, 34, 56, 95, 92, 85, 91, 90, 86, 73, 77, 65, 51, 44, 43, 42,\r\n            43, 20, 30, 44, 55, 78, 72, 87, 78, 61, 46, 54, 37, 30, 20, 16,\r\n            53, 25, 41, 37, 44, 59, 54, 81, 66, 76, 57, 54, 37, 18, 39, 11,\r\n            35, 33, 31, 57, 42, 82, 72, 80, 47, 58, 55, 21, 22, 26, 38, 22,\r\n            53, 25, 23, 38, 70, 60, 51, 36, 55, 26, 34, 23, 27, 14, 9, 7,\r\n            34, 32, 28, 39, 49, 75, 30, 52, 48, 40, 52, 28, 18, 17, 9, 5,\r\n            45, 21, 34, 64, 56, 50, 49, 45, 31, 19, 12, 15, 10, 7, 6, 3,\r\n            48, 23, 20, 39, 36, 35, 53, 21, 16, 23, 13, 10, 6, 1, 4, 2,\r\n            16, 15, 17, 27, 25, 20, 29, 11, 17, 12, 16, 8, 1, 1, 0, 1\r\n        ];\r\n\r\n        Tables.t15HB = [\r\n            7, 12, 18, 53, 47, 76, 124, 108, 89, 123, 108, 119, 107, 81, 122, 63,\r\n            13, 5, 16, 27, 46, 36, 61, 51, 42, 70, 52, 83, 65, 41, 59, 36,\r\n            19, 17, 15, 24, 41, 34, 59, 48, 40, 64, 50, 78, 62, 80, 56, 33,\r\n            29, 28, 25, 43, 39, 63, 55, 93, 76, 59, 93, 72, 54, 75, 50, 29,\r\n            52, 22, 42, 40, 67, 57, 95, 79, 72, 57, 89, 69, 49, 66, 46, 27,\r\n            77, 37, 35, 66, 58, 52, 91, 74, 62, 48, 79, 63, 90, 62, 40, 38,\r\n            125, 32, 60, 56, 50, 92, 78, 65, 55, 87, 71, 51, 73, 51, 70, 30,\r\n            109, 53, 49, 94, 88, 75, 66, 122, 91, 73, 56, 42, 64, 44, 21, 25,\r\n            90, 43, 41, 77, 73, 63, 56, 92, 77, 66, 47, 67, 48, 53, 36, 20,\r\n            71, 34, 67, 60, 58, 49, 88, 76, 67, 106, 71, 54, 38, 39, 23, 15,\r\n            109, 53, 51, 47, 90, 82, 58, 57, 48, 72, 57, 41, 23, 27, 62, 9,\r\n            86, 42, 40, 37, 70, 64, 52, 43, 70, 55, 42, 25, 29, 18, 11, 11,\r\n            118, 68, 30, 55, 50, 46, 74, 65, 49, 39, 24, 16, 22, 13, 14, 7,\r\n            91, 44, 39, 38, 34, 63, 52, 45, 31, 52, 28, 19, 14, 8, 9, 3,\r\n            123, 60, 58, 53, 47, 43, 32, 22, 37, 24, 17, 12, 15, 10, 2, 1,\r\n            71, 37, 34, 30, 28, 20, 17, 26, 21, 16, 10, 6, 8, 6, 2, 0\r\n        ];\r\n\r\n        Tables.t16HB = [\r\n            1, 5, 14, 44, 74, 63, 110, 93, 172, 149, 138, 242, 225, 195, 376, 17,\r\n            3, 4, 12, 20, 35, 62, 53, 47, 83, 75, 68, 119, 201, 107, 207, 9,\r\n            15, 13, 23, 38, 67, 58, 103, 90, 161, 72, 127, 117, 110, 209, 206, 16,\r\n            45, 21, 39, 69, 64, 114, 99, 87, 158, 140, 252, 212, 199, 387, 365, 26,\r\n            75, 36, 68, 65, 115, 101, 179, 164, 155, 264, 246, 226, 395, 382, 362, 9,\r\n            66, 30, 59, 56, 102, 185, 173, 265, 142, 253, 232, 400, 388, 378, 445, 16,\r\n            111, 54, 52, 100, 184, 178, 160, 133, 257, 244, 228, 217, 385, 366, 715, 10,\r\n            98, 48, 91, 88, 165, 157, 148, 261, 248, 407, 397, 372, 380, 889, 884, 8,\r\n            85, 84, 81, 159, 156, 143, 260, 249, 427, 401, 392, 383, 727, 713, 708, 7,\r\n            154, 76, 73, 141, 131, 256, 245, 426, 406, 394, 384, 735, 359, 710, 352, 11,\r\n            139, 129, 67, 125, 247, 233, 229, 219, 393, 743, 737, 720, 885, 882, 439, 4,\r\n            243, 120, 118, 115, 227, 223, 396, 746, 742, 736, 721, 712, 706, 223, 436, 6,\r\n            202, 224, 222, 218, 216, 389, 386, 381, 364, 888, 443, 707, 440, 437, 1728, 4,\r\n            747, 211, 210, 208, 370, 379, 734, 723, 714, 1735, 883, 877, 876, 3459, 865, 2,\r\n            377, 369, 102, 187, 726, 722, 358, 711, 709, 866, 1734, 871, 3458, 870, 434, 0,\r\n            12, 10, 7, 11, 10, 17, 11, 9, 13, 12, 10, 7, 5, 3, 1, 3\r\n        ];\r\n\r\n        Tables.t24HB = [\r\n            15, 13, 46, 80, 146, 262, 248, 434, 426, 669, 653, 649, 621, 517, 1032, 88,\r\n            14, 12, 21, 38, 71, 130, 122, 216, 209, 198, 327, 345, 319, 297, 279, 42,\r\n            47, 22, 41, 74, 68, 128, 120, 221, 207, 194, 182, 340, 315, 295, 541, 18,\r\n            81, 39, 75, 70, 134, 125, 116, 220, 204, 190, 178, 325, 311, 293, 271, 16,\r\n            147, 72, 69, 135, 127, 118, 112, 210, 200, 188, 352, 323, 306, 285, 540, 14,\r\n            263, 66, 129, 126, 119, 114, 214, 202, 192, 180, 341, 317, 301, 281, 262, 12,\r\n            249, 123, 121, 117, 113, 215, 206, 195, 185, 347, 330, 308, 291, 272, 520, 10,\r\n            435, 115, 111, 109, 211, 203, 196, 187, 353, 332, 313, 298, 283, 531, 381, 17,\r\n            427, 212, 208, 205, 201, 193, 186, 177, 169, 320, 303, 286, 268, 514, 377, 16,\r\n            335, 199, 197, 191, 189, 181, 174, 333, 321, 305, 289, 275, 521, 379, 371, 11,\r\n            668, 184, 183, 179, 175, 344, 331, 314, 304, 290, 277, 530, 383, 373, 366, 10,\r\n            652, 346, 171, 168, 164, 318, 309, 299, 287, 276, 263, 513, 375, 368, 362, 6,\r\n            648, 322, 316, 312, 307, 302, 292, 284, 269, 261, 512, 376, 370, 364, 359, 4,\r\n            620, 300, 296, 294, 288, 282, 273, 266, 515, 380, 374, 369, 365, 361, 357, 2,\r\n            1033, 280, 278, 274, 267, 264, 259, 382, 378, 372, 367, 363, 360, 358, 356, 0,\r\n            43, 20, 19, 17, 15, 13, 11, 9, 7, 6, 4, 7, 5, 3, 1, 3\r\n        ];\r\n\r\n        Tables.t32HB = [\r\n            1 << 0, 5 << 1, 4 << 1, 5 << 2, 6 << 1, 5 << 2, 4 << 2, 4 << 3,\r\n            7 << 1, 3 << 2, 6 << 2, 0 << 3, 7 << 2, 2 << 3, 3 << 3, 1 << 4\r\n        ];\r\n\r\n        Tables.t33HB = [\r\n            15 << 0, 14 << 1, 13 << 1, 12 << 2, 11 << 1, 10 << 2, 9 << 2, 8 << 3,\r\n            7 << 1, 6 << 2, 5 << 2, 4 << 3, 3 << 2, 2 << 3, 1 << 3, 0 << 4\r\n        ];\r\n\r\n        Tables.t1l = [\r\n            1, 4,\r\n            3, 5\r\n        ];\r\n\r\n        Tables.t2l = [\r\n            1, 4, 7,\r\n            4, 5, 7,\r\n            6, 7, 8\r\n        ];\r\n\r\n        Tables.t3l = [\r\n            2, 3, 7,\r\n            4, 4, 7,\r\n            6, 7, 8\r\n        ];\r\n\r\n        Tables.t5l = [\r\n            1, 4, 7, 8,\r\n            4, 5, 8, 9,\r\n            7, 8, 9, 10,\r\n            8, 8, 9, 10\r\n        ];\r\n\r\n        Tables.t6l = [\r\n            3, 4, 6, 8,\r\n            4, 4, 6, 7,\r\n            5, 6, 7, 8,\r\n            7, 7, 8, 9\r\n        ];\r\n\r\n        Tables.t7l = [\r\n            1, 4, 7, 9, 9, 10,\r\n            4, 6, 8, 9, 9, 10,\r\n            7, 7, 9, 10, 10, 11,\r\n            8, 9, 10, 11, 11, 11,\r\n            8, 9, 10, 11, 11, 12,\r\n            9, 10, 11, 12, 12, 12\r\n        ];\r\n\r\n        Tables.t8l = [\r\n            2, 4, 7, 9, 9, 10,\r\n            4, 4, 6, 10, 10, 10,\r\n            7, 6, 8, 10, 10, 11,\r\n            9, 10, 10, 11, 11, 12,\r\n            9, 9, 10, 11, 12, 12,\r\n            10, 10, 11, 11, 13, 13\r\n        ];\r\n\r\n        Tables.t9l = [\r\n            3, 4, 6, 7, 9, 10,\r\n            4, 5, 6, 7, 8, 10,\r\n            5, 6, 7, 8, 9, 10,\r\n            7, 7, 8, 9, 9, 10,\r\n            8, 8, 9, 9, 10, 11,\r\n            9, 9, 10, 10, 11, 11\r\n        ];\r\n\r\n        Tables.t10l = [\r\n            1, 4, 7, 9, 10, 10, 10, 11,\r\n            4, 6, 8, 9, 10, 11, 10, 10,\r\n            7, 8, 9, 10, 11, 12, 11, 11,\r\n            8, 9, 10, 11, 12, 12, 11, 12,\r\n            9, 10, 11, 12, 12, 12, 12, 12,\r\n            10, 11, 12, 12, 13, 13, 12, 13,\r\n            9, 10, 11, 12, 12, 12, 13, 13,\r\n            10, 10, 11, 12, 12, 13, 13, 13\r\n        ];\r\n\r\n        Tables.t11l = [\r\n            2, 4, 6, 8, 9, 10, 9, 10,\r\n            4, 5, 6, 8, 10, 10, 9, 10,\r\n            6, 7, 8, 9, 10, 11, 10, 10,\r\n            8, 8, 9, 11, 10, 12, 10, 11,\r\n            9, 10, 10, 11, 11, 12, 11, 12,\r\n            9, 10, 11, 12, 12, 13, 12, 13,\r\n            9, 9, 9, 10, 11, 12, 12, 12,\r\n            9, 9, 10, 11, 12, 12, 12, 12\r\n        ];\r\n\r\n        Tables.t12l = [\r\n            4, 4, 6, 8, 9, 10, 10, 10,\r\n            4, 5, 6, 7, 9, 9, 10, 10,\r\n            6, 6, 7, 8, 9, 10, 9, 10,\r\n            7, 7, 8, 8, 9, 10, 10, 10,\r\n            8, 8, 9, 9, 10, 10, 10, 11,\r\n            9, 9, 10, 10, 10, 11, 10, 11,\r\n            9, 9, 9, 10, 10, 11, 11, 12,\r\n            10, 10, 10, 11, 11, 11, 11, 12\r\n        ];\r\n\r\n        Tables.t13l = [\r\n            1, 5, 7, 8, 9, 10, 10, 11, 10, 11, 12, 12, 13, 13, 14, 14,\r\n            4, 6, 8, 9, 10, 10, 11, 11, 11, 11, 12, 12, 13, 14, 14, 14,\r\n            7, 8, 9, 10, 11, 11, 12, 12, 11, 12, 12, 13, 13, 14, 15, 15,\r\n            8, 9, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 15, 15,\r\n            9, 9, 11, 11, 12, 12, 13, 13, 12, 13, 13, 14, 14, 15, 15, 16,\r\n            10, 10, 11, 12, 12, 12, 13, 13, 13, 13, 14, 13, 15, 15, 16, 16,\r\n            10, 11, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 16, 16,\r\n            11, 11, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 16, 18, 18,\r\n            10, 10, 11, 12, 12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 17, 17,\r\n            11, 11, 12, 12, 13, 13, 13, 15, 14, 15, 15, 16, 16, 16, 18, 17,\r\n            11, 12, 12, 13, 13, 14, 14, 15, 14, 15, 16, 15, 16, 17, 18, 19,\r\n            12, 12, 12, 13, 14, 14, 14, 14, 15, 15, 15, 16, 17, 17, 17, 18,\r\n            12, 13, 13, 14, 14, 15, 14, 15, 16, 16, 17, 17, 17, 18, 18, 18,\r\n            13, 13, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 17, 18, 18,\r\n            14, 14, 14, 15, 15, 15, 17, 16, 16, 19, 17, 17, 17, 19, 18, 18,\r\n            13, 14, 15, 16, 16, 16, 17, 16, 17, 17, 18, 18, 21, 20, 21, 18\r\n        ];\r\n\r\n        Tables.t15l = [\r\n            3, 5, 6, 8, 8, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 14,\r\n            5, 5, 7, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 13,\r\n            6, 7, 7, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 13, 13, 13,\r\n            7, 8, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13,\r\n            8, 8, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13,\r\n            9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 13, 13, 13, 14,\r\n            10, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 14, 14,\r\n            10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 14,\r\n            10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 14, 14, 14,\r\n            10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14,\r\n            11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 15, 14,\r\n            11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15,\r\n            12, 12, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 15, 15,\r\n            12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15,\r\n            13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 14, 15,\r\n            13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15\r\n        ];\r\n\r\n        Tables.t16_5l = [\r\n            1, 5, 7, 9, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 11,\r\n            4, 6, 8, 9, 10, 11, 11, 11, 12, 12, 12, 13, 14, 13, 14, 11,\r\n            7, 8, 9, 10, 11, 11, 12, 12, 13, 12, 13, 13, 13, 14, 14, 12,\r\n            9, 9, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 13,\r\n            10, 10, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 12,\r\n            10, 10, 11, 11, 12, 13, 13, 14, 13, 14, 14, 15, 15, 15, 16, 13,\r\n            11, 11, 11, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 13,\r\n            11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 17, 17, 13,\r\n            11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 13,\r\n            12, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 15, 16, 15, 14,\r\n            12, 13, 12, 13, 14, 14, 14, 14, 15, 16, 16, 16, 17, 17, 16, 13,\r\n            13, 13, 13, 13, 14, 14, 15, 16, 16, 16, 16, 16, 16, 15, 16, 14,\r\n            13, 14, 14, 14, 14, 15, 15, 15, 15, 17, 16, 16, 16, 16, 18, 14,\r\n            15, 14, 14, 14, 15, 15, 16, 16, 16, 18, 17, 17, 17, 19, 17, 14,\r\n            14, 15, 13, 14, 16, 16, 15, 16, 16, 17, 18, 17, 19, 17, 16, 14,\r\n            11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 12\r\n        ];\r\n\r\n        Tables.t16l = [\r\n            1, 5, 7, 9, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 10,\r\n            4, 6, 8, 9, 10, 11, 11, 11, 12, 12, 12, 13, 14, 13, 14, 10,\r\n            7, 8, 9, 10, 11, 11, 12, 12, 13, 12, 13, 13, 13, 14, 14, 11,\r\n            9, 9, 10, 11, 11, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 12,\r\n            10, 10, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 11,\r\n            10, 10, 11, 11, 12, 13, 13, 14, 13, 14, 14, 15, 15, 15, 16, 12,\r\n            11, 11, 11, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 12,\r\n            11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 17, 17, 12,\r\n            11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 12,\r\n            12, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 15, 16, 15, 13,\r\n            12, 13, 12, 13, 14, 14, 14, 14, 15, 16, 16, 16, 17, 17, 16, 12,\r\n            13, 13, 13, 13, 14, 14, 15, 16, 16, 16, 16, 16, 16, 15, 16, 13,\r\n            13, 14, 14, 14, 14, 15, 15, 15, 15, 17, 16, 16, 16, 16, 18, 13,\r\n            15, 14, 14, 14, 15, 15, 16, 16, 16, 18, 17, 17, 17, 19, 17, 13,\r\n            14, 15, 13, 14, 16, 16, 15, 16, 16, 17, 18, 17, 19, 17, 16, 13,\r\n            10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 10\r\n        ];\r\n\r\n        Tables.t24l = [\r\n            4, 5, 7, 8, 9, 10, 10, 11, 11, 12, 12, 12, 12, 12, 13, 10,\r\n            5, 6, 7, 8, 9, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 10,\r\n            7, 7, 8, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 9,\r\n            8, 8, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 9,\r\n            9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 13, 9,\r\n            10, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 9,\r\n            10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 9,\r\n            11, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 10,\r\n            11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 10,\r\n            11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 10,\r\n            12, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 10,\r\n            12, 12, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 10,\r\n            12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 10,\r\n            12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 10,\r\n            13, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 10,\r\n            9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 6\r\n        ];\r\n\r\n        Tables.t32l = [\r\n            1 + 0, 4 + 1, 4 + 1, 5 + 2, 4 + 1, 6 + 2, 5 + 2, 6 + 3,\r\n            4 + 1, 5 + 2, 5 + 2, 6 + 3, 5 + 2, 6 + 3, 6 + 3, 6 + 4\r\n        ];\r\n\r\n        Tables.t33l = [\r\n            4 + 0, 4 + 1, 4 + 1, 4 + 2, 4 + 1, 4 + 2, 4 + 2, 4 + 3,\r\n            4 + 1, 4 + 2, 4 + 2, 4 + 3, 4 + 2, 4 + 3, 4 + 3, 4 + 4\r\n        ];\r\n\r\n        Tables.ht = [\r\n            /* xlen, linmax, table, hlen */\r\n            new HuffCodeTab(0, 0, null, null),\r\n            new HuffCodeTab(2, 0, Tables.t1HB, Tables.t1l),\r\n            new HuffCodeTab(3, 0, Tables.t2HB, Tables.t2l),\r\n            new HuffCodeTab(3, 0, Tables.t3HB, Tables.t3l),\r\n            new HuffCodeTab(0, 0, null, null), /* Apparently not used */\r\n            new HuffCodeTab(4, 0, Tables.t5HB, Tables.t5l),\r\n            new HuffCodeTab(4, 0, Tables.t6HB, Tables.t6l),\r\n            new HuffCodeTab(6, 0, Tables.t7HB, Tables.t7l),\r\n            new HuffCodeTab(6, 0, Tables.t8HB, Tables.t8l),\r\n            new HuffCodeTab(6, 0, Tables.t9HB, Tables.t9l),\r\n            new HuffCodeTab(8, 0, Tables.t10HB, Tables.t10l),\r\n            new HuffCodeTab(8, 0, Tables.t11HB, Tables.t11l),\r\n            new HuffCodeTab(8, 0, Tables.t12HB, Tables.t12l),\r\n            new HuffCodeTab(16, 0, Tables.t13HB, Tables.t13l),\r\n            new HuffCodeTab(0, 0, null, Tables.t16_5l), /* Apparently not used */\r\n            new HuffCodeTab(16, 0, Tables.t15HB, Tables.t15l),\r\n\r\n            new HuffCodeTab(1, 1, Tables.t16HB, Tables.t16l),\r\n            new HuffCodeTab(2, 3, Tables.t16HB, Tables.t16l),\r\n            new HuffCodeTab(3, 7, Tables.t16HB, Tables.t16l),\r\n            new HuffCodeTab(4, 15, Tables.t16HB, Tables.t16l),\r\n            new HuffCodeTab(6, 63, Tables.t16HB, Tables.t16l),\r\n            new HuffCodeTab(8, 255, Tables.t16HB, Tables.t16l),\r\n            new HuffCodeTab(10, 1023, Tables.t16HB, Tables.t16l),\r\n            new HuffCodeTab(13, 8191, Tables.t16HB, Tables.t16l),\r\n\r\n            new HuffCodeTab(4, 15, Tables.t24HB, Tables.t24l),\r\n            new HuffCodeTab(5, 31, Tables.t24HB, Tables.t24l),\r\n            new HuffCodeTab(6, 63, Tables.t24HB, Tables.t24l),\r\n            new HuffCodeTab(7, 127, Tables.t24HB, Tables.t24l),\r\n            new HuffCodeTab(8, 255, Tables.t24HB, Tables.t24l),\r\n            new HuffCodeTab(9, 511, Tables.t24HB, Tables.t24l),\r\n            new HuffCodeTab(11, 2047, Tables.t24HB, Tables.t24l),\r\n            new HuffCodeTab(13, 8191, Tables.t24HB, Tables.t24l),\r\n\r\n            new HuffCodeTab(0, 0, Tables.t32HB, Tables.t32l),\r\n            new HuffCodeTab(0, 0, Tables.t33HB, Tables.t33l),\r\n        ];\r\n\r\n        /**\r\n         * <CODE>\r\n         *  for (i = 0; i < 16*16; i++) [\r\n         *      largetbl[i] = ((ht[16].hlen[i]) << 16) + ht[24].hlen[i];\r\n         *  ]\r\n         * </CODE>\r\n         *\r\n         */\r\n        Tables.largetbl = [\r\n            0x010004, 0x050005, 0x070007, 0x090008, 0x0a0009, 0x0a000a, 0x0b000a, 0x0b000b,\r\n            0x0c000b, 0x0c000c, 0x0c000c, 0x0d000c, 0x0d000c, 0x0d000c, 0x0e000d, 0x0a000a,\r\n            0x040005, 0x060006, 0x080007, 0x090008, 0x0a0009, 0x0b000a, 0x0b000a, 0x0b000b,\r\n            0x0c000b, 0x0c000b, 0x0c000c, 0x0d000c, 0x0e000c, 0x0d000c, 0x0e000c, 0x0a000a,\r\n            0x070007, 0x080007, 0x090008, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000b,\r\n            0x0d000b, 0x0c000b, 0x0d000b, 0x0d000c, 0x0d000c, 0x0e000c, 0x0e000d, 0x0b0009,\r\n            0x090008, 0x090008, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000a, 0x0c000b,\r\n            0x0d000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0c0009,\r\n            0x0a0009, 0x0a0009, 0x0b0009, 0x0b000a, 0x0c000a, 0x0c000a, 0x0d000a, 0x0d000b,\r\n            0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000d, 0x0b0009,\r\n            0x0a000a, 0x0a0009, 0x0b000a, 0x0b000a, 0x0c000a, 0x0d000a, 0x0d000b, 0x0e000b,\r\n            0x0d000b, 0x0e000b, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x0c0009,\r\n            0x0b000a, 0x0b000a, 0x0b000a, 0x0c000a, 0x0d000a, 0x0d000b, 0x0d000b, 0x0d000b,\r\n            0x0e000b, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x10000d, 0x0c0009,\r\n            0x0b000b, 0x0b000a, 0x0c000a, 0x0c000a, 0x0d000b, 0x0d000b, 0x0d000b, 0x0e000b,\r\n            0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x0f000c, 0x11000d, 0x11000d, 0x0c000a,\r\n            0x0b000b, 0x0c000b, 0x0c000b, 0x0d000b, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000b,\r\n            0x0f000b, 0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x10000d, 0x10000d, 0x0c000a,\r\n            0x0c000b, 0x0c000b, 0x0c000b, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000b, 0x0f000c,\r\n            0x0f000c, 0x0f000c, 0x0f000c, 0x10000c, 0x0f000d, 0x10000d, 0x0f000d, 0x0d000a,\r\n            0x0c000c, 0x0d000b, 0x0c000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0e000c, 0x0e000c,\r\n            0x0f000c, 0x10000c, 0x10000c, 0x10000d, 0x11000d, 0x11000d, 0x10000d, 0x0c000a,\r\n            0x0d000c, 0x0d000c, 0x0d000b, 0x0d000b, 0x0e000b, 0x0e000c, 0x0f000c, 0x10000c,\r\n            0x10000c, 0x10000c, 0x10000c, 0x10000d, 0x10000d, 0x0f000d, 0x10000d, 0x0d000a,\r\n            0x0d000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x0f000c,\r\n            0x0f000c, 0x11000c, 0x10000d, 0x10000d, 0x10000d, 0x10000d, 0x12000d, 0x0d000a,\r\n            0x0f000c, 0x0e000c, 0x0e000c, 0x0e000c, 0x0f000c, 0x0f000c, 0x10000c, 0x10000c,\r\n            0x10000d, 0x12000d, 0x11000d, 0x11000d, 0x11000d, 0x13000d, 0x11000d, 0x0d000a,\r\n            0x0e000d, 0x0f000c, 0x0d000c, 0x0e000c, 0x10000c, 0x10000c, 0x0f000c, 0x10000d,\r\n            0x10000d, 0x11000d, 0x12000d, 0x11000d, 0x13000d, 0x11000d, 0x10000d, 0x0d000a,\r\n            0x0a0009, 0x0a0009, 0x0a0009, 0x0b0009, 0x0b0009, 0x0c0009, 0x0c0009, 0x0c0009,\r\n            0x0d0009, 0x0d0009, 0x0d0009, 0x0d000a, 0x0d000a, 0x0d000a, 0x0d000a, 0x0a0006\r\n        ];\r\n        /**\r\n         * <CODE>\r\n         *  for (i = 0; i < 3*3; i++) [\r\n         *      table23[i] = ((ht[2].hlen[i]) << 16) + ht[3].hlen[i];\r\n         *  ]\r\n         * </CODE>\r\n         *\r\n         */\r\n        Tables.table23 = [\r\n            0x010002, 0x040003, 0x070007,\r\n            0x040004, 0x050004, 0x070007,\r\n            0x060006, 0x070007, 0x080008\r\n        ];\r\n\r\n        /**\r\n         * <CODE>\r\n         *  for (i = 0; i < 4*4; i++) [\r\n         *       table56[i] = ((ht[5].hlen[i]) << 16) + ht[6].hlen[i];\r\n         *   ]\r\n         * </CODE>\r\n         *\r\n         */\r\n        Tables.table56 = [\r\n            0x010003, 0x040004, 0x070006, 0x080008, 0x040004, 0x050004, 0x080006, 0x090007,\r\n            0x070005, 0x080006, 0x090007, 0x0a0008, 0x080007, 0x080007, 0x090008, 0x0a0009\r\n        ];\r\n\r\n        Tables.bitrate_table = [\r\n            [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, -1], /* MPEG 2 */\r\n            [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1], /* MPEG 1 */\r\n            [0, 8, 16, 24, 32, 40, 48, 56, 64, -1, -1, -1, -1, -1, -1, -1], /* MPEG 2.5 */\r\n        ];\r\n\r\n        /**\r\n         * MPEG 2, MPEG 1, MPEG 2.5.\r\n         */\r\n        Tables.samplerate_table = [\r\n            [22050, 24000, 16000, -1],\r\n            [44100, 48000, 32000, -1],\r\n            [11025, 12000, 8000, -1],\r\n        ];\r\n\r\n        /**\r\n         * This is the scfsi_band table from 2.4.2.7 of the IS.\r\n         */\r\n        Tables.scfsi_band = [0, 6, 11, 16, 21];\r\n\r\n        function MeanBits(meanBits) {\r\n            this.bits = meanBits;\r\n        }\r\n\r\n//package mp3;\r\n\r\n        function CalcNoiseResult() {\r\n            /**\r\n             * sum of quantization noise > masking\r\n             */\r\n            this.over_noise = 0.;\r\n            /**\r\n             * sum of all quantization noise\r\n             */\r\n            this.tot_noise = 0.;\r\n            /**\r\n             * max quantization noise\r\n             */\r\n            this.max_noise = 0.;\r\n            /**\r\n             * number of quantization noise > masking\r\n             */\r\n            this.over_count = 0;\r\n            /**\r\n             * SSD-like cost of distorted bands\r\n             */\r\n            this.over_SSD = 0;\r\n            this.bits = 0;\r\n        }\r\n\r\n        function VBRQuantize() {\r\n            var qupvt;\r\n            var tak;\r\n\r\n            this.setModules = function (_qupvt, _tk) {\r\n                qupvt = _qupvt;\r\n                tak = _tk;\r\n            }\r\n            //TODO\r\n\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * ATH related stuff, if something new ATH related has to be added, please plug\r\n         * it here into the ATH.\r\n         */\r\n        function ATH() {\r\n            /**\r\n             * Method for the auto adjustment.\r\n             */\r\n            this.useAdjust = 0;\r\n            /**\r\n             * factor for tuning the (sample power) point below which adaptive threshold\r\n             * of hearing adjustment occurs\r\n             */\r\n            this.aaSensitivityP = 0.;\r\n            /**\r\n             * Lowering based on peak volume, 1 = no lowering.\r\n             */\r\n            this.adjust = 0.;\r\n            /**\r\n             * Limit for dynamic ATH adjust.\r\n             */\r\n            this.adjustLimit = 0.;\r\n            /**\r\n             * Determined to lower x dB each second.\r\n             */\r\n            this.decay = 0.;\r\n            /**\r\n             * Lowest ATH value.\r\n             */\r\n            this.floor = 0.;\r\n            /**\r\n             * ATH for sfbs in long blocks.\r\n             */\r\n            this.l = new_float(Encoder.SBMAX_l);\r\n            /**\r\n             * ATH for sfbs in short blocks.\r\n             */\r\n            this.s = new_float(Encoder.SBMAX_s);\r\n            /**\r\n             * ATH for partitioned sfb21 in long blocks.\r\n             */\r\n            this.psfb21 = new_float(Encoder.PSFB21);\r\n            /**\r\n             * ATH for partitioned sfb12 in short blocks.\r\n             */\r\n            this.psfb12 = new_float(Encoder.PSFB12);\r\n            /**\r\n             * ATH for long block convolution bands.\r\n             */\r\n            this.cb_l = new_float(Encoder.CBANDS);\r\n            /**\r\n             * ATH for short block convolution bands.\r\n             */\r\n            this.cb_s = new_float(Encoder.CBANDS);\r\n            /**\r\n             * Equal loudness weights (based on ATH).\r\n             */\r\n            this.eql_w = new_float(Encoder.BLKSIZE / 2);\r\n        }\r\n\r\n\r\n        function LameGlobalFlags() {\r\n\r\n            this.class_id = 0;\r\n\r\n            /* input description */\r\n\r\n            /**\r\n             * number of samples. default=-1\r\n             */\r\n            this.num_samples = 0;\r\n            /**\r\n             * input number of channels. default=2\r\n             */\r\n            this.num_channels = 0;\r\n            /**\r\n             * input_samp_rate in Hz. default=44.1 kHz\r\n             */\r\n            this.in_samplerate = 0;\r\n            /**\r\n             * output_samp_rate. default: LAME picks best value at least not used for\r\n             * MP3 decoding: Remember 44.1 kHz MP3s and AC97\r\n             */\r\n            this.out_samplerate = 0;\r\n            /**\r\n             * scale input by this amount before encoding at least not used for MP3\r\n             * decoding\r\n             */\r\n            this.scale = 0.;\r\n            /**\r\n             * scale input of channel 0 (left) by this amount before encoding\r\n             */\r\n            this.scale_left = 0.;\r\n            /**\r\n             * scale input of channel 1 (right) by this amount before encoding\r\n             */\r\n            this.scale_right = 0.;\r\n\r\n            /* general control params */\r\n            /**\r\n             * collect data for a MP3 frame analyzer?\r\n             */\r\n            this.analysis = false;\r\n            /**\r\n             * add Xing VBR tag?\r\n             */\r\n            this.bWriteVbrTag = false;\r\n\r\n            /**\r\n             * use lame/mpglib to convert mp3 to wav\r\n             */\r\n            this.decode_only = false;\r\n            /**\r\n             * quality setting 0=best, 9=worst default=5\r\n             */\r\n            this.quality = 0;\r\n            /**\r\n             * see enum default = LAME picks best value\r\n             */\r\n            this.mode = MPEGMode.STEREO;\r\n            /**\r\n             * force M/S mode. requires mode=1\r\n             */\r\n            this.force_ms = false;\r\n            /**\r\n             * use free format? default=0\r\n             */\r\n            this.free_format = false;\r\n            /**\r\n             * find the RG value? default=0\r\n             */\r\n            this.findReplayGain = false;\r\n            /**\r\n             * decode on the fly? default=0\r\n             */\r\n            this.decode_on_the_fly = false;\r\n            /**\r\n             * 1 (default) writes ID3 tags, 0 not\r\n             */\r\n            this.write_id3tag_automatic = false;\r\n\r\n            /*\r\n             * set either brate>0 or compression_ratio>0, LAME will compute the value of\r\n             * the variable not set. Default is compression_ratio = 11.025\r\n             */\r\n            /**\r\n             * bitrate\r\n             */\r\n            this.brate = 0;\r\n            /**\r\n             * sizeof(wav file)/sizeof(mp3 file)\r\n             */\r\n            this.compression_ratio = 0.;\r\n\r\n            /* frame params */\r\n            /**\r\n             * mark as copyright. default=0\r\n             */\r\n            this.copyright = 0;\r\n            /**\r\n             * mark as original. default=1\r\n             */\r\n            this.original = 0;\r\n            /**\r\n             * the MP3 'private extension' bit. Meaningless\r\n             */\r\n            this.extension = 0;\r\n            /**\r\n             * Input PCM is emphased PCM (for instance from one of the rarely emphased\r\n             * CDs), it is STRONGLY not recommended to use this, because psycho does not\r\n             * take it into account, and last but not least many decoders don't care\r\n             * about these bits\r\n             */\r\n            this.emphasis = 0;\r\n            /**\r\n             * use 2 bytes per frame for a CRC checksum. default=0\r\n             */\r\n            this.error_protection = 0;\r\n            /**\r\n             * enforce ISO spec as much as possible\r\n             */\r\n            this.strict_ISO = false;\r\n\r\n            /**\r\n             * use bit reservoir?\r\n             */\r\n            this.disable_reservoir = false;\r\n\r\n            /* quantization/noise shaping */\r\n            this.quant_comp = 0;\r\n            this.quant_comp_short = 0;\r\n            this.experimentalY = false;\r\n            this.experimentalZ = 0;\r\n            this.exp_nspsytune = 0;\r\n\r\n            this.preset = 0;\r\n\r\n            /* VBR control */\r\n            this.VBR = null;\r\n            /**\r\n             * Range [0,...,1[\r\n             */\r\n            this.VBR_q_frac = 0.;\r\n            /**\r\n             * Range [0,...,9]\r\n             */\r\n            this.VBR_q = 0;\r\n            this.VBR_mean_bitrate_kbps = 0;\r\n            this.VBR_min_bitrate_kbps = 0;\r\n            this.VBR_max_bitrate_kbps = 0;\r\n            /**\r\n             * strictly enforce VBR_min_bitrate normaly, it will be violated for analog\r\n             * silence\r\n             */\r\n            this.VBR_hard_min = 0;\r\n\r\n            /* resampling and filtering */\r\n\r\n            /**\r\n             * freq in Hz. 0=lame choses. -1=no filter\r\n             */\r\n            this.lowpassfreq = 0;\r\n            /**\r\n             * freq in Hz. 0=lame choses. -1=no filter\r\n             */\r\n            this.highpassfreq = 0;\r\n            /**\r\n             * freq width of filter, in Hz (default=15%)\r\n             */\r\n            this.lowpasswidth = 0;\r\n            /**\r\n             * freq width of filter, in Hz (default=15%)\r\n             */\r\n            this.highpasswidth = 0;\r\n\r\n            /*\r\n             * psycho acoustics and other arguments which you should not change unless\r\n             * you know what you are doing\r\n             */\r\n\r\n            this.maskingadjust = 0.;\r\n            this.maskingadjust_short = 0.;\r\n            /**\r\n             * only use ATH\r\n             */\r\n            this.ATHonly = false;\r\n            /**\r\n             * only use ATH for short blocks\r\n             */\r\n            this.ATHshort = false;\r\n            /**\r\n             * disable ATH\r\n             */\r\n            this.noATH = false;\r\n            /**\r\n             * select ATH formula\r\n             */\r\n            this.ATHtype = 0;\r\n            /**\r\n             * change ATH formula 4 shape\r\n             */\r\n            this.ATHcurve = 0.;\r\n            /**\r\n             * lower ATH by this many db\r\n             */\r\n            this.ATHlower = 0.;\r\n            /**\r\n             * select ATH auto-adjust scheme\r\n             */\r\n            this.athaa_type = 0;\r\n            /**\r\n             * select ATH auto-adjust loudness calc\r\n             */\r\n            this.athaa_loudapprox = 0;\r\n            /**\r\n             * dB, tune active region of auto-level\r\n             */\r\n            this.athaa_sensitivity = 0.;\r\n            this.short_blocks = null;\r\n            /**\r\n             * use temporal masking effect\r\n             */\r\n            this.useTemporal = false;\r\n            this.interChRatio = 0.;\r\n            /**\r\n             * Naoki's adjustment of Mid/Side maskings\r\n             */\r\n            this.msfix = 0.;\r\n\r\n            /**\r\n             * 0 off, 1 on\r\n             */\r\n            this.tune = false;\r\n            /**\r\n             * used to pass values for debugging and stuff\r\n             */\r\n            this.tune_value_a = 0.;\r\n\r\n            /************************************************************************/\r\n            /* internal variables, do not set... */\r\n            /* provided because they may be of use to calling application */\r\n            /************************************************************************/\r\n\r\n            /**\r\n             * 0=MPEG-2/2.5 1=MPEG-1\r\n             */\r\n            this.version = 0;\r\n            this.encoder_delay = 0;\r\n            /**\r\n             * number of samples of padding appended to input\r\n             */\r\n            this.encoder_padding = 0;\r\n            this.framesize = 0;\r\n            /**\r\n             * number of frames encoded\r\n             */\r\n            this.frameNum = 0;\r\n            /**\r\n             * is this struct owned by calling program or lame?\r\n             */\r\n            this.lame_allocated_gfp = 0;\r\n            /**************************************************************************/\r\n            /* more internal variables are stored in this structure: */\r\n            /**************************************************************************/\r\n            this.internal_flags = null;\r\n        }\r\n\r\n\r\n\r\n        function CBRNewIterationLoop(_quantize)  {\r\n            var quantize = _quantize;\r\n            this.quantize = quantize;\r\n            this.iteration_loop = function(gfp, pe, ms_ener_ratio, ratio) {\r\n                var gfc = gfp.internal_flags;\r\n                var l3_xmin = new_float(L3Side.SFBMAX);\r\n                var xrpow = new_float(576);\r\n                var targ_bits = new_int(2);\r\n                var mean_bits = 0, max_bits;\r\n                var l3_side = gfc.l3_side;\r\n\r\n                var mb = new MeanBits(mean_bits);\r\n                this.quantize.rv.ResvFrameBegin(gfp, mb);\r\n                mean_bits = mb.bits;\r\n\r\n                /* quantize! */\r\n                for (var gr = 0; gr < gfc.mode_gr; gr++) {\r\n\r\n                    /*\r\n                     * calculate needed bits\r\n                     */\r\n                    max_bits = this.quantize.qupvt.on_pe(gfp, pe, targ_bits, mean_bits,\r\n                        gr, gr);\r\n\r\n                    if (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\r\n                        this.quantize.ms_convert(gfc.l3_side, gr);\r\n                        this.quantize.qupvt.reduce_side(targ_bits, ms_ener_ratio[gr],\r\n                            mean_bits, max_bits);\r\n                    }\r\n\r\n                    for (var ch = 0; ch < gfc.channels_out; ch++) {\r\n                        var adjust, masking_lower_db;\r\n                        var cod_info = l3_side.tt[gr][ch];\r\n\r\n                        if (cod_info.block_type != Encoder.SHORT_TYPE) {\r\n                            // NORM, START or STOP type\r\n                            adjust = 0;\r\n                            masking_lower_db = gfc.PSY.mask_adjust - adjust;\r\n                        } else {\r\n                            adjust = 0;\r\n                            masking_lower_db = gfc.PSY.mask_adjust_short - adjust;\r\n                        }\r\n                        gfc.masking_lower =  Math.pow(10.0,\r\n                            masking_lower_db * 0.1);\r\n\r\n                        /*\r\n                         * init_outer_loop sets up cod_info, scalefac and xrpow\r\n                         */\r\n                        this.quantize.init_outer_loop(gfc, cod_info);\r\n                        if (this.quantize.init_xrpow(gfc, cod_info, xrpow)) {\r\n                            /*\r\n                             * xr contains energy we will have to encode calculate the\r\n                             * masking abilities find some good quantization in\r\n                             * outer_loop\r\n                             */\r\n                            this.quantize.qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info,\r\n                                l3_xmin);\r\n                            this.quantize.outer_loop(gfp, cod_info, l3_xmin, xrpow, ch,\r\n                                targ_bits[ch]);\r\n                        }\r\n\r\n                        this.quantize.iteration_finish_one(gfc, gr, ch);\r\n                    } /* for ch */\r\n                } /* for gr */\r\n\r\n                this.quantize.rv.ResvFrameEnd(gfc, mean_bits);\r\n            }\r\n        }\r\n\r\n\r\n        function ReplayGain() {\r\n            this.linprebuf = new_float(GainAnalysis.MAX_ORDER * 2);\r\n            /**\r\n             * left input samples, with pre-buffer\r\n             */\r\n            this.linpre = 0;\r\n            this.lstepbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\r\n            /**\r\n             * left \"first step\" (i.e. post first filter) samples\r\n             */\r\n            this.lstep = 0;\r\n            this.loutbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\r\n            /**\r\n             * left \"out\" (i.e. post second filter) samples\r\n             */\r\n            this.lout = 0;\r\n            this.rinprebuf = new_float(GainAnalysis.MAX_ORDER * 2);\r\n            /**\r\n             * right input samples ...\r\n             */\r\n            this.rinpre = 0;\r\n            this.rstepbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\r\n            this.rstep = 0;\r\n            this.routbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\r\n            this.rout = 0;\r\n            /**\r\n             * number of samples required to reach number of milliseconds required\r\n             * for RMS window\r\n             */\r\n            this.sampleWindow = 0;\r\n            this.totsamp = 0;\r\n            this.lsum = 0.;\r\n            this.rsum = 0.;\r\n            this.freqindex = 0;\r\n            this.first = 0;\r\n            this.A = new_int(0 | (GainAnalysis.STEPS_per_dB * GainAnalysis.MAX_dB));\r\n            this.B = new_int(0 | (GainAnalysis.STEPS_per_dB * GainAnalysis.MAX_dB));\r\n\r\n        }\r\n\r\n//package mp3;\r\n\r\n        /**\r\n         * Layer III side information.\r\n         *\r\n         * @author Ken\r\n         *\r\n         */\r\n\r\n\r\n\r\n        function ScaleFac(arrL, arrS, arr21, arr12) {\r\n\r\n            this.l = new_int(1 + Encoder.SBMAX_l);\r\n            this.s = new_int(1 + Encoder.SBMAX_s);\r\n            this.psfb21 = new_int(1 + Encoder.PSFB21);\r\n            this.psfb12 = new_int(1 + Encoder.PSFB12);\r\n            var l = this.l;\r\n            var s = this.s;\r\n\r\n            if (arguments.length == 4) {\r\n                //public ScaleFac(final int[] arrL, final int[] arrS, final int[] arr21,\r\n                //    final int[] arr12) {\r\n                this.arrL = arguments[0];\r\n                this.arrS = arguments[1];\r\n                this.arr21 = arguments[2];\r\n                this.arr12 = arguments[3];\r\n\r\n                System.arraycopy(this.arrL, 0, l, 0, Math.min(this.arrL.length, this.l.length));\r\n                System.arraycopy(this.arrS, 0, s, 0, Math.min(this.arrS.length, this.s.length));\r\n                System.arraycopy(this.arr21, 0, this.psfb21, 0, Math.min(this.arr21.length, this.psfb21.length));\r\n                System.arraycopy(this.arr12, 0, this.psfb12, 0, Math.min(this.arr12.length, this.psfb12.length));\r\n            }\r\n        }\r\n\r\n        /*\r\n         *      quantize_pvt source file\r\n         *\r\n         *      Copyright (c) 1999-2002 Takehiro Tominaga\r\n         *      Copyright (c) 2000-2002 Robert Hegemann\r\n         *      Copyright (c) 2001 Naoki Shibata\r\n         *      Copyright (c) 2002-2005 Gabriel Bouvigne\r\n         *\r\n         * This library is free software; you can redistribute it and/or\r\n         * modify it under the terms of the GNU Lesser General Public\r\n         * License as published by the Free Software Foundation; either\r\n         * version 2 of the License, or (at your option) any later version.\r\n         *\r\n         * This library is distributed in the hope that it will be useful,\r\n         * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n         * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n         * Library General Public License for more details.\r\n         *\r\n         * You should have received a copy of the GNU Lesser General Public\r\n         * License along with this library; if not, write to the\r\n         * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\r\n         * Boston, MA 02111-1307, USA.\r\n         */\r\n\r\n        /* $Id: QuantizePVT.java,v 1.24 2011/05/24 20:48:06 kenchis Exp $ */\r\n\r\n\r\n        QuantizePVT.Q_MAX = (256 + 1);\r\n        QuantizePVT.Q_MAX2 = 116;\r\n        QuantizePVT.LARGE_BITS = 100000;\r\n        QuantizePVT.IXMAX_VAL = 8206;\r\n\r\n        function QuantizePVT() {\r\n\r\n            var tak = null;\r\n            var rv = null;\r\n            var psy = null;\r\n\r\n            this.setModules = function (_tk, _rv, _psy) {\r\n                tak = _tk;\r\n                rv = _rv;\r\n                psy = _psy;\r\n            };\r\n\r\n            function POW20(x) {\r\n                return pow20[x + QuantizePVT.Q_MAX2];\r\n            }\r\n\r\n            this.IPOW20 = function (x) {\r\n                return ipow20[x];\r\n            }\r\n\r\n            /**\r\n             * smallest such that 1.0+DBL_EPSILON != 1.0\r\n             */\r\n            var DBL_EPSILON = 2.2204460492503131e-016;\r\n\r\n            /**\r\n             * ix always <= 8191+15. see count_bits()\r\n             */\r\n            var IXMAX_VAL = QuantizePVT.IXMAX_VAL;\r\n\r\n            var PRECALC_SIZE = (IXMAX_VAL + 2);\r\n\r\n            var Q_MAX = QuantizePVT.Q_MAX;\r\n\r\n\r\n            /**\r\n             * <CODE>\r\n             * minimum possible number of\r\n             * -cod_info.global_gain + ((scalefac[] + (cod_info.preflag ? pretab[sfb] : 0))\r\n             * << (cod_info.scalefac_scale + 1)) + cod_info.subblock_gain[cod_info.window[sfb]] * 8;\r\n             *\r\n             * for long block, 0+((15+3)<<2) = 18*4 = 72\r\n             * for short block, 0+(15<<2)+7*8 = 15*4+56 = 116\r\n             * </CODE>\r\n             */\r\n            var Q_MAX2 = QuantizePVT.Q_MAX2;\r\n\r\n            var LARGE_BITS = QuantizePVT.LARGE_BITS;\r\n\r\n\r\n            /**\r\n             * Assuming dynamic range=96dB, this value should be 92\r\n             */\r\n            var NSATHSCALE = 100;\r\n\r\n            /**\r\n             * The following table is used to implement the scalefactor partitioning for\r\n             * MPEG2 as described in section 2.4.3.2 of the IS. The indexing corresponds\r\n             * to the way the tables are presented in the IS:\r\n             *\r\n             * [table_number][row_in_table][column of nr_of_sfb]\r\n             */\r\n            this.nr_of_sfb_block = [\r\n                [[6, 5, 5, 5], [9, 9, 9, 9], [6, 9, 9, 9]],\r\n                [[6, 5, 7, 3], [9, 9, 12, 6], [6, 9, 12, 6]],\r\n                [[11, 10, 0, 0], [18, 18, 0, 0], [15, 18, 0, 0]],\r\n                [[7, 7, 7, 0], [12, 12, 12, 0], [6, 15, 12, 0]],\r\n                [[6, 6, 6, 3], [12, 9, 9, 6], [6, 12, 9, 6]],\r\n                [[8, 8, 5, 0], [15, 12, 9, 0], [6, 18, 9, 0]]];\r\n\r\n            /**\r\n             * Table B.6: layer3 preemphasis\r\n             */\r\n            var pretab = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,\r\n                2, 2, 3, 3, 3, 2, 0];\r\n            this.pretab = pretab;\r\n\r\n            /**\r\n             * Here are MPEG1 Table B.8 and MPEG2 Table B.1 -- Layer III scalefactor\r\n             * bands. <BR>\r\n             * Index into this using a method such as:<BR>\r\n             * idx = fr_ps.header.sampling_frequency + (fr_ps.header.version * 3)\r\n             */\r\n            this.sfBandIndex = [\r\n                // Table B.2.b: 22.05 kHz\r\n                new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\r\n                        522, 576],\r\n                    [0, 4, 8, 12, 18, 24, 32, 42, 56, 74, 100, 132, 174, 192]\r\n                    , [0, 0, 0, 0, 0, 0, 0] //  sfb21 pseudo sub bands\r\n                    , [0, 0, 0, 0, 0, 0, 0] //  sfb12 pseudo sub bands\r\n                ),\r\n                /* Table B.2.c: 24 kHz */ /* docs: 332. mpg123(broken): 330 */\r\n                new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 114, 136, 162, 194, 232, 278, 332, 394, 464,\r\n                        540, 576],\r\n                    [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 136, 180, 192]\r\n                    , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\r\n                    , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\r\n                ),\r\n                /* Table B.2.a: 16 kHz */\r\n                new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\r\n                        522, 576],\r\n                    [0, 4, 8, 12, 18, 26, 36, 48, 62, 80, 104, 134, 174, 192]\r\n                    , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\r\n                    , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\r\n                ),\r\n                /* Table B.8.b: 44.1 kHz */\r\n                new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 52, 62, 74, 90, 110, 134, 162, 196, 238, 288, 342, 418,\r\n                        576],\r\n                    [0, 4, 8, 12, 16, 22, 30, 40, 52, 66, 84, 106, 136, 192]\r\n                    , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\r\n                    , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\r\n                ),\r\n                /* Table B.8.c: 48 kHz */\r\n                new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 42, 50, 60, 72, 88, 106, 128, 156, 190, 230, 276, 330, 384,\r\n                        576],\r\n                    [0, 4, 8, 12, 16, 22, 28, 38, 50, 64, 80, 100, 126, 192]\r\n                    , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\r\n                    , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\r\n                ),\r\n                /* Table B.8.a: 32 kHz */\r\n                new ScaleFac([0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 54, 66, 82, 102, 126, 156, 194, 240, 296, 364, 448, 550,\r\n                        576],\r\n                    [0, 4, 8, 12, 16, 22, 30, 42, 58, 78, 104, 138, 180, 192]\r\n                    , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\r\n                    , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\r\n                ),\r\n                /* MPEG-2.5 11.025 kHz */\r\n                new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\r\n                        522, 576],\r\n                    [0 / 3, 12 / 3, 24 / 3, 36 / 3, 54 / 3, 78 / 3, 108 / 3, 144 / 3, 186 / 3, 240 / 3, 312 / 3,\r\n                        402 / 3, 522 / 3, 576 / 3]\r\n                    , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\r\n                    , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\r\n                ),\r\n                /* MPEG-2.5 12 kHz */\r\n                new ScaleFac([0, 6, 12, 18, 24, 30, 36, 44, 54, 66, 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464,\r\n                        522, 576],\r\n                    [0 / 3, 12 / 3, 24 / 3, 36 / 3, 54 / 3, 78 / 3, 108 / 3, 144 / 3, 186 / 3, 240 / 3, 312 / 3,\r\n                        402 / 3, 522 / 3, 576 / 3]\r\n                    , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\r\n                    , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\r\n                ),\r\n                /* MPEG-2.5 8 kHz */\r\n                new ScaleFac([0, 12, 24, 36, 48, 60, 72, 88, 108, 132, 160, 192, 232, 280, 336, 400, 476, 566, 568, 570,\r\n                        572, 574, 576],\r\n                    [0 / 3, 24 / 3, 48 / 3, 72 / 3, 108 / 3, 156 / 3, 216 / 3, 288 / 3, 372 / 3, 480 / 3, 486 / 3,\r\n                        492 / 3, 498 / 3, 576 / 3]\r\n                    , [0, 0, 0, 0, 0, 0, 0] /*  sfb21 pseudo sub bands */\r\n                    , [0, 0, 0, 0, 0, 0, 0] /*  sfb12 pseudo sub bands */\r\n                )\r\n            ];\r\n\r\n            var pow20 = new_float(Q_MAX + Q_MAX2 + 1);\r\n            var ipow20 = new_float(Q_MAX);\r\n            var pow43 = new_float(PRECALC_SIZE);\r\n\r\n            var adj43 = new_float(PRECALC_SIZE);\r\n            this.adj43 = adj43;\r\n\r\n            /**\r\n             * <PRE>\r\n             * compute the ATH for each scalefactor band cd range: 0..96db\r\n             *\r\n             * Input: 3.3kHz signal 32767 amplitude (3.3kHz is where ATH is smallest =\r\n             * -5db) longblocks: sfb=12 en0/bw=-11db max_en0 = 1.3db shortblocks: sfb=5\r\n             * -9db 0db\r\n             *\r\n             * Input: 1 1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 (repeated) longblocks: amp=1\r\n             * sfb=12 en0/bw=-103 db max_en0 = -92db amp=32767 sfb=12 -12 db -1.4db\r\n             *\r\n             * Input: 1 1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 (repeated) shortblocks: amp=1\r\n             * sfb=5 en0/bw= -99 -86 amp=32767 sfb=5 -9 db 4db\r\n             *\r\n             *\r\n             * MAX energy of largest wave at 3.3kHz = 1db AVE energy of largest wave at\r\n             * 3.3kHz = -11db Let's take AVE: -11db = maximum signal in sfb=12. Dynamic\r\n             * range of CD: 96db. Therefor energy of smallest audible wave in sfb=12 =\r\n             * -11 - 96 = -107db = ATH at 3.3kHz.\r\n             *\r\n             * ATH formula for this wave: -5db. To adjust to LAME scaling, we need ATH =\r\n             * ATH_formula - 103 (db) ATH = ATH * 2.5e-10 (ener)\r\n             * </PRE>\r\n             */\r\n            function ATHmdct(gfp, f) {\r\n                var ath = psy.ATHformula(f, gfp);\r\n\r\n                ath -= NSATHSCALE;\r\n\r\n                /* modify the MDCT scaling for the ATH and convert to energy */\r\n                ath = Math.pow(10.0, ath / 10.0 + gfp.ATHlower);\r\n                return ath;\r\n            }\r\n\r\n            function compute_ath(gfp) {\r\n                var ATH_l = gfp.internal_flags.ATH.l;\r\n                var ATH_psfb21 = gfp.internal_flags.ATH.psfb21;\r\n                var ATH_s = gfp.internal_flags.ATH.s;\r\n                var ATH_psfb12 = gfp.internal_flags.ATH.psfb12;\r\n                var gfc = gfp.internal_flags;\r\n                var samp_freq = gfp.out_samplerate;\r\n\r\n                for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\r\n                    var start = gfc.scalefac_band.l[sfb];\r\n                    var end = gfc.scalefac_band.l[sfb + 1];\r\n                    ATH_l[sfb] = Float.MAX_VALUE;\r\n                    for (var i = start; i < end; i++) {\r\n                        var freq = i * samp_freq / (2 * 576);\r\n                        var ATH_f = ATHmdct(gfp, freq);\r\n                        /* freq in kHz */\r\n                        ATH_l[sfb] = Math.min(ATH_l[sfb], ATH_f);\r\n                    }\r\n                }\r\n\r\n                for (var sfb = 0; sfb < Encoder.PSFB21; sfb++) {\r\n                    var start = gfc.scalefac_band.psfb21[sfb];\r\n                    var end = gfc.scalefac_band.psfb21[sfb + 1];\r\n                    ATH_psfb21[sfb] = Float.MAX_VALUE;\r\n                    for (var i = start; i < end; i++) {\r\n                        var freq = i * samp_freq / (2 * 576);\r\n                        var ATH_f = ATHmdct(gfp, freq);\r\n                        /* freq in kHz */\r\n                        ATH_psfb21[sfb] = Math.min(ATH_psfb21[sfb], ATH_f);\r\n                    }\r\n                }\r\n\r\n                for (var sfb = 0; sfb < Encoder.SBMAX_s; sfb++) {\r\n                    var start = gfc.scalefac_band.s[sfb];\r\n                    var end = gfc.scalefac_band.s[sfb + 1];\r\n                    ATH_s[sfb] = Float.MAX_VALUE;\r\n                    for (var i = start; i < end; i++) {\r\n                        var freq = i * samp_freq / (2 * 192);\r\n                        var ATH_f = ATHmdct(gfp, freq);\r\n                        /* freq in kHz */\r\n                        ATH_s[sfb] = Math.min(ATH_s[sfb], ATH_f);\r\n                    }\r\n                    ATH_s[sfb] *= (gfc.scalefac_band.s[sfb + 1] - gfc.scalefac_band.s[sfb]);\r\n                }\r\n\r\n                for (var sfb = 0; sfb < Encoder.PSFB12; sfb++) {\r\n                    var start = gfc.scalefac_band.psfb12[sfb];\r\n                    var end = gfc.scalefac_band.psfb12[sfb + 1];\r\n                    ATH_psfb12[sfb] = Float.MAX_VALUE;\r\n                    for (var i = start; i < end; i++) {\r\n                        var freq = i * samp_freq / (2 * 192);\r\n                        var ATH_f = ATHmdct(gfp, freq);\r\n                        /* freq in kHz */\r\n                        ATH_psfb12[sfb] = Math.min(ATH_psfb12[sfb], ATH_f);\r\n                    }\r\n                    /* not sure about the following */\r\n                    ATH_psfb12[sfb] *= (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12]);\r\n                }\r\n\r\n                /*\r\n                 * no-ATH mode: reduce ATH to -200 dB\r\n                 */\r\n                if (gfp.noATH) {\r\n                    for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\r\n                        ATH_l[sfb] = 1E-20;\r\n                    }\r\n                    for (var sfb = 0; sfb < Encoder.PSFB21; sfb++) {\r\n                        ATH_psfb21[sfb] = 1E-20;\r\n                    }\r\n                    for (var sfb = 0; sfb < Encoder.SBMAX_s; sfb++) {\r\n                        ATH_s[sfb] = 1E-20;\r\n                    }\r\n                    for (var sfb = 0; sfb < Encoder.PSFB12; sfb++) {\r\n                        ATH_psfb12[sfb] = 1E-20;\r\n                    }\r\n                }\r\n\r\n                /*\r\n                 * work in progress, don't rely on it too much\r\n                 */\r\n                gfc.ATH.floor = 10. * Math.log10(ATHmdct(gfp, -1.));\r\n            }\r\n\r\n            /**\r\n             * initialization for iteration_loop\r\n             */\r\n            this.iteration_init = function (gfp) {\r\n                var gfc = gfp.internal_flags;\r\n                var l3_side = gfc.l3_side;\r\n                var i;\r\n\r\n                if (gfc.iteration_init_init == 0) {\r\n                    gfc.iteration_init_init = 1;\r\n\r\n                    l3_side.main_data_begin = 0;\r\n                    compute_ath(gfp);\r\n\r\n                    pow43[0] = 0.0;\r\n                    for (i = 1; i < PRECALC_SIZE; i++)\r\n                        pow43[i] = Math.pow(i, 4.0 / 3.0);\r\n\r\n                    for (i = 0; i < PRECALC_SIZE - 1; i++)\r\n                        adj43[i] = ((i + 1) - Math.pow(\r\n                            0.5 * (pow43[i] + pow43[i + 1]), 0.75));\r\n                    adj43[i] = 0.5;\r\n\r\n                    for (i = 0; i < Q_MAX; i++)\r\n                        ipow20[i] = Math.pow(2.0, (i - 210) * -0.1875);\r\n                    for (i = 0; i <= Q_MAX + Q_MAX2; i++)\r\n                        pow20[i] = Math.pow(2.0, (i - 210 - Q_MAX2) * 0.25);\r\n\r\n                    tak.huffman_init(gfc);\r\n\r\n                    {\r\n                        var bass, alto, treble, sfb21;\r\n\r\n                        i = (gfp.exp_nspsytune >> 2) & 63;\r\n                        if (i >= 32)\r\n                            i -= 64;\r\n                        bass = Math.pow(10, i / 4.0 / 10.0);\r\n\r\n                        i = (gfp.exp_nspsytune >> 8) & 63;\r\n                        if (i >= 32)\r\n                            i -= 64;\r\n                        alto = Math.pow(10, i / 4.0 / 10.0);\r\n\r\n                        i = (gfp.exp_nspsytune >> 14) & 63;\r\n                        if (i >= 32)\r\n                            i -= 64;\r\n                        treble = Math.pow(10, i / 4.0 / 10.0);\r\n\r\n                        /*\r\n                         * to be compatible with Naoki's original code, the next 6 bits\r\n                         * define only the amount of changing treble for sfb21\r\n                         */\r\n                        i = (gfp.exp_nspsytune >> 20) & 63;\r\n                        if (i >= 32)\r\n                            i -= 64;\r\n                        sfb21 = treble * Math.pow(10, i / 4.0 / 10.0);\r\n                        for (i = 0; i < Encoder.SBMAX_l; i++) {\r\n                            var f;\r\n                            if (i <= 6)\r\n                                f = bass;\r\n                            else if (i <= 13)\r\n                                f = alto;\r\n                            else if (i <= 20)\r\n                                f = treble;\r\n                            else\r\n                                f = sfb21;\r\n\r\n                            gfc.nsPsy.longfact[i] = f;\r\n                        }\r\n                        for (i = 0; i < Encoder.SBMAX_s; i++) {\r\n                            var f;\r\n                            if (i <= 5)\r\n                                f = bass;\r\n                            else if (i <= 10)\r\n                                f = alto;\r\n                            else if (i <= 11)\r\n                                f = treble;\r\n                            else\r\n                                f = sfb21;\r\n\r\n                            gfc.nsPsy.shortfact[i] = f;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * allocate bits among 2 channels based on PE<BR>\r\n             * mt 6/99<BR>\r\n             * bugfixes rh 8/01: often allocated more than the allowed 4095 bits\r\n             */\r\n            this.on_pe = function (gfp, pe,\r\n                                   targ_bits, mean_bits, gr, cbr) {\r\n                var gfc = gfp.internal_flags;\r\n                var tbits = 0, bits;\r\n                var add_bits = new_int(2);\r\n                var ch;\r\n\r\n                /* allocate targ_bits for granule */\r\n                var mb = new MeanBits(tbits);\r\n                var extra_bits = rv.ResvMaxBits(gfp, mean_bits, mb, cbr);\r\n                tbits = mb.bits;\r\n                /* maximum allowed bits for this granule */\r\n                var max_bits = tbits + extra_bits;\r\n                if (max_bits > LameInternalFlags.MAX_BITS_PER_GRANULE) {\r\n                    // hard limit per granule\r\n                    max_bits = LameInternalFlags.MAX_BITS_PER_GRANULE;\r\n                }\r\n                for (bits = 0, ch = 0; ch < gfc.channels_out; ++ch) {\r\n                    /******************************************************************\r\n                     * allocate bits for each channel\r\n                     ******************************************************************/\r\n                    targ_bits[ch] = Math.min(LameInternalFlags.MAX_BITS_PER_CHANNEL,\r\n                        tbits / gfc.channels_out);\r\n\r\n                    add_bits[ch] = 0 | (targ_bits[ch] * pe[gr][ch] / 700.0 - targ_bits[ch]);\r\n\r\n                    /* at most increase bits by 1.5*average */\r\n                    if (add_bits[ch] > mean_bits * 3 / 4)\r\n                        add_bits[ch] = mean_bits * 3 / 4;\r\n                    if (add_bits[ch] < 0)\r\n                        add_bits[ch] = 0;\r\n\r\n                    if (add_bits[ch] + targ_bits[ch] > LameInternalFlags.MAX_BITS_PER_CHANNEL)\r\n                        add_bits[ch] = Math.max(0,\r\n                            LameInternalFlags.MAX_BITS_PER_CHANNEL - targ_bits[ch]);\r\n\r\n                    bits += add_bits[ch];\r\n                }\r\n                if (bits > extra_bits) {\r\n                    for (ch = 0; ch < gfc.channels_out; ++ch) {\r\n                        add_bits[ch] = extra_bits * add_bits[ch] / bits;\r\n                    }\r\n                }\r\n\r\n                for (ch = 0; ch < gfc.channels_out; ++ch) {\r\n                    targ_bits[ch] += add_bits[ch];\r\n                    extra_bits -= add_bits[ch];\r\n                }\r\n\r\n                for (bits = 0, ch = 0; ch < gfc.channels_out; ++ch) {\r\n                    bits += targ_bits[ch];\r\n                }\r\n                if (bits > LameInternalFlags.MAX_BITS_PER_GRANULE) {\r\n                    var sum = 0;\r\n                    for (ch = 0; ch < gfc.channels_out; ++ch) {\r\n                        targ_bits[ch] *= LameInternalFlags.MAX_BITS_PER_GRANULE;\r\n                        targ_bits[ch] /= bits;\r\n                        sum += targ_bits[ch];\r\n                    }\r\n                }\r\n\r\n                return max_bits;\r\n            }\r\n\r\n            this.reduce_side = function (targ_bits, ms_ener_ratio, mean_bits, max_bits) {\r\n\r\n                /*\r\n                 * ms_ener_ratio = 0: allocate 66/33 mid/side fac=.33 ms_ener_ratio =.5:\r\n                 * allocate 50/50 mid/side fac= 0\r\n                 */\r\n                /* 75/25 split is fac=.5 */\r\n                var fac = .33 * (.5 - ms_ener_ratio) / .5;\r\n                if (fac < 0)\r\n                    fac = 0;\r\n                if (fac > .5)\r\n                    fac = .5;\r\n\r\n                /* number of bits to move from side channel to mid channel */\r\n                /* move_bits = fac*targ_bits[1]; */\r\n                var move_bits = 0 | (fac * .5 * (targ_bits[0] + targ_bits[1]));\r\n\r\n                if (move_bits > LameInternalFlags.MAX_BITS_PER_CHANNEL - targ_bits[0]) {\r\n                    move_bits = LameInternalFlags.MAX_BITS_PER_CHANNEL - targ_bits[0];\r\n                }\r\n                if (move_bits < 0)\r\n                    move_bits = 0;\r\n\r\n                if (targ_bits[1] >= 125) {\r\n                    /* dont reduce side channel below 125 bits */\r\n                    if (targ_bits[1] - move_bits > 125) {\r\n\r\n                        /* if mid channel already has 2x more than average, dont bother */\r\n                        /* mean_bits = bits per granule (for both channels) */\r\n                        if (targ_bits[0] < mean_bits)\r\n                            targ_bits[0] += move_bits;\r\n                        targ_bits[1] -= move_bits;\r\n                    } else {\r\n                        targ_bits[0] += targ_bits[1] - 125;\r\n                        targ_bits[1] = 125;\r\n                    }\r\n                }\r\n\r\n                move_bits = targ_bits[0] + targ_bits[1];\r\n                if (move_bits > max_bits) {\r\n                    targ_bits[0] = (max_bits * targ_bits[0]) / move_bits;\r\n                    targ_bits[1] = (max_bits * targ_bits[1]) / move_bits;\r\n                }\r\n            };\r\n\r\n            /**\r\n             *  Robert Hegemann 2001-04-27:\r\n             *  this adjusts the ATH, keeping the original noise floor\r\n             *  affects the higher frequencies more than the lower ones\r\n             */\r\n            this.athAdjust = function (a, x, athFloor) {\r\n                /*\r\n                 * work in progress\r\n                 */\r\n                var o = 90.30873362;\r\n                var p = 94.82444863;\r\n                var u = Util.FAST_LOG10_X(x, 10.0);\r\n                var v = a * a;\r\n                var w = 0.0;\r\n                u -= athFloor;\r\n                /* undo scaling */\r\n                if (v > 1E-20)\r\n                    w = 1. + Util.FAST_LOG10_X(v, 10.0 / o);\r\n                if (w < 0)\r\n                    w = 0.;\r\n                u *= w;\r\n                u += athFloor + o - p;\r\n                /* redo scaling */\r\n\r\n                return Math.pow(10., 0.1 * u);\r\n            };\r\n\r\n            /**\r\n             * Calculate the allowed distortion for each scalefactor band, as determined\r\n             * by the psychoacoustic model. xmin(sb) = ratio(sb) * en(sb) / bw(sb)\r\n             *\r\n             * returns number of sfb's with energy > ATH\r\n             */\r\n            this.calc_xmin = function (gfp, ratio, cod_info, pxmin) {\r\n                var pxminPos = 0;\r\n                var gfc = gfp.internal_flags;\r\n                var gsfb, j = 0, ath_over = 0;\r\n                var ATH = gfc.ATH;\r\n                var xr = cod_info.xr;\r\n                var enable_athaa_fix = (gfp.VBR == VbrMode.vbr_mtrh) ? 1 : 0;\r\n                var masking_lower = gfc.masking_lower;\r\n\r\n                if (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) {\r\n                    /* was already done in PSY-Model */\r\n                    masking_lower = 1.0;\r\n                }\r\n\r\n                for (gsfb = 0; gsfb < cod_info.psy_lmax; gsfb++) {\r\n                    var en0, xmin;\r\n                    var rh1, rh2;\r\n                    var width, l;\r\n\r\n                    if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh)\r\n                        xmin = athAdjust(ATH.adjust, ATH.l[gsfb], ATH.floor);\r\n                    else\r\n                        xmin = ATH.adjust * ATH.l[gsfb];\r\n\r\n                    width = cod_info.width[gsfb];\r\n                    rh1 = xmin / width;\r\n                    rh2 = DBL_EPSILON;\r\n                    l = width >> 1;\r\n                    en0 = 0.0;\r\n                    do {\r\n                        var xa, xb;\r\n                        xa = xr[j] * xr[j];\r\n                        en0 += xa;\r\n                        rh2 += (xa < rh1) ? xa : rh1;\r\n                        j++;\r\n                        xb = xr[j] * xr[j];\r\n                        en0 += xb;\r\n                        rh2 += (xb < rh1) ? xb : rh1;\r\n                        j++;\r\n                    } while (--l > 0);\r\n                    if (en0 > xmin)\r\n                        ath_over++;\r\n\r\n                    if (gsfb == Encoder.SBPSY_l) {\r\n                        var x = xmin * gfc.nsPsy.longfact[gsfb];\r\n                        if (rh2 < x) {\r\n                            rh2 = x;\r\n                        }\r\n                    }\r\n                    if (enable_athaa_fix != 0) {\r\n                        xmin = rh2;\r\n                    }\r\n                    if (!gfp.ATHonly) {\r\n                        var e = ratio.en.l[gsfb];\r\n                        if (e > 0.0) {\r\n                            var x;\r\n                            x = en0 * ratio.thm.l[gsfb] * masking_lower / e;\r\n                            if (enable_athaa_fix != 0)\r\n                                x *= gfc.nsPsy.longfact[gsfb];\r\n                            if (xmin < x)\r\n                                xmin = x;\r\n                        }\r\n                    }\r\n                    if (enable_athaa_fix != 0)\r\n                        pxmin[pxminPos++] = xmin;\r\n                    else\r\n                        pxmin[pxminPos++] = xmin * gfc.nsPsy.longfact[gsfb];\r\n                }\r\n                /* end of long block loop */\r\n\r\n                /* use this function to determine the highest non-zero coeff */\r\n                var max_nonzero = 575;\r\n                if (cod_info.block_type != Encoder.SHORT_TYPE) {\r\n                    // NORM, START or STOP type, but not SHORT\r\n                    var k = 576;\r\n                    while (k-- != 0 && BitStream.EQ(xr[k], 0)) {\r\n                        max_nonzero = k;\r\n                    }\r\n                }\r\n                cod_info.max_nonzero_coeff = max_nonzero;\r\n\r\n                for (var sfb = cod_info.sfb_smin; gsfb < cod_info.psymax; sfb++, gsfb += 3) {\r\n                    var width, b;\r\n                    var tmpATH;\r\n                    if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh)\r\n                        tmpATH = athAdjust(ATH.adjust, ATH.s[sfb], ATH.floor);\r\n                    else\r\n                        tmpATH = ATH.adjust * ATH.s[sfb];\r\n\r\n                    width = cod_info.width[gsfb];\r\n                    for (b = 0; b < 3; b++) {\r\n                        var en0 = 0.0, xmin;\r\n                        var rh1, rh2;\r\n                        var l = width >> 1;\r\n\r\n                        rh1 = tmpATH / width;\r\n                        rh2 = DBL_EPSILON;\r\n                        do {\r\n                            var xa, xb;\r\n                            xa = xr[j] * xr[j];\r\n                            en0 += xa;\r\n                            rh2 += (xa < rh1) ? xa : rh1;\r\n                            j++;\r\n                            xb = xr[j] * xr[j];\r\n                            en0 += xb;\r\n                            rh2 += (xb < rh1) ? xb : rh1;\r\n                            j++;\r\n                        } while (--l > 0);\r\n                        if (en0 > tmpATH)\r\n                            ath_over++;\r\n                        if (sfb == Encoder.SBPSY_s) {\r\n                            var x = tmpATH * gfc.nsPsy.shortfact[sfb];\r\n                            if (rh2 < x) {\r\n                                rh2 = x;\r\n                            }\r\n                        }\r\n                        if (enable_athaa_fix != 0)\r\n                            xmin = rh2;\r\n                        else\r\n                            xmin = tmpATH;\r\n\r\n                        if (!gfp.ATHonly && !gfp.ATHshort) {\r\n                            var e = ratio.en.s[sfb][b];\r\n                            if (e > 0.0) {\r\n                                var x;\r\n                                x = en0 * ratio.thm.s[sfb][b] * masking_lower / e;\r\n                                if (enable_athaa_fix != 0)\r\n                                    x *= gfc.nsPsy.shortfact[sfb];\r\n                                if (xmin < x)\r\n                                    xmin = x;\r\n                            }\r\n                        }\r\n                        if (enable_athaa_fix != 0)\r\n                            pxmin[pxminPos++] = xmin;\r\n                        else\r\n                            pxmin[pxminPos++] = xmin * gfc.nsPsy.shortfact[sfb];\r\n                    }\r\n                    /* b */\r\n                    if (gfp.useTemporal) {\r\n                        if (pxmin[pxminPos - 3] > pxmin[pxminPos - 3 + 1])\r\n                            pxmin[pxminPos - 3 + 1] += (pxmin[pxminPos - 3] - pxmin[pxminPos - 3 + 1])\r\n                                * gfc.decay;\r\n                        if (pxmin[pxminPos - 3 + 1] > pxmin[pxminPos - 3 + 2])\r\n                            pxmin[pxminPos - 3 + 2] += (pxmin[pxminPos - 3 + 1] - pxmin[pxminPos - 3 + 2])\r\n                                * gfc.decay;\r\n                    }\r\n                }\r\n                /* end of short block sfb loop */\r\n\r\n                return ath_over;\r\n            };\r\n\r\n            function StartLine(j) {\r\n                this.s = j;\r\n            }\r\n\r\n            this.calc_noise_core = function (cod_info, startline, l, step) {\r\n                var noise = 0;\r\n                var j = startline.s;\r\n                var ix = cod_info.l3_enc;\r\n\r\n                if (j > cod_info.count1) {\r\n                    while ((l--) != 0) {\r\n                        var temp;\r\n                        temp = cod_info.xr[j];\r\n                        j++;\r\n                        noise += temp * temp;\r\n                        temp = cod_info.xr[j];\r\n                        j++;\r\n                        noise += temp * temp;\r\n                    }\r\n                } else if (j > cod_info.big_values) {\r\n                    var ix01 = new_float(2);\r\n                    ix01[0] = 0;\r\n                    ix01[1] = step;\r\n                    while ((l--) != 0) {\r\n                        var temp;\r\n                        temp = Math.abs(cod_info.xr[j]) - ix01[ix[j]];\r\n                        j++;\r\n                        noise += temp * temp;\r\n                        temp = Math.abs(cod_info.xr[j]) - ix01[ix[j]];\r\n                        j++;\r\n                        noise += temp * temp;\r\n                    }\r\n                } else {\r\n                    while ((l--) != 0) {\r\n                        var temp;\r\n                        temp = Math.abs(cod_info.xr[j]) - pow43[ix[j]] * step;\r\n                        j++;\r\n                        noise += temp * temp;\r\n                        temp = Math.abs(cod_info.xr[j]) - pow43[ix[j]] * step;\r\n                        j++;\r\n                        noise += temp * temp;\r\n                    }\r\n                }\r\n\r\n                startline.s = j;\r\n                return noise;\r\n            }\r\n\r\n            /**\r\n             * <PRE>\r\n             * -oo dB  =>  -1.00\r\n             * - 6 dB  =>  -0.97\r\n             * - 3 dB  =>  -0.80\r\n             * - 2 dB  =>  -0.64\r\n             * - 1 dB  =>  -0.38\r\n             *   0 dB  =>   0.00\r\n             * + 1 dB  =>  +0.49\r\n             * + 2 dB  =>  +1.06\r\n             * + 3 dB  =>  +1.68\r\n             * + 6 dB  =>  +3.69\r\n             * +10 dB  =>  +6.45\r\n             * </PRE>\r\n             */\r\n            this.calc_noise = function (cod_info, l3_xmin, distort, res, prev_noise) {\r\n                var distortPos = 0;\r\n                var l3_xminPos = 0;\r\n                var sfb, l, over = 0;\r\n                var over_noise_db = 0;\r\n                /* 0 dB relative to masking */\r\n                var tot_noise_db = 0;\r\n                /* -200 dB relative to masking */\r\n                var max_noise = -20.0;\r\n                var j = 0;\r\n                var scalefac = cod_info.scalefac;\r\n                var scalefacPos = 0;\r\n\r\n                res.over_SSD = 0;\r\n\r\n                for (sfb = 0; sfb < cod_info.psymax; sfb++) {\r\n                    var s = cod_info.global_gain\r\n                        - (((scalefac[scalefacPos++]) + (cod_info.preflag != 0 ? pretab[sfb]\r\n                            : 0)) << (cod_info.scalefac_scale + 1))\r\n                        - cod_info.subblock_gain[cod_info.window[sfb]] * 8;\r\n                    var noise = 0.0;\r\n\r\n                    if (prev_noise != null && (prev_noise.step[sfb] == s)) {\r\n\r\n                        /* use previously computed values */\r\n                        noise = prev_noise.noise[sfb];\r\n                        j += cod_info.width[sfb];\r\n                        distort[distortPos++] = noise / l3_xmin[l3_xminPos++];\r\n\r\n                        noise = prev_noise.noise_log[sfb];\r\n\r\n                    } else {\r\n                        var step = POW20(s);\r\n                        l = cod_info.width[sfb] >> 1;\r\n\r\n                        if ((j + cod_info.width[sfb]) > cod_info.max_nonzero_coeff) {\r\n                            var usefullsize;\r\n                            usefullsize = cod_info.max_nonzero_coeff - j + 1;\r\n\r\n                            if (usefullsize > 0)\r\n                                l = usefullsize >> 1;\r\n                            else\r\n                                l = 0;\r\n                        }\r\n\r\n                        var sl = new StartLine(j);\r\n                        noise = this.calc_noise_core(cod_info, sl, l, step);\r\n                        j = sl.s;\r\n\r\n                        if (prev_noise != null) {\r\n                            /* save noise values */\r\n                            prev_noise.step[sfb] = s;\r\n                            prev_noise.noise[sfb] = noise;\r\n                        }\r\n\r\n                        noise = distort[distortPos++] = noise / l3_xmin[l3_xminPos++];\r\n\r\n                        /* multiplying here is adding in dB, but can overflow */\r\n                        noise = Util.FAST_LOG10(Math.max(noise, 1E-20));\r\n\r\n                        if (prev_noise != null) {\r\n                            /* save noise values */\r\n                            prev_noise.noise_log[sfb] = noise;\r\n                        }\r\n                    }\r\n\r\n                    if (prev_noise != null) {\r\n                        /* save noise values */\r\n                        prev_noise.global_gain = cod_info.global_gain;\r\n                    }\r\n\r\n                    tot_noise_db += noise;\r\n\r\n                    if (noise > 0.0) {\r\n                        var tmp;\r\n\r\n                        tmp = Math.max(0 | (noise * 10 + .5), 1);\r\n                        res.over_SSD += tmp * tmp;\r\n\r\n                        over++;\r\n                        /* multiplying here is adding in dB -but can overflow */\r\n                        /* over_noise *= noise; */\r\n                        over_noise_db += noise;\r\n                    }\r\n                    max_noise = Math.max(max_noise, noise);\r\n\r\n                }\r\n\r\n                res.over_count = over;\r\n                res.tot_noise = tot_noise_db;\r\n                res.over_noise = over_noise_db;\r\n                res.max_noise = max_noise;\r\n\r\n                return over;\r\n            }\r\n\r\n            /**\r\n             * updates plotting data\r\n             *\r\n             * Mark Taylor 2000-??-??\r\n             *\r\n             * Robert Hegemann: moved noise/distortion calc into it\r\n             */\r\n            this.set_pinfo = function (gfp, cod_info, ratio, gr, ch) {\r\n                var gfc = gfp.internal_flags;\r\n                var sfb, sfb2;\r\n                var l;\r\n                var en0, en1;\r\n                var ifqstep = (cod_info.scalefac_scale == 0) ? .5 : 1.0;\r\n                var scalefac = cod_info.scalefac;\r\n\r\n                var l3_xmin = new_float(L3Side.SFBMAX);\r\n                var xfsf = new_float(L3Side.SFBMAX);\r\n                var noise = new CalcNoiseResult();\r\n\r\n                calc_xmin(gfp, ratio, cod_info, l3_xmin);\r\n                calc_noise(cod_info, l3_xmin, xfsf, noise, null);\r\n\r\n                var j = 0;\r\n                sfb2 = cod_info.sfb_lmax;\r\n                if (cod_info.block_type != Encoder.SHORT_TYPE\r\n                    && 0 == cod_info.mixed_block_flag)\r\n                    sfb2 = 22;\r\n                for (sfb = 0; sfb < sfb2; sfb++) {\r\n                    var start = gfc.scalefac_band.l[sfb];\r\n                    var end = gfc.scalefac_band.l[sfb + 1];\r\n                    var bw = end - start;\r\n                    for (en0 = 0.0; j < end; j++)\r\n                        en0 += cod_info.xr[j] * cod_info.xr[j];\r\n                    en0 /= bw;\r\n                    /* convert to MDCT units */\r\n                    /* scaling so it shows up on FFT plot */\r\n                    en1 = 1e15;\r\n                    gfc.pinfo.en[gr][ch][sfb] = en1 * en0;\r\n                    gfc.pinfo.xfsf[gr][ch][sfb] = en1 * l3_xmin[sfb] * xfsf[sfb] / bw;\r\n\r\n                    if (ratio.en.l[sfb] > 0 && !gfp.ATHonly)\r\n                        en0 = en0 / ratio.en.l[sfb];\r\n                    else\r\n                        en0 = 0.0;\r\n\r\n                    gfc.pinfo.thr[gr][ch][sfb] = en1\r\n                        * Math.max(en0 * ratio.thm.l[sfb], gfc.ATH.l[sfb]);\r\n\r\n                    /* there is no scalefactor bands >= SBPSY_l */\r\n                    gfc.pinfo.LAMEsfb[gr][ch][sfb] = 0;\r\n                    if (cod_info.preflag != 0 && sfb >= 11)\r\n                        gfc.pinfo.LAMEsfb[gr][ch][sfb] = -ifqstep * pretab[sfb];\r\n\r\n                    if (sfb < Encoder.SBPSY_l) {\r\n                        /* scfsi should be decoded by caller side */\r\n                        gfc.pinfo.LAMEsfb[gr][ch][sfb] -= ifqstep * scalefac[sfb];\r\n                    }\r\n                }\r\n                /* for sfb */\r\n\r\n                if (cod_info.block_type == Encoder.SHORT_TYPE) {\r\n                    sfb2 = sfb;\r\n                    for (sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\r\n                        var start = gfc.scalefac_band.s[sfb];\r\n                        var end = gfc.scalefac_band.s[sfb + 1];\r\n                        var bw = end - start;\r\n                        for (var i = 0; i < 3; i++) {\r\n                            for (en0 = 0.0, l = start; l < end; l++) {\r\n                                en0 += cod_info.xr[j] * cod_info.xr[j];\r\n                                j++;\r\n                            }\r\n                            en0 = Math.max(en0 / bw, 1e-20);\r\n                            /* convert to MDCT units */\r\n                            /* scaling so it shows up on FFT plot */\r\n                            en1 = 1e15;\r\n\r\n                            gfc.pinfo.en_s[gr][ch][3 * sfb + i] = en1 * en0;\r\n                            gfc.pinfo.xfsf_s[gr][ch][3 * sfb + i] = en1 * l3_xmin[sfb2]\r\n                                * xfsf[sfb2] / bw;\r\n                            if (ratio.en.s[sfb][i] > 0)\r\n                                en0 = en0 / ratio.en.s[sfb][i];\r\n                            else\r\n                                en0 = 0.0;\r\n                            if (gfp.ATHonly || gfp.ATHshort)\r\n                                en0 = 0;\r\n\r\n                            gfc.pinfo.thr_s[gr][ch][3 * sfb + i] = en1\r\n                                * Math.max(en0 * ratio.thm.s[sfb][i],\r\n                                    gfc.ATH.s[sfb]);\r\n\r\n                            /* there is no scalefactor bands >= SBPSY_s */\r\n                            gfc.pinfo.LAMEsfb_s[gr][ch][3 * sfb + i] = -2.0\r\n                                * cod_info.subblock_gain[i];\r\n                            if (sfb < Encoder.SBPSY_s) {\r\n                                gfc.pinfo.LAMEsfb_s[gr][ch][3 * sfb + i] -= ifqstep\r\n                                    * scalefac[sfb2];\r\n                            }\r\n                            sfb2++;\r\n                        }\r\n                    }\r\n                }\r\n                /* block type short */\r\n                gfc.pinfo.LAMEqss[gr][ch] = cod_info.global_gain;\r\n                gfc.pinfo.LAMEmainbits[gr][ch] = cod_info.part2_3_length\r\n                    + cod_info.part2_length;\r\n                gfc.pinfo.LAMEsfbits[gr][ch] = cod_info.part2_length;\r\n\r\n                gfc.pinfo.over[gr][ch] = noise.over_count;\r\n                gfc.pinfo.max_noise[gr][ch] = noise.max_noise * 10.0;\r\n                gfc.pinfo.over_noise[gr][ch] = noise.over_noise * 10.0;\r\n                gfc.pinfo.tot_noise[gr][ch] = noise.tot_noise * 10.0;\r\n                gfc.pinfo.over_SSD[gr][ch] = noise.over_SSD;\r\n            }\r\n\r\n            /**\r\n             * updates plotting data for a whole frame\r\n             *\r\n             * Robert Hegemann 2000-10-21\r\n             */\r\n            function set_frame_pinfo(gfp, ratio) {\r\n                var gfc = gfp.internal_flags;\r\n\r\n                gfc.masking_lower = 1.0;\r\n\r\n                /*\r\n                 * for every granule and channel patch l3_enc and set info\r\n                 */\r\n                for (var gr = 0; gr < gfc.mode_gr; gr++) {\r\n                    for (var ch = 0; ch < gfc.channels_out; ch++) {\r\n                        var cod_info = gfc.l3_side.tt[gr][ch];\r\n                        var scalefac_sav = new_int(L3Side.SFBMAX);\r\n                        System.arraycopy(cod_info.scalefac, 0, scalefac_sav, 0,\r\n                            scalefac_sav.length);\r\n\r\n                        /*\r\n                         * reconstruct the scalefactors in case SCFSI was used\r\n                         */\r\n                        if (gr == 1) {\r\n                            var sfb;\r\n                            for (sfb = 0; sfb < cod_info.sfb_lmax; sfb++) {\r\n                                if (cod_info.scalefac[sfb] < 0) /* scfsi */\r\n                                    cod_info.scalefac[sfb] = gfc.l3_side.tt[0][ch].scalefac[sfb];\r\n                            }\r\n                        }\r\n\r\n                        set_pinfo(gfp, cod_info, ratio[gr][ch], gr, ch);\r\n                        System.arraycopy(scalefac_sav, 0, cod_info.scalefac, 0,\r\n                            scalefac_sav.length);\r\n                    }\r\n                    /* for ch */\r\n                }\r\n                /* for gr */\r\n            }\r\n\r\n        }\r\n\r\n\r\n        function CalcNoiseData() {\r\n            this.global_gain = 0;\r\n            this.sfb_count1 = 0;\r\n            this.step = new_int(39);\r\n            this.noise = new_float(39);\r\n            this.noise_log = new_float(39);\r\n        }\r\n\r\n//package mp3;\r\n\r\n\r\n        function GrInfo() {\r\n            //float xr[] = new float[576];\r\n            this.xr = new_float(576);\r\n            //int l3_enc[] = new int[576];\r\n            this.l3_enc = new_int(576);\r\n            //int scalefac[] = new int[L3Side.SFBMAX];\r\n            this.scalefac = new_int(L3Side.SFBMAX);\r\n            this.xrpow_max = 0.;\r\n\r\n            this.part2_3_length = 0;\r\n            this.big_values = 0;\r\n            this.count1 = 0;\r\n            this.global_gain = 0;\r\n            this.scalefac_compress = 0;\r\n            this.block_type = 0;\r\n            this.mixed_block_flag = 0;\r\n            this.table_select = new_int(3);\r\n            this.subblock_gain = new_int(3 + 1);\r\n            this.region0_count = 0;\r\n            this.region1_count = 0;\r\n            this.preflag = 0;\r\n            this.scalefac_scale = 0;\r\n            this.count1table_select = 0;\r\n\r\n            this.part2_length = 0;\r\n            this.sfb_lmax = 0;\r\n            this.sfb_smin = 0;\r\n            this.psy_lmax = 0;\r\n            this.sfbmax = 0;\r\n            this.psymax = 0;\r\n            this.sfbdivide = 0;\r\n            this.width = new_int(L3Side.SFBMAX);\r\n            this.window = new_int(L3Side.SFBMAX);\r\n            this.count1bits = 0;\r\n            /**\r\n             * added for LSF\r\n             */\r\n            this.sfb_partition_table = null;\r\n            this.slen = new_int(4);\r\n\r\n            this.max_nonzero_coeff = 0;\r\n\r\n            var self = this;\r\n            function clone_int(array) {\r\n                return new Int32Array(array);\r\n            }\r\n            function clone_float(array) {\r\n                return new Float32Array(array);\r\n            }\r\n            this.assign = function (other) {\r\n                self.xr = clone_float(other.xr); //.slice(0); //clone();\r\n                self.l3_enc = clone_int(other.l3_enc); //.slice(0); //clone();\r\n                self.scalefac = clone_int(other.scalefac);//.slice(0); //clone();\r\n                self.xrpow_max = other.xrpow_max;\r\n\r\n                self.part2_3_length = other.part2_3_length;\r\n                self.big_values = other.big_values;\r\n                self.count1 = other.count1;\r\n                self.global_gain = other.global_gain;\r\n                self.scalefac_compress = other.scalefac_compress;\r\n                self.block_type = other.block_type;\r\n                self.mixed_block_flag = other.mixed_block_flag;\r\n                self.table_select = clone_int(other.table_select);//.slice(0); //clone();\r\n                self.subblock_gain = clone_int(other.subblock_gain); //.slice(0); //.clone();\r\n                self.region0_count = other.region0_count;\r\n                self.region1_count = other.region1_count;\r\n                self.preflag = other.preflag;\r\n                self.scalefac_scale = other.scalefac_scale;\r\n                self.count1table_select = other.count1table_select;\r\n\r\n                self.part2_length = other.part2_length;\r\n                self.sfb_lmax = other.sfb_lmax;\r\n                self.sfb_smin = other.sfb_smin;\r\n                self.psy_lmax = other.psy_lmax;\r\n                self.sfbmax = other.sfbmax;\r\n                self.psymax = other.psymax;\r\n                self.sfbdivide = other.sfbdivide;\r\n                self.width = clone_int(other.width); //.slice(0); //.clone();\r\n                self.window = clone_int(other.window); //.slice(0); //.clone();\r\n                self.count1bits = other.count1bits;\r\n\r\n                self.sfb_partition_table = other.sfb_partition_table.slice(0); //.clone();\r\n                self.slen = clone_int(other.slen); //.slice(0); //.clone();\r\n                self.max_nonzero_coeff = other.max_nonzero_coeff;\r\n            }\r\n        }\r\n\r\n\r\n        var L3Side = {};\r\n\r\n\r\n        /**\r\n         * max scalefactor band, max(SBMAX_l, SBMAX_s*3, (SBMAX_s-3)*3+8)\r\n         */\r\n        L3Side.SFBMAX = (Encoder.SBMAX_s * 3);\r\n\r\n        /*\r\n         * MP3 quantization\r\n         *\r\n         *      Copyright (c) 1999-2000 Mark Taylor\r\n         *      Copyright (c) 1999-2003 Takehiro Tominaga\r\n         *      Copyright (c) 2000-2007 Robert Hegemann\r\n         *      Copyright (c) 2001-2005 Gabriel Bouvigne\r\n         *\r\n         * This library is free software; you can redistribute it and/or\r\n         * modify it under the terms of the GNU Lesser General Public\r\n         * License as published by the Free Software Foundation; either\r\n         * version 2 of the License, or (at your option) any later version.\r\n         *\r\n         * This library is distributed in the hope that it will be useful,\r\n         * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n         * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.     See the GNU\r\n         * Library General Public License for more details.\r\n         *\r\n         * You should have received a copy of the GNU Lesser General Public\r\n         * License along with this library; if not, write to the\r\n         * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\r\n         * Boston, MA 02111-1307, USA.\r\n         */\r\n\r\n        /* $Id: Quantize.java,v 1.24 2011/05/24 20:48:06 kenchis Exp $ */\r\n\r\n//package mp3;\r\n\r\n//import java.util.Arrays;\r\n\r\n\r\n        function Quantize() {\r\n            var bs;\r\n            this.rv = null;\r\n            var rv;\r\n            this.qupvt = null;\r\n            var qupvt;\r\n\r\n            var vbr = new VBRQuantize();\r\n            var tk;\r\n\r\n            this.setModules = function (_bs, _rv, _qupvt, _tk) {\r\n                bs = _bs;\r\n                rv = _rv;\r\n                this.rv = _rv;\r\n                qupvt = _qupvt;\r\n                this.qupvt = _qupvt;\r\n                tk = _tk;\r\n                vbr.setModules(qupvt, tk);\r\n            }\r\n\r\n            /**\r\n             * convert from L/R <. Mid/Side\r\n             */\r\n            this.ms_convert = function (l3_side, gr) {\r\n                for (var i = 0; i < 576; ++i) {\r\n                    var l = l3_side.tt[gr][0].xr[i];\r\n                    var r = l3_side.tt[gr][1].xr[i];\r\n                    l3_side.tt[gr][0].xr[i] = (l + r) * (Util.SQRT2 * 0.5);\r\n                    l3_side.tt[gr][1].xr[i] = (l - r) * (Util.SQRT2 * 0.5);\r\n                }\r\n            };\r\n\r\n            /**\r\n             * mt 6/99\r\n             *\r\n             * initializes cod_info, scalefac and xrpow\r\n             *\r\n             * returns 0 if all energies in xr are zero, else 1\r\n             */\r\n            function init_xrpow_core(cod_info, xrpow, upper, sum) {\r\n                sum = 0;\r\n                for (var i = 0; i <= upper; ++i) {\r\n                    var tmp = Math.abs(cod_info.xr[i]);\r\n                    sum += tmp;\r\n                    xrpow[i] = Math.sqrt(tmp * Math.sqrt(tmp));\r\n\r\n                    if (xrpow[i] > cod_info.xrpow_max)\r\n                        cod_info.xrpow_max = xrpow[i];\r\n                }\r\n                return sum;\r\n            }\r\n\r\n            this.init_xrpow = function (gfc, cod_info, xrpow) {\r\n                var sum = 0;\r\n                var upper = 0 | cod_info.max_nonzero_coeff;\r\n\r\n                cod_info.xrpow_max = 0;\r\n\r\n                /*\r\n                 * check if there is some energy we have to quantize and calculate xrpow\r\n                 * matching our fresh scalefactors\r\n                 */\r\n\r\n                Arrays.fill(xrpow, upper, 576, 0);\r\n\r\n                sum = init_xrpow_core(cod_info, xrpow, upper, sum);\r\n\r\n                /*\r\n                 * return 1 if we have something to quantize, else 0\r\n                 */\r\n                if (sum > 1E-20) {\r\n                    var j = 0;\r\n                    if ((gfc.substep_shaping & 2) != 0)\r\n                        j = 1;\r\n\r\n                    for (var i = 0; i < cod_info.psymax; i++)\r\n                        gfc.pseudohalf[i] = j;\r\n\r\n                    return true;\r\n                }\r\n\r\n                Arrays.fill(cod_info.l3_enc, 0, 576, 0);\r\n                return false;\r\n            }\r\n\r\n            /**\r\n             * Gabriel Bouvigne feb/apr 2003<BR>\r\n             * Analog silence detection in partitionned sfb21 or sfb12 for short blocks\r\n             *\r\n             * From top to bottom of sfb, changes to 0 coeffs which are below ath. It\r\n             * stops on the first coeff higher than ath.\r\n             */\r\n            function psfb21_analogsilence(gfc, cod_info) {\r\n                var ath = gfc.ATH;\r\n                var xr = cod_info.xr;\r\n\r\n                if (cod_info.block_type != Encoder.SHORT_TYPE) {\r\n                    /* NORM, START or STOP type, but not SHORT blocks */\r\n                    var stop = false;\r\n                    for (var gsfb = Encoder.PSFB21 - 1; gsfb >= 0 && !stop; gsfb--) {\r\n                        var start = gfc.scalefac_band.psfb21[gsfb];\r\n                        var end = gfc.scalefac_band.psfb21[gsfb + 1];\r\n                        var ath21 = qupvt.athAdjust(ath.adjust, ath.psfb21[gsfb],\r\n                            ath.floor);\r\n\r\n                        if (gfc.nsPsy.longfact[21] > 1e-12)\r\n                            ath21 *= gfc.nsPsy.longfact[21];\r\n\r\n                        for (var j = end - 1; j >= start; j--) {\r\n                            if (Math.abs(xr[j]) < ath21)\r\n                                xr[j] = 0;\r\n                            else {\r\n                                stop = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    /* note: short blocks coeffs are reordered */\r\n                    for (var block = 0; block < 3; block++) {\r\n                        var stop = false;\r\n                        for (var gsfb = Encoder.PSFB12 - 1; gsfb >= 0 && !stop; gsfb--) {\r\n                            var start = gfc.scalefac_band.s[12]\r\n                                * 3\r\n                                + (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12])\r\n                                * block\r\n                                + (gfc.scalefac_band.psfb12[gsfb] - gfc.scalefac_band.psfb12[0]);\r\n                            var end = start\r\n                                + (gfc.scalefac_band.psfb12[gsfb + 1] - gfc.scalefac_band.psfb12[gsfb]);\r\n                            var ath12 = qupvt.athAdjust(ath.adjust, ath.psfb12[gsfb],\r\n                                ath.floor);\r\n\r\n                            if (gfc.nsPsy.shortfact[12] > 1e-12)\r\n                                ath12 *= gfc.nsPsy.shortfact[12];\r\n\r\n                            for (var j = end - 1; j >= start; j--) {\r\n                                if (Math.abs(xr[j]) < ath12)\r\n                                    xr[j] = 0;\r\n                                else {\r\n                                    stop = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            this.init_outer_loop = function (gfc, cod_info) {\r\n                /*\r\n                 * initialize fresh cod_info\r\n                 */\r\n                cod_info.part2_3_length = 0;\r\n                cod_info.big_values = 0;\r\n                cod_info.count1 = 0;\r\n                cod_info.global_gain = 210;\r\n                cod_info.scalefac_compress = 0;\r\n                /* mixed_block_flag, block_type was set in psymodel.c */\r\n                cod_info.table_select[0] = 0;\r\n                cod_info.table_select[1] = 0;\r\n                cod_info.table_select[2] = 0;\r\n                cod_info.subblock_gain[0] = 0;\r\n                cod_info.subblock_gain[1] = 0;\r\n                cod_info.subblock_gain[2] = 0;\r\n                cod_info.subblock_gain[3] = 0;\r\n                /* this one is always 0 */\r\n                cod_info.region0_count = 0;\r\n                cod_info.region1_count = 0;\r\n                cod_info.preflag = 0;\r\n                cod_info.scalefac_scale = 0;\r\n                cod_info.count1table_select = 0;\r\n                cod_info.part2_length = 0;\r\n                cod_info.sfb_lmax = Encoder.SBPSY_l;\r\n                cod_info.sfb_smin = Encoder.SBPSY_s;\r\n                cod_info.psy_lmax = gfc.sfb21_extra ? Encoder.SBMAX_l : Encoder.SBPSY_l;\r\n                cod_info.psymax = cod_info.psy_lmax;\r\n                cod_info.sfbmax = cod_info.sfb_lmax;\r\n                cod_info.sfbdivide = 11;\r\n                for (var sfb = 0; sfb < Encoder.SBMAX_l; sfb++) {\r\n                    cod_info.width[sfb] = gfc.scalefac_band.l[sfb + 1]\r\n                        - gfc.scalefac_band.l[sfb];\r\n                    /* which is always 0. */\r\n                    cod_info.window[sfb] = 3;\r\n                }\r\n                if (cod_info.block_type == Encoder.SHORT_TYPE) {\r\n                    var ixwork = new_float(576);\r\n\r\n                    cod_info.sfb_smin = 0;\r\n                    cod_info.sfb_lmax = 0;\r\n                    if (cod_info.mixed_block_flag != 0) {\r\n                        /*\r\n                         * MPEG-1: sfbs 0-7 long block, 3-12 short blocks MPEG-2(.5):\r\n                         * sfbs 0-5 long block, 3-12 short blocks\r\n                         */\r\n                        cod_info.sfb_smin = 3;\r\n                        cod_info.sfb_lmax = gfc.mode_gr * 2 + 4;\r\n                    }\r\n                    cod_info.psymax = cod_info.sfb_lmax\r\n                        + 3\r\n                        * ((gfc.sfb21_extra ? Encoder.SBMAX_s : Encoder.SBPSY_s) - cod_info.sfb_smin);\r\n                    cod_info.sfbmax = cod_info.sfb_lmax + 3\r\n                        * (Encoder.SBPSY_s - cod_info.sfb_smin);\r\n                    cod_info.sfbdivide = cod_info.sfbmax - 18;\r\n                    cod_info.psy_lmax = cod_info.sfb_lmax;\r\n                    /* re-order the short blocks, for more efficient encoding below */\r\n                    /* By Takehiro TOMINAGA */\r\n                    /*\r\n                     * Within each scalefactor band, data is given for successive time\r\n                     * windows, beginning with window 0 and ending with window 2. Within\r\n                     * each window, the quantized values are then arranged in order of\r\n                     * increasing frequency...\r\n                     */\r\n                    var ix = gfc.scalefac_band.l[cod_info.sfb_lmax];\r\n                    System.arraycopy(cod_info.xr, 0, ixwork, 0, 576);\r\n                    for (var sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\r\n                        var start = gfc.scalefac_band.s[sfb];\r\n                        var end = gfc.scalefac_band.s[sfb + 1];\r\n                        for (var window = 0; window < 3; window++) {\r\n                            for (var l = start; l < end; l++) {\r\n                                cod_info.xr[ix++] = ixwork[3 * l + window];\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    var j = cod_info.sfb_lmax;\r\n                    for (var sfb = cod_info.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\r\n                        cod_info.width[j] = cod_info.width[j + 1] = cod_info.width[j + 2] = gfc.scalefac_band.s[sfb + 1]\r\n                            - gfc.scalefac_band.s[sfb];\r\n                        cod_info.window[j] = 0;\r\n                        cod_info.window[j + 1] = 1;\r\n                        cod_info.window[j + 2] = 2;\r\n                        j += 3;\r\n                    }\r\n                }\r\n\r\n                cod_info.count1bits = 0;\r\n                cod_info.sfb_partition_table = qupvt.nr_of_sfb_block[0][0];\r\n                cod_info.slen[0] = 0;\r\n                cod_info.slen[1] = 0;\r\n                cod_info.slen[2] = 0;\r\n                cod_info.slen[3] = 0;\r\n\r\n                cod_info.max_nonzero_coeff = 575;\r\n\r\n                /*\r\n                 * fresh scalefactors are all zero\r\n                 */\r\n                Arrays.fill(cod_info.scalefac, 0);\r\n\r\n                psfb21_analogsilence(gfc, cod_info);\r\n            };\r\n\r\n            function BinSearchDirection(ordinal) {\r\n                this.ordinal = ordinal;\r\n            }\r\n\r\n            BinSearchDirection.BINSEARCH_NONE = new BinSearchDirection(0);\r\n            BinSearchDirection.BINSEARCH_UP = new BinSearchDirection(1);\r\n            BinSearchDirection.BINSEARCH_DOWN = new BinSearchDirection(2);\r\n\r\n            /**\r\n             * author/date??\r\n             *\r\n             * binary step size search used by outer_loop to get a quantizer step size\r\n             * to start with\r\n             */\r\n            function bin_search_StepSize(gfc, cod_info, desired_rate, ch, xrpow) {\r\n                var nBits;\r\n                var CurrentStep = gfc.CurrentStep[ch];\r\n                var flagGoneOver = false;\r\n                var start = gfc.OldValue[ch];\r\n                var Direction = BinSearchDirection.BINSEARCH_NONE;\r\n                cod_info.global_gain = start;\r\n                desired_rate -= cod_info.part2_length;\r\n\r\n                for (; ;) {\r\n                    var step;\r\n                    nBits = tk.count_bits(gfc, xrpow, cod_info, null);\r\n\r\n                    if (CurrentStep == 1 || nBits == desired_rate)\r\n                        break;\r\n                    /* nothing to adjust anymore */\r\n\r\n                    if (nBits > desired_rate) {\r\n                        /* increase Quantize_StepSize */\r\n                        if (Direction == BinSearchDirection.BINSEARCH_DOWN)\r\n                            flagGoneOver = true;\r\n\r\n                        if (flagGoneOver)\r\n                            CurrentStep /= 2;\r\n                        Direction = BinSearchDirection.BINSEARCH_UP;\r\n                        step = CurrentStep;\r\n                    } else {\r\n                        /* decrease Quantize_StepSize */\r\n                        if (Direction == BinSearchDirection.BINSEARCH_UP)\r\n                            flagGoneOver = true;\r\n\r\n                        if (flagGoneOver)\r\n                            CurrentStep /= 2;\r\n                        Direction = BinSearchDirection.BINSEARCH_DOWN;\r\n                        step = -CurrentStep;\r\n                    }\r\n                    cod_info.global_gain += step;\r\n                    if (cod_info.global_gain < 0) {\r\n                        cod_info.global_gain = 0;\r\n                        flagGoneOver = true;\r\n                    }\r\n                    if (cod_info.global_gain > 255) {\r\n                        cod_info.global_gain = 255;\r\n                        flagGoneOver = true;\r\n                    }\r\n                }\r\n\r\n\r\n                while (nBits > desired_rate && cod_info.global_gain < 255) {\r\n                    cod_info.global_gain++;\r\n                    nBits = tk.count_bits(gfc, xrpow, cod_info, null);\r\n                }\r\n                gfc.CurrentStep[ch] = (start - cod_info.global_gain >= 4) ? 4 : 2;\r\n                gfc.OldValue[ch] = cod_info.global_gain;\r\n                cod_info.part2_3_length = nBits;\r\n                return nBits;\r\n            }\r\n\r\n            this.trancate_smallspectrums = function (gfc, gi, l3_xmin, work) {\r\n                var distort = new_float(L3Side.SFBMAX);\r\n\r\n                if ((0 == (gfc.substep_shaping & 4) && gi.block_type == Encoder.SHORT_TYPE)\r\n                    || (gfc.substep_shaping & 0x80) != 0)\r\n                    return;\r\n                qupvt.calc_noise(gi, l3_xmin, distort, new CalcNoiseResult(), null);\r\n                for (var j = 0; j < 576; j++) {\r\n                    var xr = 0.0;\r\n                    if (gi.l3_enc[j] != 0)\r\n                        xr = Math.abs(gi.xr[j]);\r\n                    work[j] = xr;\r\n                }\r\n\r\n                var j = 0;\r\n                var sfb = 8;\r\n                if (gi.block_type == Encoder.SHORT_TYPE)\r\n                    sfb = 6;\r\n                do {\r\n                    var allowedNoise, trancateThreshold;\r\n                    var nsame, start;\r\n\r\n                    var width = gi.width[sfb];\r\n                    j += width;\r\n                    if (distort[sfb] >= 1.0)\r\n                        continue;\r\n\r\n                    Arrays.sort(work, j - width, width);\r\n                    if (BitStream.EQ(work[j - 1], 0.0))\r\n                        continue;\r\n                    /* all zero sfb */\r\n\r\n                    allowedNoise = (1.0 - distort[sfb]) * l3_xmin[sfb];\r\n                    trancateThreshold = 0.0;\r\n                    start = 0;\r\n                    do {\r\n                        var noise;\r\n                        for (nsame = 1; start + nsame < width; nsame++)\r\n                            if (BitStream.NEQ(work[start + j - width], work[start + j\r\n                                + nsame - width]))\r\n                                break;\r\n\r\n                        noise = work[start + j - width] * work[start + j - width]\r\n                            * nsame;\r\n                        if (allowedNoise < noise) {\r\n                            if (start != 0)\r\n                                trancateThreshold = work[start + j - width - 1];\r\n                            break;\r\n                        }\r\n                        allowedNoise -= noise;\r\n                        start += nsame;\r\n                    } while (start < width);\r\n                    if (BitStream.EQ(trancateThreshold, 0.0))\r\n                        continue;\r\n\r\n                    do {\r\n                        if (Math.abs(gi.xr[j - width]) <= trancateThreshold)\r\n                            gi.l3_enc[j - width] = 0;\r\n                    } while (--width > 0);\r\n                } while (++sfb < gi.psymax);\r\n\r\n                gi.part2_3_length = tk.noquant_count_bits(gfc, gi, null);\r\n            };\r\n\r\n            /**\r\n             * author/date??\r\n             *\r\n             * Function: Returns zero if there is a scalefac which has not been\r\n             * amplified. Otherwise it returns one.\r\n             */\r\n            function loop_break(cod_info) {\r\n                for (var sfb = 0; sfb < cod_info.sfbmax; sfb++)\r\n                    if (cod_info.scalefac[sfb]\r\n                        + cod_info.subblock_gain[cod_info.window[sfb]] == 0)\r\n                        return false;\r\n\r\n                return true;\r\n            }\r\n\r\n            /* mt 5/99: Function: Improved calc_noise for a single channel */\r\n\r\n            function penalties(noise) {\r\n                return Util.FAST_LOG10((0.368 + 0.632 * noise * noise * noise));\r\n            }\r\n\r\n            /**\r\n             * author/date??\r\n             *\r\n             * several different codes to decide which quantization is better\r\n             */\r\n            function get_klemm_noise(distort, gi) {\r\n                var klemm_noise = 1E-37;\r\n                for (var sfb = 0; sfb < gi.psymax; sfb++)\r\n                    klemm_noise += penalties(distort[sfb]);\r\n\r\n                return Math.max(1e-20, klemm_noise);\r\n            }\r\n\r\n            function quant_compare(quant_comp, best, calc, gi, distort) {\r\n                /**\r\n                 * noise is given in decibels (dB) relative to masking thesholds.<BR>\r\n                 *\r\n                 * over_noise: ??? (the previous comment is fully wrong)<BR>\r\n                 * tot_noise: ??? (the previous comment is fully wrong)<BR>\r\n                 * max_noise: max quantization noise\r\n                 */\r\n                var better;\r\n\r\n                switch (quant_comp) {\r\n                    default:\r\n                    case 9:\r\n                    {\r\n                        if (best.over_count > 0) {\r\n                            /* there are distorted sfb */\r\n                            better = calc.over_SSD <= best.over_SSD;\r\n                            if (calc.over_SSD == best.over_SSD)\r\n                                better = calc.bits < best.bits;\r\n                        } else {\r\n                            /* no distorted sfb */\r\n                            better = ((calc.max_noise < 0) && ((calc.max_noise * 10 + calc.bits) <= (best.max_noise * 10 + best.bits)));\r\n                        }\r\n                        break;\r\n                    }\r\n\r\n                    case 0:\r\n                        better = calc.over_count < best.over_count\r\n                            || (calc.over_count == best.over_count && calc.over_noise < best.over_noise)\r\n                            || (calc.over_count == best.over_count\r\n                            && BitStream.EQ(calc.over_noise, best.over_noise) && calc.tot_noise < best.tot_noise);\r\n                        break;\r\n\r\n                    case 8:\r\n                        calc.max_noise = get_klemm_noise(distort, gi);\r\n                    //$FALL-THROUGH$\r\n                    case 1:\r\n                        better = calc.max_noise < best.max_noise;\r\n                        break;\r\n                    case 2:\r\n                        better = calc.tot_noise < best.tot_noise;\r\n                        break;\r\n                    case 3:\r\n                        better = (calc.tot_noise < best.tot_noise)\r\n                            && (calc.max_noise < best.max_noise);\r\n                        break;\r\n                    case 4:\r\n                        better = (calc.max_noise <= 0.0 && best.max_noise > 0.2)\r\n                            || (calc.max_noise <= 0.0 && best.max_noise < 0.0\r\n                            && best.max_noise > calc.max_noise - 0.2 && calc.tot_noise < best.tot_noise)\r\n                            || (calc.max_noise <= 0.0 && best.max_noise > 0.0\r\n                            && best.max_noise > calc.max_noise - 0.2 && calc.tot_noise < best.tot_noise\r\n                            + best.over_noise)\r\n                            || (calc.max_noise > 0.0 && best.max_noise > -0.05\r\n                            && best.max_noise > calc.max_noise - 0.1 && calc.tot_noise\r\n                            + calc.over_noise < best.tot_noise\r\n                            + best.over_noise)\r\n                            || (calc.max_noise > 0.0 && best.max_noise > -0.1\r\n                            && best.max_noise > calc.max_noise - 0.15 && calc.tot_noise\r\n                            + calc.over_noise + calc.over_noise < best.tot_noise\r\n                            + best.over_noise + best.over_noise);\r\n                        break;\r\n                    case 5:\r\n                        better = calc.over_noise < best.over_noise\r\n                            || (BitStream.EQ(calc.over_noise, best.over_noise) && calc.tot_noise < best.tot_noise);\r\n                        break;\r\n                    case 6:\r\n                        better = calc.over_noise < best.over_noise\r\n                            || (BitStream.EQ(calc.over_noise, best.over_noise) && (calc.max_noise < best.max_noise || (BitStream\r\n                                .EQ(calc.max_noise, best.max_noise) && calc.tot_noise <= best.tot_noise)));\r\n                        break;\r\n                    case 7:\r\n                        better = calc.over_count < best.over_count\r\n                            || calc.over_noise < best.over_noise;\r\n                        break;\r\n                }\r\n\r\n                if (best.over_count == 0) {\r\n                    /*\r\n                     * If no distorted bands, only use this quantization if it is\r\n                     * better, and if it uses less bits. Unfortunately, part2_3_length\r\n                     * is sometimes a poor estimator of the final size at low bitrates.\r\n                     */\r\n                    better = better && calc.bits < best.bits;\r\n                }\r\n\r\n                return better;\r\n            }\r\n\r\n            /**\r\n             * author/date??\r\n             *\r\n             * <PRE>\r\n             *  Amplify the scalefactor bands that violate the masking threshold.\r\n             *  See ISO 11172-3 Section C.1.5.4.3.5\r\n             *\r\n             *  distort[] = noise/masking\r\n             *  distort[] > 1   ==> noise is not masked\r\n             *  distort[] < 1   ==> noise is masked\r\n             *  max_dist = maximum value of distort[]\r\n             *\r\n             *  Three algorithms:\r\n             *  noise_shaping_amp\r\n             *        0             Amplify all bands with distort[]>1.\r\n             *\r\n             *        1             Amplify all bands with distort[] >= max_dist^(.5);\r\n             *                     ( 50% in the db scale)\r\n             *\r\n             *        2             Amplify first band with distort[] >= max_dist;\r\n             *\r\n             *\r\n             *  For algorithms 0 and 1, if max_dist < 1, then amplify all bands\r\n             *  with distort[] >= .95*max_dist.  This is to make sure we always\r\n             *  amplify at least one band.\r\n             * </PRE>\r\n             */\r\n            function amp_scalefac_bands(gfp, cod_info, distort, xrpow, bRefine) {\r\n                var gfc = gfp.internal_flags;\r\n                var ifqstep34;\r\n\r\n                if (cod_info.scalefac_scale == 0) {\r\n                    ifqstep34 = 1.29683955465100964055;\r\n                    /* 2**(.75*.5) */\r\n                } else {\r\n                    ifqstep34 = 1.68179283050742922612;\r\n                    /* 2**(.75*1) */\r\n                }\r\n\r\n                /* compute maximum value of distort[] */\r\n                var trigger = 0;\r\n                for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\r\n                    if (trigger < distort[sfb])\r\n                        trigger = distort[sfb];\r\n                }\r\n\r\n                var noise_shaping_amp = gfc.noise_shaping_amp;\r\n                if (noise_shaping_amp == 3) {\r\n                    if (bRefine)\r\n                        noise_shaping_amp = 2;\r\n                    else\r\n                        noise_shaping_amp = 1;\r\n                }\r\n                switch (noise_shaping_amp) {\r\n                    case 2:\r\n                        /* amplify exactly 1 band */\r\n                        break;\r\n\r\n                    case 1:\r\n                        /* amplify bands within 50% of max (on db scale) */\r\n                        if (trigger > 1.0)\r\n                            trigger = Math.pow(trigger, .5);\r\n                        else\r\n                            trigger *= .95;\r\n                        break;\r\n\r\n                    case 0:\r\n                    default:\r\n                        /* ISO algorithm. amplify all bands with distort>1 */\r\n                        if (trigger > 1.0)\r\n                            trigger = 1.0;\r\n                        else\r\n                            trigger *= .95;\r\n                        break;\r\n                }\r\n\r\n                var j = 0;\r\n                for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\r\n                    var width = cod_info.width[sfb];\r\n                    var l;\r\n                    j += width;\r\n                    if (distort[sfb] < trigger)\r\n                        continue;\r\n\r\n                    if ((gfc.substep_shaping & 2) != 0) {\r\n                        gfc.pseudohalf[sfb] = (0 == gfc.pseudohalf[sfb]) ? 1 : 0;\r\n                        if (0 == gfc.pseudohalf[sfb] && gfc.noise_shaping_amp == 2)\r\n                            return;\r\n                    }\r\n                    cod_info.scalefac[sfb]++;\r\n                    for (l = -width; l < 0; l++) {\r\n                        xrpow[j + l] *= ifqstep34;\r\n                        if (xrpow[j + l] > cod_info.xrpow_max)\r\n                            cod_info.xrpow_max = xrpow[j + l];\r\n                    }\r\n\r\n                    if (gfc.noise_shaping_amp == 2)\r\n                        return;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Takehiro Tominaga 2000-xx-xx\r\n             *\r\n             * turns on scalefac scale and adjusts scalefactors\r\n             */\r\n            function inc_scalefac_scale(cod_info, xrpow) {\r\n                var ifqstep34 = 1.29683955465100964055;\r\n\r\n                var j = 0;\r\n                for (var sfb = 0; sfb < cod_info.sfbmax; sfb++) {\r\n                    var width = cod_info.width[sfb];\r\n                    var s = cod_info.scalefac[sfb];\r\n                    if (cod_info.preflag != 0)\r\n                        s += qupvt.pretab[sfb];\r\n                    j += width;\r\n                    if ((s & 1) != 0) {\r\n                        s++;\r\n                        for (var l = -width; l < 0; l++) {\r\n                            xrpow[j + l] *= ifqstep34;\r\n                            if (xrpow[j + l] > cod_info.xrpow_max)\r\n                                cod_info.xrpow_max = xrpow[j + l];\r\n                        }\r\n                    }\r\n                    cod_info.scalefac[sfb] = s >> 1;\r\n                }\r\n                cod_info.preflag = 0;\r\n                cod_info.scalefac_scale = 1;\r\n            }\r\n\r\n            /**\r\n             * Takehiro Tominaga 2000-xx-xx\r\n             *\r\n             * increases the subblock gain and adjusts scalefactors\r\n             */\r\n            function inc_subblock_gain(gfc, cod_info, xrpow) {\r\n                var sfb;\r\n                var scalefac = cod_info.scalefac;\r\n\r\n                /* subbloc_gain can't do anything in the long block region */\r\n                for (sfb = 0; sfb < cod_info.sfb_lmax; sfb++) {\r\n                    if (scalefac[sfb] >= 16)\r\n                        return true;\r\n                }\r\n\r\n                for (var window = 0; window < 3; window++) {\r\n                    var s1 = 0;\r\n                    var s2 = 0;\r\n\r\n                    for (sfb = cod_info.sfb_lmax + window; sfb < cod_info.sfbdivide; sfb += 3) {\r\n                        if (s1 < scalefac[sfb])\r\n                            s1 = scalefac[sfb];\r\n                    }\r\n                    for (; sfb < cod_info.sfbmax; sfb += 3) {\r\n                        if (s2 < scalefac[sfb])\r\n                            s2 = scalefac[sfb];\r\n                    }\r\n\r\n                    if (s1 < 16 && s2 < 8)\r\n                        continue;\r\n\r\n                    if (cod_info.subblock_gain[window] >= 7)\r\n                        return true;\r\n\r\n                    /*\r\n                     * even though there is no scalefactor for sfb12 subblock gain\r\n                     * affects upper frequencies too, that's why we have to go up to\r\n                     * SBMAX_s\r\n                     */\r\n                    cod_info.subblock_gain[window]++;\r\n                    var j = gfc.scalefac_band.l[cod_info.sfb_lmax];\r\n                    for (sfb = cod_info.sfb_lmax + window; sfb < cod_info.sfbmax; sfb += 3) {\r\n                        var amp;\r\n                        var width = cod_info.width[sfb];\r\n                        var s = scalefac[sfb];\r\n                        s = s - (4 >> cod_info.scalefac_scale);\r\n                        if (s >= 0) {\r\n                            scalefac[sfb] = s;\r\n                            j += width * 3;\r\n                            continue;\r\n                        }\r\n\r\n                        scalefac[sfb] = 0;\r\n                        {\r\n                            var gain = 210 + (s << (cod_info.scalefac_scale + 1));\r\n                            amp = qupvt.IPOW20(gain);\r\n                        }\r\n                        j += width * (window + 1);\r\n                        for (var l = -width; l < 0; l++) {\r\n                            xrpow[j + l] *= amp;\r\n                            if (xrpow[j + l] > cod_info.xrpow_max)\r\n                                cod_info.xrpow_max = xrpow[j + l];\r\n                        }\r\n                        j += width * (3 - window - 1);\r\n                    }\r\n\r\n                    {\r\n                        var amp = qupvt.IPOW20(202);\r\n                        j += cod_info.width[sfb] * (window + 1);\r\n                        for (var l = -cod_info.width[sfb]; l < 0; l++) {\r\n                            xrpow[j + l] *= amp;\r\n                            if (xrpow[j + l] > cod_info.xrpow_max)\r\n                                cod_info.xrpow_max = xrpow[j + l];\r\n                        }\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n\r\n            /**\r\n             * <PRE>\r\n             *  Takehiro Tominaga /date??\r\n             *  Robert Hegemann 2000-09-06: made a function of it\r\n             *\r\n             *  amplifies scalefactor bands,\r\n             *   - if all are already amplified returns 0\r\n             *   - if some bands are amplified too much:\r\n             *      * try to increase scalefac_scale\r\n             *      * if already scalefac_scale was set\r\n             *          try on short blocks to increase subblock gain\r\n             * </PRE>\r\n             */\r\n            function balance_noise(gfp, cod_info, distort, xrpow, bRefine) {\r\n                var gfc = gfp.internal_flags;\r\n\r\n                amp_scalefac_bands(gfp, cod_info, distort, xrpow, bRefine);\r\n\r\n                /*\r\n                 * check to make sure we have not amplified too much loop_break returns\r\n                 * 0 if there is an unamplified scalefac scale_bitcount returns 0 if no\r\n                 * scalefactors are too large\r\n                 */\r\n\r\n                var status = loop_break(cod_info);\r\n\r\n                if (status)\r\n                    return false;\r\n                /* all bands amplified */\r\n\r\n                /*\r\n                 * not all scalefactors have been amplified. so these scalefacs are\r\n                 * possibly valid. encode them:\r\n                 */\r\n                if (gfc.mode_gr == 2)\r\n                    status = tk.scale_bitcount(cod_info);\r\n                else\r\n                    status = tk.scale_bitcount_lsf(gfc, cod_info);\r\n\r\n                if (!status)\r\n                    return true;\r\n                /* amplified some bands not exceeding limits */\r\n\r\n                /*\r\n                 * some scalefactors are too large. lets try setting scalefac_scale=1\r\n                 */\r\n                if (gfc.noise_shaping > 1) {\r\n                    Arrays.fill(gfc.pseudohalf, 0);\r\n                    if (0 == cod_info.scalefac_scale) {\r\n                        inc_scalefac_scale(cod_info, xrpow);\r\n                        status = false;\r\n                    } else {\r\n                        if (cod_info.block_type == Encoder.SHORT_TYPE\r\n                            && gfc.subblock_gain > 0) {\r\n                            status = (inc_subblock_gain(gfc, cod_info, xrpow) || loop_break(cod_info));\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!status) {\r\n                    if (gfc.mode_gr == 2)\r\n                        status = tk.scale_bitcount(cod_info);\r\n                    else\r\n                        status = tk.scale_bitcount_lsf(gfc, cod_info);\r\n                }\r\n                return !status;\r\n            }\r\n\r\n            /**\r\n             * <PRE>\r\n             *  Function: The outer iteration loop controls the masking conditions\r\n             *  of all scalefactorbands. It computes the best scalefac and\r\n             *  global gain. This module calls the inner iteration loop\r\n             *\r\n             *  mt 5/99 completely rewritten to allow for bit reservoir control,\r\n             *  mid/side channels with L/R or mid/side masking thresholds,\r\n             *  and chooses best quantization instead of last quantization when\r\n             *  no distortion free quantization can be found.\r\n             *\r\n             *  added VBR support mt 5/99\r\n             *\r\n             *  some code shuffle rh 9/00\r\n             * </PRE>\r\n             *\r\n             * @param l3_xmin\r\n             *            allowed distortion\r\n             * @param xrpow\r\n             *            coloured magnitudes of spectral\r\n             * @param targ_bits\r\n             *            maximum allowed bits\r\n             */\r\n            this.outer_loop = function (gfp, cod_info, l3_xmin, xrpow, ch, targ_bits) {\r\n                var gfc = gfp.internal_flags;\r\n                var cod_info_w = new GrInfo();\r\n                var save_xrpow = new_float(576);\r\n                var distort = new_float(L3Side.SFBMAX);\r\n                var best_noise_info = new CalcNoiseResult();\r\n                var better;\r\n                var prev_noise = new CalcNoiseData();\r\n                var best_part2_3_length = 9999999;\r\n                var bEndOfSearch = false;\r\n                var bRefine = false;\r\n                var best_ggain_pass1 = 0;\r\n\r\n                bin_search_StepSize(gfc, cod_info, targ_bits, ch, xrpow);\r\n\r\n                if (0 == gfc.noise_shaping)\r\n                /* fast mode, no noise shaping, we are ready */\r\n                    return 100;\r\n                /* default noise_info.over_count */\r\n\r\n                /* compute the distortion in this quantization */\r\n                /* coefficients and thresholds both l/r (or both mid/side) */\r\n                qupvt.calc_noise(cod_info, l3_xmin, distort, best_noise_info,\r\n                    prev_noise);\r\n                best_noise_info.bits = cod_info.part2_3_length;\r\n\r\n                cod_info_w.assign(cod_info);\r\n                var age = 0;\r\n                System.arraycopy(xrpow, 0, save_xrpow, 0, 576);\r\n\r\n                while (!bEndOfSearch) {\r\n                    /* BEGIN MAIN LOOP */\r\n                    do {\r\n                        var noise_info = new CalcNoiseResult();\r\n                        var search_limit;\r\n                        var maxggain = 255;\r\n\r\n                        /*\r\n                         * When quantization with no distorted bands is found, allow up\r\n                         * to X new unsuccesful tries in serial. This gives us more\r\n                         * possibilities for different quant_compare modes. Much more\r\n                         * than 3 makes not a big difference, it is only slower.\r\n                         */\r\n\r\n                        if ((gfc.substep_shaping & 2) != 0) {\r\n                            search_limit = 20;\r\n                        } else {\r\n                            search_limit = 3;\r\n                        }\r\n\r\n                        /*\r\n                         * Check if the last scalefactor band is distorted. in VBR mode\r\n                         * we can't get rid of the distortion, so quit now and VBR mode\r\n                         * will try again with more bits. (makes a 10% speed increase,\r\n                         * the files I tested were binary identical, 2000/05/20 Robert\r\n                         * Hegemann) distort[] > 1 means noise > allowed noise\r\n                         */\r\n                        if (gfc.sfb21_extra) {\r\n                            if (distort[cod_info_w.sfbmax] > 1.0)\r\n                                break;\r\n                            if (cod_info_w.block_type == Encoder.SHORT_TYPE\r\n                                && (distort[cod_info_w.sfbmax + 1] > 1.0 || distort[cod_info_w.sfbmax + 2] > 1.0))\r\n                                break;\r\n                        }\r\n\r\n                        /* try a new scalefactor conbination on cod_info_w */\r\n                        if (!balance_noise(gfp, cod_info_w, distort, xrpow, bRefine))\r\n                            break;\r\n                        if (cod_info_w.scalefac_scale != 0)\r\n                            maxggain = 254;\r\n\r\n                        /*\r\n                         * inner_loop starts with the initial quantization step computed\r\n                         * above and slowly increases until the bits < huff_bits. Thus\r\n                         * it is important not to start with too large of an inital\r\n                         * quantization step. Too small is ok, but inner_loop will take\r\n                         * longer\r\n                         */\r\n                        var huff_bits = targ_bits - cod_info_w.part2_length;\r\n                        if (huff_bits <= 0)\r\n                            break;\r\n\r\n                        /*\r\n                         * increase quantizer stepsize until needed bits are below\r\n                         * maximum\r\n                         */\r\n                        while ((cod_info_w.part2_3_length = tk.count_bits(gfc, xrpow,\r\n                            cod_info_w, prev_noise)) > huff_bits\r\n                        && cod_info_w.global_gain <= maxggain)\r\n                            cod_info_w.global_gain++;\r\n\r\n                        if (cod_info_w.global_gain > maxggain)\r\n                            break;\r\n\r\n                        if (best_noise_info.over_count == 0) {\r\n\r\n                            while ((cod_info_w.part2_3_length = tk.count_bits(gfc,\r\n                                xrpow, cod_info_w, prev_noise)) > best_part2_3_length\r\n                            && cod_info_w.global_gain <= maxggain)\r\n                                cod_info_w.global_gain++;\r\n\r\n                            if (cod_info_w.global_gain > maxggain)\r\n                                break;\r\n                        }\r\n\r\n                        /* compute the distortion in this quantization */\r\n                        qupvt.calc_noise(cod_info_w, l3_xmin, distort, noise_info,\r\n                            prev_noise);\r\n                        noise_info.bits = cod_info_w.part2_3_length;\r\n\r\n                        /*\r\n                         * check if this quantization is better than our saved\r\n                         * quantization\r\n                         */\r\n                        if (cod_info.block_type != Encoder.SHORT_TYPE) {\r\n                            // NORM, START or STOP type\r\n                            better = gfp.quant_comp;\r\n                        } else\r\n                            better = gfp.quant_comp_short;\r\n\r\n                        better = quant_compare(better, best_noise_info, noise_info,\r\n                            cod_info_w, distort) ? 1 : 0;\r\n\r\n                        /* save data so we can restore this quantization later */\r\n                        if (better != 0) {\r\n                            best_part2_3_length = cod_info.part2_3_length;\r\n                            best_noise_info = noise_info;\r\n                            cod_info.assign(cod_info_w);\r\n                            age = 0;\r\n                            /* save data so we can restore this quantization later */\r\n                            /* store for later reuse */\r\n                            System.arraycopy(xrpow, 0, save_xrpow, 0, 576);\r\n                        } else {\r\n                            /* early stop? */\r\n                            if (gfc.full_outer_loop == 0) {\r\n                                if (++age > search_limit\r\n                                    && best_noise_info.over_count == 0)\r\n                                    break;\r\n                                if ((gfc.noise_shaping_amp == 3) && bRefine && age > 30)\r\n                                    break;\r\n                                if ((gfc.noise_shaping_amp == 3)\r\n                                    && bRefine\r\n                                    && (cod_info_w.global_gain - best_ggain_pass1) > 15)\r\n                                    break;\r\n                            }\r\n                        }\r\n                    } while ((cod_info_w.global_gain + cod_info_w.scalefac_scale) < 255);\r\n\r\n                    if (gfc.noise_shaping_amp == 3) {\r\n                        if (!bRefine) {\r\n                            /* refine search */\r\n                            cod_info_w.assign(cod_info);\r\n                            System.arraycopy(save_xrpow, 0, xrpow, 0, 576);\r\n                            age = 0;\r\n                            best_ggain_pass1 = cod_info_w.global_gain;\r\n\r\n                            bRefine = true;\r\n                        } else {\r\n                            /* search already refined, stop */\r\n                            bEndOfSearch = true;\r\n                        }\r\n\r\n                    } else {\r\n                        bEndOfSearch = true;\r\n                    }\r\n                }\r\n\r\n                /*\r\n                 * finish up\r\n                 */\r\n                if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh)\r\n                /* restore for reuse on next try */\r\n                    System.arraycopy(save_xrpow, 0, xrpow, 0, 576);\r\n                /*\r\n                 * do the 'substep shaping'\r\n                 */\r\n                else if ((gfc.substep_shaping & 1) != 0)\r\n                    trancate_smallspectrums(gfc, cod_info, l3_xmin, xrpow);\r\n\r\n                return best_noise_info.over_count;\r\n            }\r\n\r\n            /**\r\n             * Robert Hegemann 2000-09-06\r\n             *\r\n             * update reservoir status after FINAL quantization/bitrate\r\n             */\r\n            this.iteration_finish_one = function (gfc, gr, ch) {\r\n                var l3_side = gfc.l3_side;\r\n                var cod_info = l3_side.tt[gr][ch];\r\n\r\n                /*\r\n                 * try some better scalefac storage\r\n                 */\r\n                tk.best_scalefac_store(gfc, gr, ch, l3_side);\r\n\r\n                /*\r\n                 * best huffman_divide may save some bits too\r\n                 */\r\n                if (gfc.use_best_huffman == 1)\r\n                    tk.best_huffman_divide(gfc, cod_info);\r\n\r\n                /*\r\n                 * update reservoir status after FINAL quantization/bitrate\r\n                 */\r\n                rv.ResvAdjust(gfc, cod_info);\r\n            };\r\n\r\n            /**\r\n             *\r\n             * 2000-09-04 Robert Hegemann\r\n             *\r\n             * @param l3_xmin\r\n             *            allowed distortion of the scalefactor\r\n             * @param xrpow\r\n             *            coloured magnitudes of spectral values\r\n             */\r\n            this.VBR_encode_granule = function (gfp, cod_info, l3_xmin, xrpow, ch, min_bits, max_bits) {\r\n                var gfc = gfp.internal_flags;\r\n                var bst_cod_info = new GrInfo();\r\n                var bst_xrpow = new_float(576);\r\n                var Max_bits = max_bits;\r\n                var real_bits = max_bits + 1;\r\n                var this_bits = (max_bits + min_bits) / 2;\r\n                var dbits, over, found = 0;\r\n                var sfb21_extra = gfc.sfb21_extra;\r\n\r\n                Arrays.fill(bst_cod_info.l3_enc, 0);\r\n\r\n                /*\r\n                 * search within round about 40 bits of optimal\r\n                 */\r\n                do {\r\n\r\n                    if (this_bits > Max_bits - 42)\r\n                        gfc.sfb21_extra = false;\r\n                    else\r\n                        gfc.sfb21_extra = sfb21_extra;\r\n\r\n                    over = outer_loop(gfp, cod_info, l3_xmin, xrpow, ch, this_bits);\r\n\r\n                    /*\r\n                     * is quantization as good as we are looking for ? in this case: is\r\n                     * no scalefactor band distorted?\r\n                     */\r\n                    if (over <= 0) {\r\n                        found = 1;\r\n                        /*\r\n                         * now we know it can be done with \"real_bits\" and maybe we can\r\n                         * skip some iterations\r\n                         */\r\n                        real_bits = cod_info.part2_3_length;\r\n\r\n                        /*\r\n                         * store best quantization so far\r\n                         */\r\n                        bst_cod_info.assign(cod_info);\r\n                        System.arraycopy(xrpow, 0, bst_xrpow, 0, 576);\r\n\r\n                        /*\r\n                         * try with fewer bits\r\n                         */\r\n                        max_bits = real_bits - 32;\r\n                        dbits = max_bits - min_bits;\r\n                        this_bits = (max_bits + min_bits) / 2;\r\n                    } else {\r\n                        /*\r\n                         * try with more bits\r\n                         */\r\n                        min_bits = this_bits + 32;\r\n                        dbits = max_bits - min_bits;\r\n                        this_bits = (max_bits + min_bits) / 2;\r\n\r\n                        if (found != 0) {\r\n                            found = 2;\r\n                            /*\r\n                             * start again with best quantization so far\r\n                             */\r\n                            cod_info.assign(bst_cod_info);\r\n                            System.arraycopy(bst_xrpow, 0, xrpow, 0, 576);\r\n                        }\r\n                    }\r\n                } while (dbits > 12);\r\n\r\n                gfc.sfb21_extra = sfb21_extra;\r\n\r\n                /*\r\n                 * found=0 => nothing found, use last one found=1 => we just found the\r\n                 * best and left the loop found=2 => we restored a good one and have now\r\n                 * l3_enc to restore too\r\n                 */\r\n                if (found == 2) {\r\n                    System.arraycopy(bst_cod_info.l3_enc, 0, cod_info.l3_enc, 0, 576);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Robert Hegemann 2000-09-05\r\n             *\r\n             * calculates * how many bits are available for analog silent granules * how\r\n             * many bits to use for the lowest allowed bitrate * how many bits each\r\n             * bitrate would provide\r\n             */\r\n            this.get_framebits = function (gfp, frameBits) {\r\n                var gfc = gfp.internal_flags;\r\n\r\n                /*\r\n                 * always use at least this many bits per granule per channel unless we\r\n                 * detect analog silence, see below\r\n                 */\r\n                gfc.bitrate_index = gfc.VBR_min_bitrate;\r\n                var bitsPerFrame = bs.getframebits(gfp);\r\n\r\n                /*\r\n                 * bits for analog silence\r\n                 */\r\n                gfc.bitrate_index = 1;\r\n                bitsPerFrame = bs.getframebits(gfp);\r\n\r\n                for (var i = 1; i <= gfc.VBR_max_bitrate; i++) {\r\n                    gfc.bitrate_index = i;\r\n                    var mb = new MeanBits(bitsPerFrame);\r\n                    frameBits[i] = rv.ResvFrameBegin(gfp, mb);\r\n                    bitsPerFrame = mb.bits;\r\n                }\r\n            };\r\n\r\n            /* RH: this one needs to be overhauled sometime */\r\n\r\n            /**\r\n             * <PRE>\r\n             *  2000-09-04 Robert Hegemann\r\n             *\r\n             *  * converts LR to MS coding when necessary\r\n             *  * calculates allowed/adjusted quantization noise amounts\r\n             *  * detects analog silent frames\r\n             *\r\n             *  some remarks:\r\n             *  - lower masking depending on Quality setting\r\n             *  - quality control together with adjusted ATH MDCT scaling\r\n             *    on lower quality setting allocate more noise from\r\n             *    ATH masking, and on higher quality setting allocate\r\n             *    less noise from ATH masking.\r\n             *  - experiments show that going more than 2dB over GPSYCHO's\r\n             *    limits ends up in very annoying artefacts\r\n             * </PRE>\r\n             */\r\n            this.VBR_old_prepare = function (gfp, pe, ms_ener_ratio, ratio, l3_xmin, frameBits, min_bits,\r\n                                             max_bits, bands) {\r\n                var gfc = gfp.internal_flags;\r\n\r\n                var masking_lower_db, adjust = 0.0;\r\n                var analog_silence = 1;\r\n                var bits = 0;\r\n\r\n                gfc.bitrate_index = gfc.VBR_max_bitrate;\r\n                var avg = rv.ResvFrameBegin(gfp, new MeanBits(0)) / gfc.mode_gr;\r\n\r\n                get_framebits(gfp, frameBits);\r\n\r\n                for (var gr = 0; gr < gfc.mode_gr; gr++) {\r\n                    var mxb = qupvt.on_pe(gfp, pe, max_bits[gr], avg, gr, 0);\r\n                    if (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\r\n                        ms_convert(gfc.l3_side, gr);\r\n                        qupvt.reduce_side(max_bits[gr], ms_ener_ratio[gr], avg, mxb);\r\n                    }\r\n                    for (var ch = 0; ch < gfc.channels_out; ++ch) {\r\n                        var cod_info = gfc.l3_side.tt[gr][ch];\r\n\r\n                        if (cod_info.block_type != Encoder.SHORT_TYPE) {\r\n                            // NORM, START or STOP type\r\n                            adjust = 1.28 / (1 + Math\r\n                                    .exp(3.5 - pe[gr][ch] / 300.)) - 0.05;\r\n                            masking_lower_db = gfc.PSY.mask_adjust - adjust;\r\n                        } else {\r\n                            adjust = 2.56 / (1 + Math\r\n                                    .exp(3.5 - pe[gr][ch] / 300.)) - 0.14;\r\n                            masking_lower_db = gfc.PSY.mask_adjust_short - adjust;\r\n                        }\r\n                        gfc.masking_lower = Math.pow(10.0,\r\n                            masking_lower_db * 0.1);\r\n\r\n                        init_outer_loop(gfc, cod_info);\r\n                        bands[gr][ch] = qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info,\r\n                            l3_xmin[gr][ch]);\r\n                        if (bands[gr][ch] != 0)\r\n                            analog_silence = 0;\r\n\r\n                        min_bits[gr][ch] = 126;\r\n\r\n                        bits += max_bits[gr][ch];\r\n                    }\r\n                }\r\n                for (var gr = 0; gr < gfc.mode_gr; gr++) {\r\n                    for (var ch = 0; ch < gfc.channels_out; ch++) {\r\n                        if (bits > frameBits[gfc.VBR_max_bitrate]) {\r\n                            max_bits[gr][ch] *= frameBits[gfc.VBR_max_bitrate];\r\n                            max_bits[gr][ch] /= bits;\r\n                        }\r\n                        if (min_bits[gr][ch] > max_bits[gr][ch])\r\n                            min_bits[gr][ch] = max_bits[gr][ch];\r\n\r\n                    }\r\n                    /* for ch */\r\n                }\r\n                /* for gr */\r\n\r\n                return analog_silence;\r\n            };\r\n\r\n            this.bitpressure_strategy = function (gfc, l3_xmin, min_bits, max_bits) {\r\n                for (var gr = 0; gr < gfc.mode_gr; gr++) {\r\n                    for (var ch = 0; ch < gfc.channels_out; ch++) {\r\n                        var gi = gfc.l3_side.tt[gr][ch];\r\n                        var pxmin = l3_xmin[gr][ch];\r\n                        var pxminPos = 0;\r\n                        for (var sfb = 0; sfb < gi.psy_lmax; sfb++)\r\n                            pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\r\n                                / Encoder.SBMAX_l / Encoder.SBMAX_l;\r\n\r\n                        if (gi.block_type == Encoder.SHORT_TYPE) {\r\n                            for (var sfb = gi.sfb_smin; sfb < Encoder.SBMAX_s; sfb++) {\r\n                                pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\r\n                                    / Encoder.SBMAX_s / Encoder.SBMAX_s;\r\n                                pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\r\n                                    / Encoder.SBMAX_s / Encoder.SBMAX_s;\r\n                                pxmin[pxminPos++] *= 1. + .029 * sfb * sfb\r\n                                    / Encoder.SBMAX_s / Encoder.SBMAX_s;\r\n                            }\r\n                        }\r\n                        max_bits[gr][ch] = 0 | Math.max(min_bits[gr][ch],\r\n                                0.9 * max_bits[gr][ch]);\r\n                    }\r\n                }\r\n            };\r\n\r\n            this.VBR_new_prepare = function (gfp, pe, ratio, l3_xmin, frameBits, max_bits) {\r\n                var gfc = gfp.internal_flags;\r\n\r\n                var analog_silence = 1;\r\n                var avg = 0, bits = 0;\r\n                var maximum_framebits;\r\n\r\n                if (!gfp.free_format) {\r\n                    gfc.bitrate_index = gfc.VBR_max_bitrate;\r\n\r\n                    var mb = new MeanBits(avg);\r\n                    rv.ResvFrameBegin(gfp, mb);\r\n                    avg = mb.bits;\r\n\r\n                    get_framebits(gfp, frameBits);\r\n                    maximum_framebits = frameBits[gfc.VBR_max_bitrate];\r\n                } else {\r\n                    gfc.bitrate_index = 0;\r\n                    var mb = new MeanBits(avg);\r\n                    maximum_framebits = rv.ResvFrameBegin(gfp, mb);\r\n                    avg = mb.bits;\r\n                    frameBits[0] = maximum_framebits;\r\n                }\r\n\r\n                for (var gr = 0; gr < gfc.mode_gr; gr++) {\r\n                    qupvt.on_pe(gfp, pe, max_bits[gr], avg, gr, 0);\r\n                    if (gfc.mode_ext == Encoder.MPG_MD_MS_LR) {\r\n                        ms_convert(gfc.l3_side, gr);\r\n                    }\r\n                    for (var ch = 0; ch < gfc.channels_out; ++ch) {\r\n                        var cod_info = gfc.l3_side.tt[gr][ch];\r\n\r\n                        gfc.masking_lower = Math.pow(10.0,\r\n                            gfc.PSY.mask_adjust * 0.1);\r\n\r\n                        init_outer_loop(gfc, cod_info);\r\n                        if (0 != qupvt.calc_xmin(gfp, ratio[gr][ch], cod_info,\r\n                                l3_xmin[gr][ch]))\r\n                            analog_silence = 0;\r\n\r\n                        bits += max_bits[gr][ch];\r\n                    }\r\n                }\r\n                for (var gr = 0; gr < gfc.mode_gr; gr++) {\r\n                    for (var ch = 0; ch < gfc.channels_out; ch++) {\r\n                        if (bits > maximum_framebits) {\r\n                            max_bits[gr][ch] *= maximum_framebits;\r\n                            max_bits[gr][ch] /= bits;\r\n                        }\r\n\r\n                    }\r\n                    /* for ch */\r\n                }\r\n                /* for gr */\r\n\r\n                return analog_silence;\r\n            };\r\n\r\n            /**\r\n             * calculates target bits for ABR encoding\r\n             *\r\n             * mt 2000/05/31\r\n             */\r\n            this.calc_target_bits = function (gfp, pe, ms_ener_ratio, targ_bits, analog_silence_bits, max_frame_bits) {\r\n                var gfc = gfp.internal_flags;\r\n                var l3_side = gfc.l3_side;\r\n                var res_factor;\r\n                var gr, ch, totbits, mean_bits = 0;\r\n\r\n                gfc.bitrate_index = gfc.VBR_max_bitrate;\r\n                var mb = new MeanBits(mean_bits);\r\n                max_frame_bits[0] = rv.ResvFrameBegin(gfp, mb);\r\n                mean_bits = mb.bits;\r\n\r\n                gfc.bitrate_index = 1;\r\n                mean_bits = bs.getframebits(gfp) - gfc.sideinfo_len * 8;\r\n                analog_silence_bits[0] = mean_bits / (gfc.mode_gr * gfc.channels_out);\r\n\r\n                mean_bits = gfp.VBR_mean_bitrate_kbps * gfp.framesize * 1000;\r\n                if ((gfc.substep_shaping & 1) != 0)\r\n                    mean_bits *= 1.09;\r\n                mean_bits /= gfp.out_samplerate;\r\n                mean_bits -= gfc.sideinfo_len * 8;\r\n                mean_bits /= (gfc.mode_gr * gfc.channels_out);\r\n\r\n                /**\r\n                 * <PRE>\r\n                 *           res_factor is the percentage of the target bitrate that should\r\n                 *           be used on average.  the remaining bits are added to the\r\n                 *           bitreservoir and used for difficult to encode frames.\r\n                 *\r\n                 *           Since we are tracking the average bitrate, we should adjust\r\n                 *           res_factor \"on the fly\", increasing it if the average bitrate\r\n                 *           is greater than the requested bitrate, and decreasing it\r\n                 *           otherwise.  Reasonable ranges are from .9 to 1.0\r\n                 *\r\n                 *           Until we get the above suggestion working, we use the following\r\n                 *           tuning:\r\n                 *           compression ratio    res_factor\r\n                 *           5.5  (256kbps)         1.0      no need for bitreservoir\r\n                 *           11   (128kbps)         .93      7% held for reservoir\r\n                 *\r\n                 *           with linear interpolation for other values.\r\n                 * </PRE>\r\n                 */\r\n                res_factor = .93 + .07 * (11.0 - gfp.compression_ratio)\r\n                    / (11.0 - 5.5);\r\n                if (res_factor < .90)\r\n                    res_factor = .90;\r\n                if (res_factor > 1.00)\r\n                    res_factor = 1.00;\r\n\r\n                for (gr = 0; gr < gfc.mode_gr; gr++) {\r\n                    var sum = 0;\r\n                    for (ch = 0; ch < gfc.channels_out; ch++) {\r\n                        targ_bits[gr][ch] = (int)(res_factor * mean_bits);\r\n\r\n                        if (pe[gr][ch] > 700) {\r\n                            var add_bits = (int)((pe[gr][ch] - 700) / 1.4);\r\n\r\n                            var cod_info = l3_side.tt[gr][ch];\r\n                            targ_bits[gr][ch] = (int)(res_factor * mean_bits);\r\n\r\n                            /* short blocks use a little extra, no matter what the pe */\r\n                            if (cod_info.block_type == Encoder.SHORT_TYPE) {\r\n                                if (add_bits < mean_bits / 2)\r\n                                    add_bits = mean_bits / 2;\r\n                            }\r\n                            /* at most increase bits by 1.5*average */\r\n                            if (add_bits > mean_bits * 3 / 2)\r\n                                add_bits = mean_bits * 3 / 2;\r\n                            else if (add_bits < 0)\r\n                                add_bits = 0;\r\n\r\n                            targ_bits[gr][ch] += add_bits;\r\n                        }\r\n                        if (targ_bits[gr][ch] > LameInternalFlags.MAX_BITS_PER_CHANNEL) {\r\n                            targ_bits[gr][ch] = LameInternalFlags.MAX_BITS_PER_CHANNEL;\r\n                        }\r\n                        sum += targ_bits[gr][ch];\r\n                    }\r\n                    /* for ch */\r\n                    if (sum > LameInternalFlags.MAX_BITS_PER_GRANULE) {\r\n                        for (ch = 0; ch < gfc.channels_out; ++ch) {\r\n                            targ_bits[gr][ch] *= LameInternalFlags.MAX_BITS_PER_GRANULE;\r\n                            targ_bits[gr][ch] /= sum;\r\n                        }\r\n                    }\r\n                }\r\n                /* for gr */\r\n\r\n                if (gfc.mode_ext == Encoder.MPG_MD_MS_LR)\r\n                    for (gr = 0; gr < gfc.mode_gr; gr++) {\r\n                        qupvt.reduce_side(targ_bits[gr], ms_ener_ratio[gr], mean_bits\r\n                            * gfc.channels_out,\r\n                            LameInternalFlags.MAX_BITS_PER_GRANULE);\r\n                    }\r\n\r\n                /*\r\n                 * sum target bits\r\n                 */\r\n                totbits = 0;\r\n                for (gr = 0; gr < gfc.mode_gr; gr++) {\r\n                    for (ch = 0; ch < gfc.channels_out; ch++) {\r\n                        if (targ_bits[gr][ch] > LameInternalFlags.MAX_BITS_PER_CHANNEL)\r\n                            targ_bits[gr][ch] = LameInternalFlags.MAX_BITS_PER_CHANNEL;\r\n                        totbits += targ_bits[gr][ch];\r\n                    }\r\n                }\r\n\r\n                /*\r\n                 * repartion target bits if needed\r\n                 */\r\n                if (totbits > max_frame_bits[0]) {\r\n                    for (gr = 0; gr < gfc.mode_gr; gr++) {\r\n                        for (ch = 0; ch < gfc.channels_out; ch++) {\r\n                            targ_bits[gr][ch] *= max_frame_bits[0];\r\n                            targ_bits[gr][ch] /= totbits;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        /*\r\n         *      MP3 window subband -> subband filtering -> mdct routine\r\n         *\r\n         *      Copyright (c) 1999-2000 Takehiro Tominaga\r\n         *\r\n         *\r\n         * This library is free software; you can redistribute it and/or\r\n         * modify it under the terms of the GNU Lesser General Public\r\n         * License as published by the Free Software Foundation; either\r\n         * version 2 of the License, or (at your option) any later version.\r\n         *\r\n         * This library is distributed in the hope that it will be useful,\r\n         * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n         * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n         * Library General Public License for more details.\r\n         *\r\n         * You should have received a copy of the GNU Library General Public\r\n         * License along with this library; if not, write to the\r\n         * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\r\n         * Boston, MA 02111-1307, USA.\r\n         */\r\n        /*\r\n         *         Special Thanks to Patrick De Smet for your advices.\r\n         */\r\n\r\n        /* $Id: NewMDCT.java,v 1.11 2011/05/24 20:48:06 kenchis Exp $ */\r\n\r\n//package mp3;\r\n\r\n//import java.util.Arrays;\r\n\r\n\r\n\r\n        function NewMDCT() {\r\n\r\n            var enwindow = [\r\n                -4.77e-07 * 0.740951125354959 / 2.384e-06,\r\n                1.03951e-04 * 0.740951125354959 / 2.384e-06,\r\n                9.53674e-04 * 0.740951125354959 / 2.384e-06,\r\n                2.841473e-03 * 0.740951125354959 / 2.384e-06,\r\n                3.5758972e-02 * 0.740951125354959 / 2.384e-06,\r\n                3.401756e-03 * 0.740951125354959 / 2.384e-06,\r\n                9.83715e-04 * 0.740951125354959 / 2.384e-06,\r\n                9.9182e-05 * 0.740951125354959 / 2.384e-06, /* 15 */\r\n                1.2398e-05 * 0.740951125354959 / 2.384e-06,\r\n                1.91212e-04 * 0.740951125354959 / 2.384e-06,\r\n                2.283096e-03 * 0.740951125354959 / 2.384e-06,\r\n                1.6994476e-02 * 0.740951125354959 / 2.384e-06,\r\n                -1.8756866e-02 * 0.740951125354959 / 2.384e-06,\r\n                -2.630711e-03 * 0.740951125354959 / 2.384e-06,\r\n                -2.47478e-04 * 0.740951125354959 / 2.384e-06,\r\n                -1.4782e-05 * 0.740951125354959 / 2.384e-06,\r\n                9.063471690191471e-01, 1.960342806591213e-01,\r\n\r\n                -4.77e-07 * 0.773010453362737 / 2.384e-06,\r\n                1.05858e-04 * 0.773010453362737 / 2.384e-06,\r\n                9.30786e-04 * 0.773010453362737 / 2.384e-06,\r\n                2.521515e-03 * 0.773010453362737 / 2.384e-06,\r\n                3.5694122e-02 * 0.773010453362737 / 2.384e-06,\r\n                3.643036e-03 * 0.773010453362737 / 2.384e-06,\r\n                9.91821e-04 * 0.773010453362737 / 2.384e-06,\r\n                9.6321e-05 * 0.773010453362737 / 2.384e-06, /* 14 */\r\n                1.1444e-05 * 0.773010453362737 / 2.384e-06,\r\n                1.65462e-04 * 0.773010453362737 / 2.384e-06,\r\n                2.110004e-03 * 0.773010453362737 / 2.384e-06,\r\n                1.6112804e-02 * 0.773010453362737 / 2.384e-06,\r\n                -1.9634247e-02 * 0.773010453362737 / 2.384e-06,\r\n                -2.803326e-03 * 0.773010453362737 / 2.384e-06,\r\n                -2.77042e-04 * 0.773010453362737 / 2.384e-06,\r\n                -1.6689e-05 * 0.773010453362737 / 2.384e-06,\r\n                8.206787908286602e-01, 3.901806440322567e-01,\r\n\r\n                -4.77e-07 * 0.803207531480645 / 2.384e-06,\r\n                1.07288e-04 * 0.803207531480645 / 2.384e-06,\r\n                9.02653e-04 * 0.803207531480645 / 2.384e-06,\r\n                2.174854e-03 * 0.803207531480645 / 2.384e-06,\r\n                3.5586357e-02 * 0.803207531480645 / 2.384e-06,\r\n                3.858566e-03 * 0.803207531480645 / 2.384e-06,\r\n                9.95159e-04 * 0.803207531480645 / 2.384e-06,\r\n                9.3460e-05 * 0.803207531480645 / 2.384e-06, /* 13 */\r\n                1.0014e-05 * 0.803207531480645 / 2.384e-06,\r\n                1.40190e-04 * 0.803207531480645 / 2.384e-06,\r\n                1.937389e-03 * 0.803207531480645 / 2.384e-06,\r\n                1.5233517e-02 * 0.803207531480645 / 2.384e-06,\r\n                -2.0506859e-02 * 0.803207531480645 / 2.384e-06,\r\n                -2.974033e-03 * 0.803207531480645 / 2.384e-06,\r\n                -3.07560e-04 * 0.803207531480645 / 2.384e-06,\r\n                -1.8120e-05 * 0.803207531480645 / 2.384e-06,\r\n                7.416505462720353e-01, 5.805693545089249e-01,\r\n\r\n                -4.77e-07 * 0.831469612302545 / 2.384e-06,\r\n                1.08242e-04 * 0.831469612302545 / 2.384e-06,\r\n                8.68797e-04 * 0.831469612302545 / 2.384e-06,\r\n                1.800537e-03 * 0.831469612302545 / 2.384e-06,\r\n                3.5435200e-02 * 0.831469612302545 / 2.384e-06,\r\n                4.049301e-03 * 0.831469612302545 / 2.384e-06,\r\n                9.94205e-04 * 0.831469612302545 / 2.384e-06,\r\n                9.0599e-05 * 0.831469612302545 / 2.384e-06, /* 12 */\r\n                9.060e-06 * 0.831469612302545 / 2.384e-06,\r\n                1.16348e-04 * 0.831469612302545 / 2.384e-06,\r\n                1.766682e-03 * 0.831469612302545 / 2.384e-06,\r\n                1.4358521e-02 * 0.831469612302545 / 2.384e-06,\r\n                -2.1372318e-02 * 0.831469612302545 / 2.384e-06,\r\n                -3.14188e-03 * 0.831469612302545 / 2.384e-06,\r\n                -3.39031e-04 * 0.831469612302545 / 2.384e-06,\r\n                -1.9550e-05 * 0.831469612302545 / 2.384e-06,\r\n                6.681786379192989e-01, 7.653668647301797e-01,\r\n\r\n                -4.77e-07 * 0.857728610000272 / 2.384e-06,\r\n                1.08719e-04 * 0.857728610000272 / 2.384e-06,\r\n                8.29220e-04 * 0.857728610000272 / 2.384e-06,\r\n                1.399517e-03 * 0.857728610000272 / 2.384e-06,\r\n                3.5242081e-02 * 0.857728610000272 / 2.384e-06,\r\n                4.215240e-03 * 0.857728610000272 / 2.384e-06,\r\n                9.89437e-04 * 0.857728610000272 / 2.384e-06,\r\n                8.7261e-05 * 0.857728610000272 / 2.384e-06, /* 11 */\r\n                8.106e-06 * 0.857728610000272 / 2.384e-06,\r\n                9.3937e-05 * 0.857728610000272 / 2.384e-06,\r\n                1.597881e-03 * 0.857728610000272 / 2.384e-06,\r\n                1.3489246e-02 * 0.857728610000272 / 2.384e-06,\r\n                -2.2228718e-02 * 0.857728610000272 / 2.384e-06,\r\n                -3.306866e-03 * 0.857728610000272 / 2.384e-06,\r\n                -3.71456e-04 * 0.857728610000272 / 2.384e-06,\r\n                -2.1458e-05 * 0.857728610000272 / 2.384e-06,\r\n                5.993769336819237e-01, 9.427934736519954e-01,\r\n\r\n                -4.77e-07 * 0.881921264348355 / 2.384e-06,\r\n                1.08719e-04 * 0.881921264348355 / 2.384e-06,\r\n                7.8392e-04 * 0.881921264348355 / 2.384e-06,\r\n                9.71317e-04 * 0.881921264348355 / 2.384e-06,\r\n                3.5007000e-02 * 0.881921264348355 / 2.384e-06,\r\n                4.357815e-03 * 0.881921264348355 / 2.384e-06,\r\n                9.80854e-04 * 0.881921264348355 / 2.384e-06,\r\n                8.3923e-05 * 0.881921264348355 / 2.384e-06, /* 10 */\r\n                7.629e-06 * 0.881921264348355 / 2.384e-06,\r\n                7.2956e-05 * 0.881921264348355 / 2.384e-06,\r\n                1.432419e-03 * 0.881921264348355 / 2.384e-06,\r\n                1.2627602e-02 * 0.881921264348355 / 2.384e-06,\r\n                -2.3074150e-02 * 0.881921264348355 / 2.384e-06,\r\n                -3.467083e-03 * 0.881921264348355 / 2.384e-06,\r\n                -4.04358e-04 * 0.881921264348355 / 2.384e-06,\r\n                -2.3365e-05 * 0.881921264348355 / 2.384e-06,\r\n                5.345111359507916e-01, 1.111140466039205e+00,\r\n\r\n                -9.54e-07 * 0.903989293123443 / 2.384e-06,\r\n                1.08242e-04 * 0.903989293123443 / 2.384e-06,\r\n                7.31945e-04 * 0.903989293123443 / 2.384e-06,\r\n                5.15938e-04 * 0.903989293123443 / 2.384e-06,\r\n                3.4730434e-02 * 0.903989293123443 / 2.384e-06,\r\n                4.477024e-03 * 0.903989293123443 / 2.384e-06,\r\n                9.68933e-04 * 0.903989293123443 / 2.384e-06,\r\n                8.0585e-05 * 0.903989293123443 / 2.384e-06, /* 9 */\r\n                6.676e-06 * 0.903989293123443 / 2.384e-06,\r\n                5.2929e-05 * 0.903989293123443 / 2.384e-06,\r\n                1.269817e-03 * 0.903989293123443 / 2.384e-06,\r\n                1.1775017e-02 * 0.903989293123443 / 2.384e-06,\r\n                -2.3907185e-02 * 0.903989293123443 / 2.384e-06,\r\n                -3.622532e-03 * 0.903989293123443 / 2.384e-06,\r\n                -4.38213e-04 * 0.903989293123443 / 2.384e-06,\r\n                -2.5272e-05 * 0.903989293123443 / 2.384e-06,\r\n                4.729647758913199e-01, 1.268786568327291e+00,\r\n\r\n                -9.54e-07 * 0.92387953251128675613 / 2.384e-06,\r\n                1.06812e-04 * 0.92387953251128675613 / 2.384e-06,\r\n                6.74248e-04 * 0.92387953251128675613 / 2.384e-06,\r\n                3.3379e-05 * 0.92387953251128675613 / 2.384e-06,\r\n                3.4412861e-02 * 0.92387953251128675613 / 2.384e-06,\r\n                4.573822e-03 * 0.92387953251128675613 / 2.384e-06,\r\n                9.54151e-04 * 0.92387953251128675613 / 2.384e-06,\r\n                7.6771e-05 * 0.92387953251128675613 / 2.384e-06,\r\n                6.199e-06 * 0.92387953251128675613 / 2.384e-06,\r\n                3.4332e-05 * 0.92387953251128675613 / 2.384e-06,\r\n                1.111031e-03 * 0.92387953251128675613 / 2.384e-06,\r\n                1.0933399e-02 * 0.92387953251128675613 / 2.384e-06,\r\n                -2.4725437e-02 * 0.92387953251128675613 / 2.384e-06,\r\n                -3.771782e-03 * 0.92387953251128675613 / 2.384e-06,\r\n                -4.72546e-04 * 0.92387953251128675613 / 2.384e-06,\r\n                -2.7657e-05 * 0.92387953251128675613 / 2.384e-06,\r\n                4.1421356237309504879e-01, /* tan(PI/8) */\r\n                1.414213562373095e+00,\r\n\r\n                -9.54e-07 * 0.941544065183021 / 2.384e-06,\r\n                1.05381e-04 * 0.941544065183021 / 2.384e-06,\r\n                6.10352e-04 * 0.941544065183021 / 2.384e-06,\r\n                -4.75883e-04 * 0.941544065183021 / 2.384e-06,\r\n                3.4055710e-02 * 0.941544065183021 / 2.384e-06,\r\n                4.649162e-03 * 0.941544065183021 / 2.384e-06,\r\n                9.35555e-04 * 0.941544065183021 / 2.384e-06,\r\n                7.3433e-05 * 0.941544065183021 / 2.384e-06, /* 7 */\r\n                5.245e-06 * 0.941544065183021 / 2.384e-06,\r\n                1.7166e-05 * 0.941544065183021 / 2.384e-06,\r\n                9.56535e-04 * 0.941544065183021 / 2.384e-06,\r\n                1.0103703e-02 * 0.941544065183021 / 2.384e-06,\r\n                -2.5527000e-02 * 0.941544065183021 / 2.384e-06,\r\n                -3.914356e-03 * 0.941544065183021 / 2.384e-06,\r\n                -5.07355e-04 * 0.941544065183021 / 2.384e-06,\r\n                -3.0041e-05 * 0.941544065183021 / 2.384e-06,\r\n                3.578057213145241e-01, 1.546020906725474e+00,\r\n\r\n                -9.54e-07 * 0.956940335732209 / 2.384e-06,\r\n                1.02520e-04 * 0.956940335732209 / 2.384e-06,\r\n                5.39303e-04 * 0.956940335732209 / 2.384e-06,\r\n                -1.011848e-03 * 0.956940335732209 / 2.384e-06,\r\n                3.3659935e-02 * 0.956940335732209 / 2.384e-06,\r\n                4.703045e-03 * 0.956940335732209 / 2.384e-06,\r\n                9.15051e-04 * 0.956940335732209 / 2.384e-06,\r\n                7.0095e-05 * 0.956940335732209 / 2.384e-06, /* 6 */\r\n                4.768e-06 * 0.956940335732209 / 2.384e-06,\r\n                9.54e-07 * 0.956940335732209 / 2.384e-06,\r\n                8.06808e-04 * 0.956940335732209 / 2.384e-06,\r\n                9.287834e-03 * 0.956940335732209 / 2.384e-06,\r\n                -2.6310921e-02 * 0.956940335732209 / 2.384e-06,\r\n                -4.048824e-03 * 0.956940335732209 / 2.384e-06,\r\n                -5.42164e-04 * 0.956940335732209 / 2.384e-06,\r\n                -3.2425e-05 * 0.956940335732209 / 2.384e-06,\r\n                3.033466836073424e-01, 1.662939224605090e+00,\r\n\r\n                -1.431e-06 * 0.970031253194544 / 2.384e-06,\r\n                9.9182e-05 * 0.970031253194544 / 2.384e-06,\r\n                4.62532e-04 * 0.970031253194544 / 2.384e-06,\r\n                -1.573563e-03 * 0.970031253194544 / 2.384e-06,\r\n                3.3225536e-02 * 0.970031253194544 / 2.384e-06,\r\n                4.737377e-03 * 0.970031253194544 / 2.384e-06,\r\n                8.91685e-04 * 0.970031253194544 / 2.384e-06,\r\n                6.6280e-05 * 0.970031253194544 / 2.384e-06, /* 5 */\r\n                4.292e-06 * 0.970031253194544 / 2.384e-06,\r\n                -1.3828e-05 * 0.970031253194544 / 2.384e-06,\r\n                6.61850e-04 * 0.970031253194544 / 2.384e-06,\r\n                8.487225e-03 * 0.970031253194544 / 2.384e-06,\r\n                -2.7073860e-02 * 0.970031253194544 / 2.384e-06,\r\n                -4.174709e-03 * 0.970031253194544 / 2.384e-06,\r\n                -5.76973e-04 * 0.970031253194544 / 2.384e-06,\r\n                -3.4809e-05 * 0.970031253194544 / 2.384e-06,\r\n                2.504869601913055e-01, 1.763842528696710e+00,\r\n\r\n                -1.431e-06 * 0.98078528040323 / 2.384e-06,\r\n                9.5367e-05 * 0.98078528040323 / 2.384e-06,\r\n                3.78609e-04 * 0.98078528040323 / 2.384e-06,\r\n                -2.161503e-03 * 0.98078528040323 / 2.384e-06,\r\n                3.2754898e-02 * 0.98078528040323 / 2.384e-06,\r\n                4.752159e-03 * 0.98078528040323 / 2.384e-06,\r\n                8.66413e-04 * 0.98078528040323 / 2.384e-06,\r\n                6.2943e-05 * 0.98078528040323 / 2.384e-06, /* 4 */\r\n                3.815e-06 * 0.98078528040323 / 2.384e-06,\r\n                -2.718e-05 * 0.98078528040323 / 2.384e-06,\r\n                5.22137e-04 * 0.98078528040323 / 2.384e-06,\r\n                7.703304e-03 * 0.98078528040323 / 2.384e-06,\r\n                -2.7815342e-02 * 0.98078528040323 / 2.384e-06,\r\n                -4.290581e-03 * 0.98078528040323 / 2.384e-06,\r\n                -6.11782e-04 * 0.98078528040323 / 2.384e-06,\r\n                -3.7670e-05 * 0.98078528040323 / 2.384e-06,\r\n                1.989123673796580e-01, 1.847759065022573e+00,\r\n\r\n                -1.907e-06 * 0.989176509964781 / 2.384e-06,\r\n                9.0122e-05 * 0.989176509964781 / 2.384e-06,\r\n                2.88486e-04 * 0.989176509964781 / 2.384e-06,\r\n                -2.774239e-03 * 0.989176509964781 / 2.384e-06,\r\n                3.2248020e-02 * 0.989176509964781 / 2.384e-06,\r\n                4.748821e-03 * 0.989176509964781 / 2.384e-06,\r\n                8.38757e-04 * 0.989176509964781 / 2.384e-06,\r\n                5.9605e-05 * 0.989176509964781 / 2.384e-06, /* 3 */\r\n                3.338e-06 * 0.989176509964781 / 2.384e-06,\r\n                -3.9577e-05 * 0.989176509964781 / 2.384e-06,\r\n                3.88145e-04 * 0.989176509964781 / 2.384e-06,\r\n                6.937027e-03 * 0.989176509964781 / 2.384e-06,\r\n                -2.8532982e-02 * 0.989176509964781 / 2.384e-06,\r\n                -4.395962e-03 * 0.989176509964781 / 2.384e-06,\r\n                -6.46591e-04 * 0.989176509964781 / 2.384e-06,\r\n                -4.0531e-05 * 0.989176509964781 / 2.384e-06,\r\n                1.483359875383474e-01, 1.913880671464418e+00,\r\n\r\n                -1.907e-06 * 0.995184726672197 / 2.384e-06,\r\n                8.4400e-05 * 0.995184726672197 / 2.384e-06,\r\n                1.91689e-04 * 0.995184726672197 / 2.384e-06,\r\n                -3.411293e-03 * 0.995184726672197 / 2.384e-06,\r\n                3.1706810e-02 * 0.995184726672197 / 2.384e-06,\r\n                4.728317e-03 * 0.995184726672197 / 2.384e-06,\r\n                8.09669e-04 * 0.995184726672197 / 2.384e-06,\r\n                5.579e-05 * 0.995184726672197 / 2.384e-06,\r\n                3.338e-06 * 0.995184726672197 / 2.384e-06,\r\n                -5.0545e-05 * 0.995184726672197 / 2.384e-06,\r\n                2.59876e-04 * 0.995184726672197 / 2.384e-06,\r\n                6.189346e-03 * 0.995184726672197 / 2.384e-06,\r\n                -2.9224873e-02 * 0.995184726672197 / 2.384e-06,\r\n                -4.489899e-03 * 0.995184726672197 / 2.384e-06,\r\n                -6.80923e-04 * 0.995184726672197 / 2.384e-06,\r\n                -4.3392e-05 * 0.995184726672197 / 2.384e-06,\r\n                9.849140335716425e-02, 1.961570560806461e+00,\r\n\r\n                -2.384e-06 * 0.998795456205172 / 2.384e-06,\r\n                7.7724e-05 * 0.998795456205172 / 2.384e-06,\r\n                8.8215e-05 * 0.998795456205172 / 2.384e-06,\r\n                -4.072189e-03 * 0.998795456205172 / 2.384e-06,\r\n                3.1132698e-02 * 0.998795456205172 / 2.384e-06,\r\n                4.691124e-03 * 0.998795456205172 / 2.384e-06,\r\n                7.79152e-04 * 0.998795456205172 / 2.384e-06,\r\n                5.2929e-05 * 0.998795456205172 / 2.384e-06,\r\n                2.861e-06 * 0.998795456205172 / 2.384e-06,\r\n                -6.0558e-05 * 0.998795456205172 / 2.384e-06,\r\n                1.37329e-04 * 0.998795456205172 / 2.384e-06,\r\n                5.462170e-03 * 0.998795456205172 / 2.384e-06,\r\n                -2.9890060e-02 * 0.998795456205172 / 2.384e-06,\r\n                -4.570484e-03 * 0.998795456205172 / 2.384e-06,\r\n                -7.14302e-04 * 0.998795456205172 / 2.384e-06,\r\n                -4.6253e-05 * 0.998795456205172 / 2.384e-06,\r\n                4.912684976946725e-02, 1.990369453344394e+00,\r\n\r\n                3.5780907e-02 * Util.SQRT2 * 0.5 / 2.384e-06,\r\n                1.7876148e-02 * Util.SQRT2 * 0.5 / 2.384e-06,\r\n                3.134727e-03 * Util.SQRT2 * 0.5 / 2.384e-06,\r\n                2.457142e-03 * Util.SQRT2 * 0.5 / 2.384e-06,\r\n                9.71317e-04 * Util.SQRT2 * 0.5 / 2.384e-06,\r\n                2.18868e-04 * Util.SQRT2 * 0.5 / 2.384e-06,\r\n                1.01566e-04 * Util.SQRT2 * 0.5 / 2.384e-06,\r\n                1.3828e-05 * Util.SQRT2 * 0.5 / 2.384e-06,\r\n\r\n                3.0526638e-02 / 2.384e-06, 4.638195e-03 / 2.384e-06,\r\n                7.47204e-04 / 2.384e-06, 4.9591e-05 / 2.384e-06,\r\n                4.756451e-03 / 2.384e-06, 2.1458e-05 / 2.384e-06,\r\n                -6.9618e-05 / 2.384e-06, /* 2.384e-06/2.384e-06 */\r\n            ];\r\n\r\n            var NS = 12;\r\n            var NL = 36;\r\n\r\n            var win = [\r\n                [\r\n                    2.382191739347913e-13,\r\n                    6.423305872147834e-13,\r\n                    9.400849094049688e-13,\r\n                    1.122435026096556e-12,\r\n                    1.183840321267481e-12,\r\n                    1.122435026096556e-12,\r\n                    9.400849094049690e-13,\r\n                    6.423305872147839e-13,\r\n                    2.382191739347918e-13,\r\n\r\n                    5.456116108943412e-12,\r\n                    4.878985199565852e-12,\r\n                    4.240448995017367e-12,\r\n                    3.559909094758252e-12,\r\n                    2.858043359288075e-12,\r\n                    2.156177623817898e-12,\r\n                    1.475637723558783e-12,\r\n                    8.371015190102974e-13,\r\n                    2.599706096327376e-13,\r\n\r\n                    -5.456116108943412e-12,\r\n                    -4.878985199565852e-12,\r\n                    -4.240448995017367e-12,\r\n                    -3.559909094758252e-12,\r\n                    -2.858043359288076e-12,\r\n                    -2.156177623817898e-12,\r\n                    -1.475637723558783e-12,\r\n                    -8.371015190102975e-13,\r\n                    -2.599706096327376e-13,\r\n\r\n                    -2.382191739347923e-13,\r\n                    -6.423305872147843e-13,\r\n                    -9.400849094049696e-13,\r\n                    -1.122435026096556e-12,\r\n                    -1.183840321267481e-12,\r\n                    -1.122435026096556e-12,\r\n                    -9.400849094049694e-13,\r\n                    -6.423305872147840e-13,\r\n                    -2.382191739347918e-13,\r\n                ],\r\n                [\r\n                    2.382191739347913e-13,\r\n                    6.423305872147834e-13,\r\n                    9.400849094049688e-13,\r\n                    1.122435026096556e-12,\r\n                    1.183840321267481e-12,\r\n                    1.122435026096556e-12,\r\n                    9.400849094049688e-13,\r\n                    6.423305872147841e-13,\r\n                    2.382191739347918e-13,\r\n\r\n                    5.456116108943413e-12,\r\n                    4.878985199565852e-12,\r\n                    4.240448995017367e-12,\r\n                    3.559909094758253e-12,\r\n                    2.858043359288075e-12,\r\n                    2.156177623817898e-12,\r\n                    1.475637723558782e-12,\r\n                    8.371015190102975e-13,\r\n                    2.599706096327376e-13,\r\n\r\n                    -5.461314069809755e-12,\r\n                    -4.921085770524055e-12,\r\n                    -4.343405037091838e-12,\r\n                    -3.732668368707687e-12,\r\n                    -3.093523840190885e-12,\r\n                    -2.430835727329465e-12,\r\n                    -1.734679010007751e-12,\r\n                    -9.748253656609281e-13,\r\n                    -2.797435120168326e-13,\r\n\r\n                    0.000000000000000e+00,\r\n                    0.000000000000000e+00,\r\n                    0.000000000000000e+00,\r\n                    0.000000000000000e+00,\r\n                    0.000000000000000e+00,\r\n                    0.000000000000000e+00,\r\n                    -2.283748241799531e-13,\r\n                    -4.037858874020686e-13,\r\n                    -2.146547464825323e-13,\r\n                ],\r\n                [\r\n                    1.316524975873958e-01, /* win[SHORT_TYPE] */\r\n                    4.142135623730950e-01,\r\n                    7.673269879789602e-01,\r\n\r\n                    1.091308501069271e+00, /* tantab_l */\r\n                    1.303225372841206e+00,\r\n                    1.569685577117490e+00,\r\n                    1.920982126971166e+00,\r\n                    2.414213562373094e+00,\r\n                    3.171594802363212e+00,\r\n                    4.510708503662055e+00,\r\n                    7.595754112725146e+00,\r\n                    2.290376554843115e+01,\r\n\r\n                    0.98480775301220802032, /* cx */\r\n                    0.64278760968653936292,\r\n                    0.34202014332566882393,\r\n                    0.93969262078590842791,\r\n                    -0.17364817766693030343,\r\n                    -0.76604444311897790243,\r\n                    0.86602540378443870761,\r\n                    0.500000000000000e+00,\r\n\r\n                    -5.144957554275265e-01, /* ca */\r\n                    -4.717319685649723e-01,\r\n                    -3.133774542039019e-01,\r\n                    -1.819131996109812e-01,\r\n                    -9.457419252642064e-02,\r\n                    -4.096558288530405e-02,\r\n                    -1.419856857247115e-02,\r\n                    -3.699974673760037e-03,\r\n\r\n                    8.574929257125442e-01, /* cs */\r\n                    8.817419973177052e-01,\r\n                    9.496286491027329e-01,\r\n                    9.833145924917901e-01,\r\n                    9.955178160675857e-01,\r\n                    9.991605581781475e-01,\r\n                    9.998991952444470e-01,\r\n                    9.999931550702802e-01,\r\n                ],\r\n                [\r\n                    0.000000000000000e+00,\r\n                    0.000000000000000e+00,\r\n                    0.000000000000000e+00,\r\n                    0.000000000000000e+00,\r\n                    0.000000000000000e+00,\r\n                    0.000000000000000e+00,\r\n                    2.283748241799531e-13,\r\n                    4.037858874020686e-13,\r\n                    2.146547464825323e-13,\r\n\r\n                    5.461314069809755e-12,\r\n                    4.921085770524055e-12,\r\n                    4.343405037091838e-12,\r\n                    3.732668368707687e-12,\r\n                    3.093523840190885e-12,\r\n                    2.430835727329466e-12,\r\n                    1.734679010007751e-12,\r\n                    9.748253656609281e-13,\r\n                    2.797435120168326e-13,\r\n\r\n                    -5.456116108943413e-12,\r\n                    -4.878985199565852e-12,\r\n                    -4.240448995017367e-12,\r\n                    -3.559909094758253e-12,\r\n                    -2.858043359288075e-12,\r\n                    -2.156177623817898e-12,\r\n                    -1.475637723558782e-12,\r\n                    -8.371015190102975e-13,\r\n                    -2.599706096327376e-13,\r\n\r\n                    -2.382191739347913e-13,\r\n                    -6.423305872147834e-13,\r\n                    -9.400849094049688e-13,\r\n                    -1.122435026096556e-12,\r\n                    -1.183840321267481e-12,\r\n                    -1.122435026096556e-12,\r\n                    -9.400849094049688e-13,\r\n                    -6.423305872147841e-13,\r\n                    -2.382191739347918e-13,\r\n                ]\r\n            ];\r\n\r\n            var tantab_l = win[Encoder.SHORT_TYPE];\r\n            var cx = win[Encoder.SHORT_TYPE];\r\n            var ca = win[Encoder.SHORT_TYPE];\r\n            var cs = win[Encoder.SHORT_TYPE];\r\n\r\n            /**\r\n             * new IDCT routine written by Takehiro TOMINAGA\r\n             *\r\n             * PURPOSE: Overlapping window on PCM samples<BR>\r\n             *\r\n             * SEMANTICS:<BR>\r\n             * 32 16-bit pcm samples are scaled to fractional 2's complement and\r\n             * concatenated to the end of the window buffer #x#. The updated window\r\n             * buffer #x# is then windowed by the analysis window #c# to produce the\r\n             * windowed sample #z#\r\n             */\r\n            var order = [\r\n                0, 1, 16, 17, 8, 9, 24, 25, 4, 5, 20, 21, 12, 13, 28, 29,\r\n                2, 3, 18, 19, 10, 11, 26, 27, 6, 7, 22, 23, 14, 15, 30, 31\r\n            ];\r\n\r\n            /**\r\n             * returns sum_j=0^31 a[j]*cos(PI*j*(k+1/2)/32), 0<=k<32\r\n             */\r\n            function window_subband(x1, x1Pos, a) {\r\n                var wp = 10;\r\n\r\n                var x2 = x1Pos + 238 - 14 - 286;\r\n\r\n                for (var i = -15; i < 0; i++) {\r\n                    var w, s, t;\r\n\r\n                    w = enwindow[wp + -10];\r\n                    s = x1[x2 + -224] * w;\r\n                    t = x1[x1Pos + 224] * w;\r\n                    w = enwindow[wp + -9];\r\n                    s += x1[x2 + -160] * w;\r\n                    t += x1[x1Pos + 160] * w;\r\n                    w = enwindow[wp + -8];\r\n                    s += x1[x2 + -96] * w;\r\n                    t += x1[x1Pos + 96] * w;\r\n                    w = enwindow[wp + -7];\r\n                    s += x1[x2 + -32] * w;\r\n                    t += x1[x1Pos + 32] * w;\r\n                    w = enwindow[wp + -6];\r\n                    s += x1[x2 + 32] * w;\r\n                    t += x1[x1Pos + -32] * w;\r\n                    w = enwindow[wp + -5];\r\n                    s += x1[x2 + 96] * w;\r\n                    t += x1[x1Pos + -96] * w;\r\n                    w = enwindow[wp + -4];\r\n                    s += x1[x2 + 160] * w;\r\n                    t += x1[x1Pos + -160] * w;\r\n                    w = enwindow[wp + -3];\r\n                    s += x1[x2 + 224] * w;\r\n                    t += x1[x1Pos + -224] * w;\r\n\r\n                    w = enwindow[wp + -2];\r\n                    s += x1[x1Pos + -256] * w;\r\n                    t -= x1[x2 + 256] * w;\r\n                    w = enwindow[wp + -1];\r\n                    s += x1[x1Pos + -192] * w;\r\n                    t -= x1[x2 + 192] * w;\r\n                    w = enwindow[wp + 0];\r\n                    s += x1[x1Pos + -128] * w;\r\n                    t -= x1[x2 + 128] * w;\r\n                    w = enwindow[wp + 1];\r\n                    s += x1[x1Pos + -64] * w;\r\n                    t -= x1[x2 + 64] * w;\r\n                    w = enwindow[wp + 2];\r\n                    s += x1[x1Pos + 0] * w;\r\n                    t -= x1[x2 + 0] * w;\r\n                    w = enwindow[wp + 3];\r\n                    s += x1[x1Pos + 64] * w;\r\n                    t -= x1[x2 + -64] * w;\r\n                    w = enwindow[wp + 4];\r\n                    s += x1[x1Pos + 128] * w;\r\n                    t -= x1[x2 + -128] * w;\r\n                    w = enwindow[wp + 5];\r\n                    s += x1[x1Pos + 192] * w;\r\n                    t -= x1[x2 + -192] * w;\r\n\r\n                    /*\r\n                     * this multiplyer could be removed, but it needs more 256 FLOAT\r\n                     * data. thinking about the data cache performance, I think we\r\n                     * should not use such a huge table. tt 2000/Oct/25\r\n                     */\r\n                    s *= enwindow[wp + 6];\r\n                    w = t - s;\r\n                    a[30 + i * 2] = t + s;\r\n                    a[31 + i * 2] = enwindow[wp + 7] * w;\r\n                    wp += 18;\r\n                    x1Pos--;\r\n                    x2++;\r\n                }\r\n                {\r\n                    var s, t, u, v;\r\n                    t = x1[x1Pos + -16] * enwindow[wp + -10];\r\n                    s = x1[x1Pos + -32] * enwindow[wp + -2];\r\n                    t += (x1[x1Pos + -48] - x1[x1Pos + 16]) * enwindow[wp + -9];\r\n                    s += x1[x1Pos + -96] * enwindow[wp + -1];\r\n                    t += (x1[x1Pos + -80] + x1[x1Pos + 48]) * enwindow[wp + -8];\r\n                    s += x1[x1Pos + -160] * enwindow[wp + 0];\r\n                    t += (x1[x1Pos + -112] - x1[x1Pos + 80]) * enwindow[wp + -7];\r\n                    s += x1[x1Pos + -224] * enwindow[wp + 1];\r\n                    t += (x1[x1Pos + -144] + x1[x1Pos + 112]) * enwindow[wp + -6];\r\n                    s -= x1[x1Pos + 32] * enwindow[wp + 2];\r\n                    t += (x1[x1Pos + -176] - x1[x1Pos + 144]) * enwindow[wp + -5];\r\n                    s -= x1[x1Pos + 96] * enwindow[wp + 3];\r\n                    t += (x1[x1Pos + -208] + x1[x1Pos + 176]) * enwindow[wp + -4];\r\n                    s -= x1[x1Pos + 160] * enwindow[wp + 4];\r\n                    t += (x1[x1Pos + -240] - x1[x1Pos + 208]) * enwindow[wp + -3];\r\n                    s -= x1[x1Pos + 224];\r\n\r\n                    u = s - t;\r\n                    v = s + t;\r\n\r\n                    t = a[14];\r\n                    s = a[15] - t;\r\n\r\n                    a[31] = v + t; /* A0 */\r\n                    a[30] = u + s; /* A1 */\r\n                    a[15] = u - s; /* A2 */\r\n                    a[14] = v - t; /* A3 */\r\n                }\r\n                {\r\n                    var xr;\r\n                    xr = a[28] - a[0];\r\n                    a[0] += a[28];\r\n                    a[28] = xr * enwindow[wp + -2 * 18 + 7];\r\n                    xr = a[29] - a[1];\r\n                    a[1] += a[29];\r\n                    a[29] = xr * enwindow[wp + -2 * 18 + 7];\r\n\r\n                    xr = a[26] - a[2];\r\n                    a[2] += a[26];\r\n                    a[26] = xr * enwindow[wp + -4 * 18 + 7];\r\n                    xr = a[27] - a[3];\r\n                    a[3] += a[27];\r\n                    a[27] = xr * enwindow[wp + -4 * 18 + 7];\r\n\r\n                    xr = a[24] - a[4];\r\n                    a[4] += a[24];\r\n                    a[24] = xr * enwindow[wp + -6 * 18 + 7];\r\n                    xr = a[25] - a[5];\r\n                    a[5] += a[25];\r\n                    a[25] = xr * enwindow[wp + -6 * 18 + 7];\r\n\r\n                    xr = a[22] - a[6];\r\n                    a[6] += a[22];\r\n                    a[22] = xr * Util.SQRT2;\r\n                    xr = a[23] - a[7];\r\n                    a[7] += a[23];\r\n                    a[23] = xr * Util.SQRT2 - a[7];\r\n                    a[7] -= a[6];\r\n                    a[22] -= a[7];\r\n                    a[23] -= a[22];\r\n\r\n                    xr = a[6];\r\n                    a[6] = a[31] - xr;\r\n                    a[31] = a[31] + xr;\r\n                    xr = a[7];\r\n                    a[7] = a[30] - xr;\r\n                    a[30] = a[30] + xr;\r\n                    xr = a[22];\r\n                    a[22] = a[15] - xr;\r\n                    a[15] = a[15] + xr;\r\n                    xr = a[23];\r\n                    a[23] = a[14] - xr;\r\n                    a[14] = a[14] + xr;\r\n\r\n                    xr = a[20] - a[8];\r\n                    a[8] += a[20];\r\n                    a[20] = xr * enwindow[wp + -10 * 18 + 7];\r\n                    xr = a[21] - a[9];\r\n                    a[9] += a[21];\r\n                    a[21] = xr * enwindow[wp + -10 * 18 + 7];\r\n\r\n                    xr = a[18] - a[10];\r\n                    a[10] += a[18];\r\n                    a[18] = xr * enwindow[wp + -12 * 18 + 7];\r\n                    xr = a[19] - a[11];\r\n                    a[11] += a[19];\r\n                    a[19] = xr * enwindow[wp + -12 * 18 + 7];\r\n\r\n                    xr = a[16] - a[12];\r\n                    a[12] += a[16];\r\n                    a[16] = xr * enwindow[wp + -14 * 18 + 7];\r\n                    xr = a[17] - a[13];\r\n                    a[13] += a[17];\r\n                    a[17] = xr * enwindow[wp + -14 * 18 + 7];\r\n\r\n                    xr = -a[20] + a[24];\r\n                    a[20] += a[24];\r\n                    a[24] = xr * enwindow[wp + -12 * 18 + 7];\r\n                    xr = -a[21] + a[25];\r\n                    a[21] += a[25];\r\n                    a[25] = xr * enwindow[wp + -12 * 18 + 7];\r\n\r\n                    xr = a[4] - a[8];\r\n                    a[4] += a[8];\r\n                    a[8] = xr * enwindow[wp + -12 * 18 + 7];\r\n                    xr = a[5] - a[9];\r\n                    a[5] += a[9];\r\n                    a[9] = xr * enwindow[wp + -12 * 18 + 7];\r\n\r\n                    xr = a[0] - a[12];\r\n                    a[0] += a[12];\r\n                    a[12] = xr * enwindow[wp + -4 * 18 + 7];\r\n                    xr = a[1] - a[13];\r\n                    a[1] += a[13];\r\n                    a[13] = xr * enwindow[wp + -4 * 18 + 7];\r\n                    xr = a[16] - a[28];\r\n                    a[16] += a[28];\r\n                    a[28] = xr * enwindow[wp + -4 * 18 + 7];\r\n                    xr = -a[17] + a[29];\r\n                    a[17] += a[29];\r\n                    a[29] = xr * enwindow[wp + -4 * 18 + 7];\r\n\r\n                    xr = Util.SQRT2 * (a[2] - a[10]);\r\n                    a[2] += a[10];\r\n                    a[10] = xr;\r\n                    xr = Util.SQRT2 * (a[3] - a[11]);\r\n                    a[3] += a[11];\r\n                    a[11] = xr;\r\n                    xr = Util.SQRT2 * (-a[18] + a[26]);\r\n                    a[18] += a[26];\r\n                    a[26] = xr - a[18];\r\n                    xr = Util.SQRT2 * (-a[19] + a[27]);\r\n                    a[19] += a[27];\r\n                    a[27] = xr - a[19];\r\n\r\n                    xr = a[2];\r\n                    a[19] -= a[3];\r\n                    a[3] -= xr;\r\n                    a[2] = a[31] - xr;\r\n                    a[31] += xr;\r\n                    xr = a[3];\r\n                    a[11] -= a[19];\r\n                    a[18] -= xr;\r\n                    a[3] = a[30] - xr;\r\n                    a[30] += xr;\r\n                    xr = a[18];\r\n                    a[27] -= a[11];\r\n                    a[19] -= xr;\r\n                    a[18] = a[15] - xr;\r\n                    a[15] += xr;\r\n\r\n                    xr = a[19];\r\n                    a[10] -= xr;\r\n                    a[19] = a[14] - xr;\r\n                    a[14] += xr;\r\n                    xr = a[10];\r\n                    a[11] -= xr;\r\n                    a[10] = a[23] - xr;\r\n                    a[23] += xr;\r\n                    xr = a[11];\r\n                    a[26] -= xr;\r\n                    a[11] = a[22] - xr;\r\n                    a[22] += xr;\r\n                    xr = a[26];\r\n                    a[27] -= xr;\r\n                    a[26] = a[7] - xr;\r\n                    a[7] += xr;\r\n\r\n                    xr = a[27];\r\n                    a[27] = a[6] - xr;\r\n                    a[6] += xr;\r\n\r\n                    xr = Util.SQRT2 * (a[0] - a[4]);\r\n                    a[0] += a[4];\r\n                    a[4] = xr;\r\n                    xr = Util.SQRT2 * (a[1] - a[5]);\r\n                    a[1] += a[5];\r\n                    a[5] = xr;\r\n                    xr = Util.SQRT2 * (a[16] - a[20]);\r\n                    a[16] += a[20];\r\n                    a[20] = xr;\r\n                    xr = Util.SQRT2 * (a[17] - a[21]);\r\n                    a[17] += a[21];\r\n                    a[21] = xr;\r\n\r\n                    xr = -Util.SQRT2 * (a[8] - a[12]);\r\n                    a[8] += a[12];\r\n                    a[12] = xr - a[8];\r\n                    xr = -Util.SQRT2 * (a[9] - a[13]);\r\n                    a[9] += a[13];\r\n                    a[13] = xr - a[9];\r\n                    xr = -Util.SQRT2 * (a[25] - a[29]);\r\n                    a[25] += a[29];\r\n                    a[29] = xr - a[25];\r\n                    xr = -Util.SQRT2 * (a[24] + a[28]);\r\n                    a[24] -= a[28];\r\n                    a[28] = xr - a[24];\r\n\r\n                    xr = a[24] - a[16];\r\n                    a[24] = xr;\r\n                    xr = a[20] - xr;\r\n                    a[20] = xr;\r\n                    xr = a[28] - xr;\r\n                    a[28] = xr;\r\n\r\n                    xr = a[25] - a[17];\r\n                    a[25] = xr;\r\n                    xr = a[21] - xr;\r\n                    a[21] = xr;\r\n                    xr = a[29] - xr;\r\n                    a[29] = xr;\r\n\r\n                    xr = a[17] - a[1];\r\n                    a[17] = xr;\r\n                    xr = a[9] - xr;\r\n                    a[9] = xr;\r\n                    xr = a[25] - xr;\r\n                    a[25] = xr;\r\n                    xr = a[5] - xr;\r\n                    a[5] = xr;\r\n                    xr = a[21] - xr;\r\n                    a[21] = xr;\r\n                    xr = a[13] - xr;\r\n                    a[13] = xr;\r\n                    xr = a[29] - xr;\r\n                    a[29] = xr;\r\n\r\n                    xr = a[1] - a[0];\r\n                    a[1] = xr;\r\n                    xr = a[16] - xr;\r\n                    a[16] = xr;\r\n                    xr = a[17] - xr;\r\n                    a[17] = xr;\r\n                    xr = a[8] - xr;\r\n                    a[8] = xr;\r\n                    xr = a[9] - xr;\r\n                    a[9] = xr;\r\n                    xr = a[24] - xr;\r\n                    a[24] = xr;\r\n                    xr = a[25] - xr;\r\n                    a[25] = xr;\r\n                    xr = a[4] - xr;\r\n                    a[4] = xr;\r\n                    xr = a[5] - xr;\r\n                    a[5] = xr;\r\n                    xr = a[20] - xr;\r\n                    a[20] = xr;\r\n                    xr = a[21] - xr;\r\n                    a[21] = xr;\r\n                    xr = a[12] - xr;\r\n                    a[12] = xr;\r\n                    xr = a[13] - xr;\r\n                    a[13] = xr;\r\n                    xr = a[28] - xr;\r\n                    a[28] = xr;\r\n                    xr = a[29] - xr;\r\n                    a[29] = xr;\r\n\r\n                    xr = a[0];\r\n                    a[0] += a[31];\r\n                    a[31] -= xr;\r\n                    xr = a[1];\r\n                    a[1] += a[30];\r\n                    a[30] -= xr;\r\n                    xr = a[16];\r\n                    a[16] += a[15];\r\n                    a[15] -= xr;\r\n                    xr = a[17];\r\n                    a[17] += a[14];\r\n                    a[14] -= xr;\r\n                    xr = a[8];\r\n                    a[8] += a[23];\r\n                    a[23] -= xr;\r\n                    xr = a[9];\r\n                    a[9] += a[22];\r\n                    a[22] -= xr;\r\n                    xr = a[24];\r\n                    a[24] += a[7];\r\n                    a[7] -= xr;\r\n                    xr = a[25];\r\n                    a[25] += a[6];\r\n                    a[6] -= xr;\r\n                    xr = a[4];\r\n                    a[4] += a[27];\r\n                    a[27] -= xr;\r\n                    xr = a[5];\r\n                    a[5] += a[26];\r\n                    a[26] -= xr;\r\n                    xr = a[20];\r\n                    a[20] += a[11];\r\n                    a[11] -= xr;\r\n                    xr = a[21];\r\n                    a[21] += a[10];\r\n                    a[10] -= xr;\r\n                    xr = a[12];\r\n                    a[12] += a[19];\r\n                    a[19] -= xr;\r\n                    xr = a[13];\r\n                    a[13] += a[18];\r\n                    a[18] -= xr;\r\n                    xr = a[28];\r\n                    a[28] += a[3];\r\n                    a[3] -= xr;\r\n                    xr = a[29];\r\n                    a[29] += a[2];\r\n                    a[2] -= xr;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Function: Calculation of the MDCT In the case of long blocks (type 0,1,3)\r\n             * there are 36 coefficents in the time domain and 18 in the frequency\r\n             * domain.<BR>\r\n             * In the case of short blocks (type 2) there are 3 transformations with\r\n             * short length. This leads to 12 coefficents in the time and 6 in the\r\n             * frequency domain. In this case the results are stored side by side in the\r\n             * vector out[].\r\n             *\r\n             * New layer3\r\n             */\r\n            function mdct_short(inout, inoutPos) {\r\n                for (var l = 0; l < 3; l++) {\r\n                    var tc0, tc1, tc2, ts0, ts1, ts2;\r\n\r\n                    ts0 = inout[inoutPos + 2 * 3] * win[Encoder.SHORT_TYPE][0]\r\n                        - inout[inoutPos + 5 * 3];\r\n                    tc0 = inout[inoutPos + 0 * 3] * win[Encoder.SHORT_TYPE][2]\r\n                        - inout[inoutPos + 3 * 3];\r\n                    tc1 = ts0 + tc0;\r\n                    tc2 = ts0 - tc0;\r\n\r\n                    ts0 = inout[inoutPos + 5 * 3] * win[Encoder.SHORT_TYPE][0]\r\n                        + inout[inoutPos + 2 * 3];\r\n                    tc0 = inout[inoutPos + 3 * 3] * win[Encoder.SHORT_TYPE][2]\r\n                        + inout[inoutPos + 0 * 3];\r\n                    ts1 = ts0 + tc0;\r\n                    ts2 = -ts0 + tc0;\r\n\r\n                    tc0 = (inout[inoutPos + 1 * 3] * win[Encoder.SHORT_TYPE][1] - inout[inoutPos + 4 * 3]) * 2.069978111953089e-11;\r\n                    /*\r\n                     * tritab_s [ 1 ]\r\n                     */\r\n                    ts0 = (inout[inoutPos + 4 * 3] * win[Encoder.SHORT_TYPE][1] + inout[inoutPos + 1 * 3]) * 2.069978111953089e-11;\r\n                    /*\r\n                     * tritab_s [ 1 ]\r\n                     */\r\n                    inout[inoutPos + 3 * 0] = tc1 * 1.907525191737280e-11 + tc0;\r\n                    /*\r\n                     * tritab_s[ 2 ]\r\n                     */\r\n                    inout[inoutPos + 3 * 5] = -ts1 * 1.907525191737280e-11 + ts0;\r\n                    /*\r\n                     * tritab_s[0 ]\r\n                     */\r\n                    tc2 = tc2 * 0.86602540378443870761 * 1.907525191737281e-11;\r\n                    /*\r\n                     * tritab_s[ 2]\r\n                     */\r\n                    ts1 = ts1 * 0.5 * 1.907525191737281e-11 + ts0;\r\n                    inout[inoutPos + 3 * 1] = tc2 - ts1;\r\n                    inout[inoutPos + 3 * 2] = tc2 + ts1;\r\n\r\n                    tc1 = tc1 * 0.5 * 1.907525191737281e-11 - tc0;\r\n                    ts2 = ts2 * 0.86602540378443870761 * 1.907525191737281e-11;\r\n                    /*\r\n                     * tritab_s[ 0]\r\n                     */\r\n                    inout[inoutPos + 3 * 3] = tc1 + ts2;\r\n                    inout[inoutPos + 3 * 4] = tc1 - ts2;\r\n\r\n                    inoutPos++;\r\n                }\r\n            }\r\n\r\n            function mdct_long(out, outPos, _in) {\r\n                var ct, st;\r\n                {\r\n                    var tc1, tc2, tc3, tc4, ts5, ts6, ts7, ts8;\r\n                    /* 1,2, 5,6, 9,10, 13,14, 17 */\r\n                    tc1 = _in[17] - _in[9];\r\n                    tc3 = _in[15] - _in[11];\r\n                    tc4 = _in[14] - _in[12];\r\n                    ts5 = _in[0] + _in[8];\r\n                    ts6 = _in[1] + _in[7];\r\n                    ts7 = _in[2] + _in[6];\r\n                    ts8 = _in[3] + _in[5];\r\n\r\n                    out[outPos + 17] = (ts5 + ts7 - ts8) - (ts6 - _in[4]);\r\n                    st = (ts5 + ts7 - ts8) * cx[12 + 7] + (ts6 - _in[4]);\r\n                    ct = (tc1 - tc3 - tc4) * cx[12 + 6];\r\n                    out[outPos + 5] = ct + st;\r\n                    out[outPos + 6] = ct - st;\r\n\r\n                    tc2 = (_in[16] - _in[10]) * cx[12 + 6];\r\n                    ts6 = ts6 * cx[12 + 7] + _in[4];\r\n                    ct = tc1 * cx[12 + 0] + tc2 + tc3 * cx[12 + 1] + tc4 * cx[12 + 2];\r\n                    st = -ts5 * cx[12 + 4] + ts6 - ts7 * cx[12 + 5] + ts8 * cx[12 + 3];\r\n                    out[outPos + 1] = ct + st;\r\n                    out[outPos + 2] = ct - st;\r\n\r\n                    ct = tc1 * cx[12 + 1] - tc2 - tc3 * cx[12 + 2] + tc4 * cx[12 + 0];\r\n                    st = -ts5 * cx[12 + 5] + ts6 - ts7 * cx[12 + 3] + ts8 * cx[12 + 4];\r\n                    out[outPos + 9] = ct + st;\r\n                    out[outPos + 10] = ct - st;\r\n\r\n                    ct = tc1 * cx[12 + 2] - tc2 + tc3 * cx[12 + 0] - tc4 * cx[12 + 1];\r\n                    st = ts5 * cx[12 + 3] - ts6 + ts7 * cx[12 + 4] - ts8 * cx[12 + 5];\r\n                    out[outPos + 13] = ct + st;\r\n                    out[outPos + 14] = ct - st;\r\n                }\r\n                {\r\n                    var ts1, ts2, ts3, ts4, tc5, tc6, tc7, tc8;\r\n\r\n                    ts1 = _in[8] - _in[0];\r\n                    ts3 = _in[6] - _in[2];\r\n                    ts4 = _in[5] - _in[3];\r\n                    tc5 = _in[17] + _in[9];\r\n                    tc6 = _in[16] + _in[10];\r\n                    tc7 = _in[15] + _in[11];\r\n                    tc8 = _in[14] + _in[12];\r\n\r\n                    out[outPos + 0] = (tc5 + tc7 + tc8) + (tc6 + _in[13]);\r\n                    ct = (tc5 + tc7 + tc8) * cx[12 + 7] - (tc6 + _in[13]);\r\n                    st = (ts1 - ts3 + ts4) * cx[12 + 6];\r\n                    out[outPos + 11] = ct + st;\r\n                    out[outPos + 12] = ct - st;\r\n\r\n                    ts2 = (_in[7] - _in[1]) * cx[12 + 6];\r\n                    tc6 = _in[13] - tc6 * cx[12 + 7];\r\n                    ct = tc5 * cx[12 + 3] - tc6 + tc7 * cx[12 + 4] + tc8 * cx[12 + 5];\r\n                    st = ts1 * cx[12 + 2] + ts2 + ts3 * cx[12 + 0] + ts4 * cx[12 + 1];\r\n                    out[outPos + 3] = ct + st;\r\n                    out[outPos + 4] = ct - st;\r\n\r\n                    ct = -tc5 * cx[12 + 5] + tc6 - tc7 * cx[12 + 3] - tc8 * cx[12 + 4];\r\n                    st = ts1 * cx[12 + 1] + ts2 - ts3 * cx[12 + 2] - ts4 * cx[12 + 0];\r\n                    out[outPos + 7] = ct + st;\r\n                    out[outPos + 8] = ct - st;\r\n\r\n                    ct = -tc5 * cx[12 + 4] + tc6 - tc7 * cx[12 + 5] - tc8 * cx[12 + 3];\r\n                    st = ts1 * cx[12 + 0] - ts2 + ts3 * cx[12 + 1] - ts4 * cx[12 + 2];\r\n                    out[outPos + 15] = ct + st;\r\n                    out[outPos + 16] = ct - st;\r\n                }\r\n            }\r\n\r\n            this.mdct_sub48 = function(gfc, w0, w1) {\r\n                var wk = w0;\r\n                var wkPos = 286;\r\n                /* thinking cache performance, ch->gr loop is better than gr->ch loop */\r\n                for (var ch = 0; ch < gfc.channels_out; ch++) {\r\n                    for (var gr = 0; gr < gfc.mode_gr; gr++) {\r\n                        var band;\r\n                        var gi = (gfc.l3_side.tt[gr][ch]);\r\n                        var mdct_enc = gi.xr;\r\n                        var mdct_encPos = 0;\r\n                        var samp = gfc.sb_sample[ch][1 - gr];\r\n                        var sampPos = 0;\r\n\r\n                        for (var k = 0; k < 18 / 2; k++) {\r\n                            window_subband(wk, wkPos, samp[sampPos]);\r\n                            window_subband(wk, wkPos + 32, samp[sampPos + 1]);\r\n                            sampPos += 2;\r\n                            wkPos += 64;\r\n                            /*\r\n                             * Compensate for inversion in the analysis filter\r\n                             */\r\n                            for (band = 1; band < 32; band += 2) {\r\n                                samp[sampPos - 1][band] *= -1;\r\n                            }\r\n                        }\r\n\r\n                        /*\r\n                         * Perform imdct of 18 previous subband samples + 18 current\r\n                         * subband samples\r\n                         */\r\n                        for (band = 0; band < 32; band++, mdct_encPos += 18) {\r\n                            var type = gi.block_type;\r\n                            var band0 = gfc.sb_sample[ch][gr];\r\n                            var band1 = gfc.sb_sample[ch][1 - gr];\r\n                            if (gi.mixed_block_flag != 0 && band < 2)\r\n                                type = 0;\r\n                            if (gfc.amp_filter[band] < 1e-12) {\r\n                                Arrays.fill(mdct_enc, mdct_encPos + 0,\r\n                                    mdct_encPos + 18, 0);\r\n                            } else {\r\n                                if (gfc.amp_filter[band] < 1.0) {\r\n                                    for (var k = 0; k < 18; k++)\r\n                                        band1[k][order[band]] *= gfc.amp_filter[band];\r\n                                }\r\n                                if (type == Encoder.SHORT_TYPE) {\r\n                                    for (var k = -NS / 4; k < 0; k++) {\r\n                                        var w = win[Encoder.SHORT_TYPE][k + 3];\r\n                                        mdct_enc[mdct_encPos + k * 3 + 9] = band0[9 + k][order[band]]\r\n                                            * w - band0[8 - k][order[band]];\r\n                                        mdct_enc[mdct_encPos + k * 3 + 18] = band0[14 - k][order[band]]\r\n                                            * w + band0[15 + k][order[band]];\r\n                                        mdct_enc[mdct_encPos + k * 3 + 10] = band0[15 + k][order[band]]\r\n                                            * w - band0[14 - k][order[band]];\r\n                                        mdct_enc[mdct_encPos + k * 3 + 19] = band1[2 - k][order[band]]\r\n                                            * w + band1[3 + k][order[band]];\r\n                                        mdct_enc[mdct_encPos + k * 3 + 11] = band1[3 + k][order[band]]\r\n                                            * w - band1[2 - k][order[band]];\r\n                                        mdct_enc[mdct_encPos + k * 3 + 20] = band1[8 - k][order[band]]\r\n                                            * w + band1[9 + k][order[band]];\r\n                                    }\r\n                                    mdct_short(mdct_enc, mdct_encPos);\r\n                                } else {\r\n                                    var work = new_float(18);\r\n                                    for (var k = -NL / 4; k < 0; k++) {\r\n                                        var a, b;\r\n                                        a = win[type][k + 27]\r\n                                            * band1[k + 9][order[band]]\r\n                                            + win[type][k + 36]\r\n                                            * band1[8 - k][order[band]];\r\n                                        b = win[type][k + 9]\r\n                                            * band0[k + 9][order[band]]\r\n                                            - win[type][k + 18]\r\n                                            * band0[8 - k][order[band]];\r\n                                        work[k + 9] = a - b * tantab_l[3 + k + 9];\r\n                                        work[k + 18] = a * tantab_l[3 + k + 9] + b;\r\n                                    }\r\n\r\n                                    mdct_long(mdct_enc, mdct_encPos, work);\r\n                                }\r\n                            }\r\n                            /*\r\n                             * Perform aliasing reduction butterfly\r\n                             */\r\n                            if (type != Encoder.SHORT_TYPE && band != 0) {\r\n                                for (var k = 7; k >= 0; --k) {\r\n                                    var bu, bd;\r\n                                    bu = mdct_enc[mdct_encPos + k] * ca[20 + k]\r\n                                        + mdct_enc[mdct_encPos + -1 - k]\r\n                                        * cs[28 + k];\r\n                                    bd = mdct_enc[mdct_encPos + k] * cs[28 + k]\r\n                                        - mdct_enc[mdct_encPos + -1 - k]\r\n                                        * ca[20 + k];\r\n\r\n                                    mdct_enc[mdct_encPos + -1 - k] = bu;\r\n                                    mdct_enc[mdct_encPos + k] = bd;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    wk = w1;\r\n                    wkPos = 286;\r\n                    if (gfc.mode_gr == 1) {\r\n                        for (var i = 0; i < 18; i++) {\r\n                            System.arraycopy(gfc.sb_sample[ch][1][i], 0,\r\n                                gfc.sb_sample[ch][0][i], 0, 32);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n//package mp3;\r\n\r\n\r\n        function III_psy_ratio() {\r\n            this.thm = new III_psy_xmin();\r\n            this.en = new III_psy_xmin();\r\n        }\r\n\r\n\r\n        /**\r\n         * ENCDELAY The encoder delay.\r\n         *\r\n         * Minimum allowed is MDCTDELAY (see below)\r\n         *\r\n         * The first 96 samples will be attenuated, so using a value less than 96\r\n         * will result in corrupt data for the first 96-ENCDELAY samples.\r\n         *\r\n         * suggested: 576 set to 1160 to sync with FhG.\r\n         */\r\n        Encoder.ENCDELAY = 576;\r\n        /**\r\n         * make sure there is at least one complete frame after the last frame\r\n         * containing real data\r\n         *\r\n         * Using a value of 288 would be sufficient for a a very sophisticated\r\n         * decoder that can decode granule-by-granule instead of frame by frame. But\r\n         * lets not assume this, and assume the decoder will not decode frame N\r\n         * unless it also has data for frame N+1\r\n         */\r\n        Encoder.POSTDELAY = 1152;\r\n\r\n        /**\r\n         * delay of the MDCT used in mdct.c original ISO routines had a delay of\r\n         * 528! Takehiro's routines:\r\n         */\r\n        Encoder.MDCTDELAY = 48;\r\n        Encoder.FFTOFFSET = (224 + Encoder.MDCTDELAY);\r\n\r\n        /**\r\n         * Most decoders, including the one we use, have a delay of 528 samples.\r\n         */\r\n        Encoder.DECDELAY = 528;\r\n\r\n        /**\r\n         * number of subbands\r\n         */\r\n        Encoder.SBLIMIT = 32;\r\n\r\n        /**\r\n         * parition bands bands\r\n         */\r\n        Encoder.CBANDS = 64;\r\n\r\n        /**\r\n         * number of critical bands/scale factor bands where masking is computed\r\n         */\r\n        Encoder.SBPSY_l = 21;\r\n        Encoder.SBPSY_s = 12;\r\n\r\n        /**\r\n         * total number of scalefactor bands encoded\r\n         */\r\n        Encoder.SBMAX_l = 22;\r\n        Encoder.SBMAX_s = 13;\r\n        Encoder.PSFB21 = 6;\r\n        Encoder.PSFB12 = 6;\r\n\r\n        /**\r\n         * FFT sizes\r\n         */\r\n        Encoder.BLKSIZE = 1024;\r\n        Encoder.HBLKSIZE = (Encoder.BLKSIZE / 2 + 1);\r\n        Encoder.BLKSIZE_s = 256;\r\n        Encoder.HBLKSIZE_s = (Encoder.BLKSIZE_s / 2 + 1);\r\n\r\n        Encoder.NORM_TYPE = 0;\r\n        Encoder.START_TYPE = 1;\r\n        Encoder.SHORT_TYPE = 2;\r\n        Encoder.STOP_TYPE = 3;\r\n\r\n        /**\r\n         * <PRE>\r\n         * Mode Extention:\r\n         * When we are in stereo mode, there are 4 possible methods to store these\r\n         * two channels. The stereo modes -m? are using a subset of them.\r\n         *\r\n         *  -ms: MPG_MD_LR_LR\r\n         *  -mj: MPG_MD_LR_LR and MPG_MD_MS_LR\r\n         *  -mf: MPG_MD_MS_LR\r\n         *  -mi: all\r\n         * </PRE>\r\n         */\r\n        Encoder.MPG_MD_LR_LR = 0;\r\n        Encoder.MPG_MD_LR_I = 1;\r\n        Encoder.MPG_MD_MS_LR = 2;\r\n        Encoder.MPG_MD_MS_I = 3;\r\n\r\n        Encoder.fircoef = [-0.0207887 * 5, -0.0378413 * 5,\r\n            -0.0432472 * 5, -0.031183 * 5, 7.79609e-18 * 5, 0.0467745 * 5,\r\n            0.10091 * 5, 0.151365 * 5, 0.187098 * 5];\r\n\r\n        function Encoder() {\r\n\r\n            var FFTOFFSET = Encoder.FFTOFFSET;\r\n            var MPG_MD_MS_LR = Encoder.MPG_MD_MS_LR;\r\n            //BitStream bs;\r\n            //PsyModel psy;\r\n            //VBRTag vbr;\r\n            //QuantizePVT qupvt;\r\n            var bs = null;\r\n            this.psy = null;\r\n            var psy = null;\r\n            var vbr = null;\r\n            var qupvt = null;\r\n\r\n            //public final void setModules(BitStream bs, PsyModel psy, QuantizePVT qupvt,\r\n            //    VBRTag vbr) {\r\n            this.setModules = function (_bs, _psy, _qupvt, _vbr) {\r\n                bs = _bs;\r\n                this.psy = _psy;\r\n                psy = _psy;\r\n                vbr = _vbr;\r\n                qupvt = _qupvt;\r\n            };\r\n\r\n            var newMDCT = new NewMDCT();\r\n\r\n            /***********************************************************************\r\n             *\r\n             * encoder and decoder delays\r\n             *\r\n             ***********************************************************************/\r\n\r\n            /**\r\n             * <PRE>\r\n             * layer III enc->dec delay:  1056 (1057?)   (observed)\r\n             * layer  II enc->dec delay:   480  (481?)   (observed)\r\n             *\r\n             * polyphase 256-16             (dec or enc)        = 240\r\n             * mdct      256+32  (9*32)     (dec or enc)        = 288\r\n             * total:    512+16\r\n             *\r\n             * My guess is that delay of polyphase filterbank is actualy 240.5\r\n             * (there are technical reasons for this, see postings in mp3encoder).\r\n             * So total Encode+Decode delay = ENCDELAY + 528 + 1\r\n             * </PRE>\r\n             */\r\n\r\n\r\n            /**\r\n             * auto-adjust of ATH, useful for low volume Gabriel Bouvigne 3 feb 2001\r\n             *\r\n             * modifies some values in gfp.internal_flags.ATH (gfc.ATH)\r\n             */\r\n//private void adjust_ATH(final LameInternalFlags gfc) {\r\n            function adjust_ATH(gfc) {\r\n                var gr2_max, max_pow;\r\n\r\n                if (gfc.ATH.useAdjust == 0) {\r\n                    gfc.ATH.adjust = 1.0;\r\n                    /* no adjustment */\r\n                    return;\r\n                }\r\n\r\n                /* jd - 2001 mar 12, 27, jun 30 */\r\n                /* loudness based on equal loudness curve; */\r\n                /* use granule with maximum combined loudness */\r\n                max_pow = gfc.loudness_sq[0][0];\r\n                gr2_max = gfc.loudness_sq[1][0];\r\n                if (gfc.channels_out == 2) {\r\n                    max_pow += gfc.loudness_sq[0][1];\r\n                    gr2_max += gfc.loudness_sq[1][1];\r\n                } else {\r\n                    max_pow += max_pow;\r\n                    gr2_max += gr2_max;\r\n                }\r\n                if (gfc.mode_gr == 2) {\r\n                    max_pow = Math.max(max_pow, gr2_max);\r\n                }\r\n                max_pow *= 0.5;\r\n                /* max_pow approaches 1.0 for full band noise */\r\n\r\n                /* jd - 2001 mar 31, jun 30 */\r\n                /* user tuning of ATH adjustment region */\r\n                max_pow *= gfc.ATH.aaSensitivityP;\r\n\r\n                /*\r\n                 * adjust ATH depending on range of maximum value\r\n                 */\r\n\r\n                /* jd - 2001 feb27, mar12,20, jun30, jul22 */\r\n                /* continuous curves based on approximation */\r\n                /* to GB's original values. */\r\n                /* For an increase in approximate loudness, */\r\n                /* set ATH adjust to adjust_limit immediately */\r\n                /* after a delay of one frame. */\r\n                /* For a loudness decrease, reduce ATH adjust */\r\n                /* towards adjust_limit gradually. */\r\n                /* max_pow is a loudness squared or a power. */\r\n                if (max_pow > 0.03125) { /* ((1 - 0.000625)/ 31.98) from curve below */\r\n                    if (gfc.ATH.adjust >= 1.0) {\r\n                        gfc.ATH.adjust = 1.0;\r\n                    } else {\r\n                        /* preceding frame has lower ATH adjust; */\r\n                        /* ascend only to the preceding adjust_limit */\r\n                        /* in case there is leading low volume */\r\n                        if (gfc.ATH.adjust < gfc.ATH.adjustLimit) {\r\n                            gfc.ATH.adjust = gfc.ATH.adjustLimit;\r\n                        }\r\n                    }\r\n                    gfc.ATH.adjustLimit = 1.0;\r\n                } else { /* adjustment curve */\r\n                    /* about 32 dB maximum adjust (0.000625) */\r\n                    var adj_lim_new = 31.98 * max_pow + 0.000625;\r\n                    if (gfc.ATH.adjust >= adj_lim_new) { /* descend gradually */\r\n                        gfc.ATH.adjust *= adj_lim_new * 0.075 + 0.925;\r\n                        if (gfc.ATH.adjust < adj_lim_new) { /* stop descent */\r\n                            gfc.ATH.adjust = adj_lim_new;\r\n                        }\r\n                    } else { /* ascend */\r\n                        if (gfc.ATH.adjustLimit >= adj_lim_new) {\r\n                            gfc.ATH.adjust = adj_lim_new;\r\n                        } else {\r\n                            /* preceding frame has lower ATH adjust; */\r\n                            /* ascend only to the preceding adjust_limit */\r\n                            if (gfc.ATH.adjust < gfc.ATH.adjustLimit) {\r\n                                gfc.ATH.adjust = gfc.ATH.adjustLimit;\r\n                            }\r\n                        }\r\n                    }\r\n                    gfc.ATH.adjustLimit = adj_lim_new;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * <PRE>\r\n             *  some simple statistics\r\n             *\r\n             *  bitrate index 0: free bitrate . not allowed in VBR mode\r\n             *  : bitrates, kbps depending on MPEG version\r\n             *  bitrate index 15: forbidden\r\n             *\r\n             *  mode_ext:\r\n             *  0:  LR\r\n             *  1:  LR-i\r\n             *  2:  MS\r\n             *  3:  MS-i\r\n             * </PRE>\r\n             */\r\n            function updateStats(gfc) {\r\n                var gr, ch;\r\n\r\n                /* count bitrate indices */\r\n                gfc.bitrate_stereoMode_Hist[gfc.bitrate_index][4]++;\r\n                gfc.bitrate_stereoMode_Hist[15][4]++;\r\n\r\n                /* count 'em for every mode extension in case of 2 channel encoding */\r\n                if (gfc.channels_out == 2) {\r\n                    gfc.bitrate_stereoMode_Hist[gfc.bitrate_index][gfc.mode_ext]++;\r\n                    gfc.bitrate_stereoMode_Hist[15][gfc.mode_ext]++;\r\n                }\r\n                for (gr = 0; gr < gfc.mode_gr; ++gr) {\r\n                    for (ch = 0; ch < gfc.channels_out; ++ch) {\r\n                        var bt = gfc.l3_side.tt[gr][ch].block_type | 0;\r\n                        if (gfc.l3_side.tt[gr][ch].mixed_block_flag != 0)\r\n                            bt = 4;\r\n                        gfc.bitrate_blockType_Hist[gfc.bitrate_index][bt]++;\r\n                        gfc.bitrate_blockType_Hist[gfc.bitrate_index][5]++;\r\n                        gfc.bitrate_blockType_Hist[15][bt]++;\r\n                        gfc.bitrate_blockType_Hist[15][5]++;\r\n                    }\r\n                }\r\n            }\r\n\r\n            function lame_encode_frame_init(gfp, inbuf) {\r\n                var gfc = gfp.internal_flags;\r\n\r\n                var ch, gr;\r\n\r\n                if (gfc.lame_encode_frame_init == 0) {\r\n                    /* prime the MDCT/polyphase filterbank with a short block */\r\n                    var i, j;\r\n                    var primebuff0 = new_float(286 + 1152 + 576);\r\n                    var primebuff1 = new_float(286 + 1152 + 576);\r\n                    gfc.lame_encode_frame_init = 1;\r\n                    for (i = 0, j = 0; i < 286 + 576 * (1 + gfc.mode_gr); ++i) {\r\n                        if (i < 576 * gfc.mode_gr) {\r\n                            primebuff0[i] = 0;\r\n                            if (gfc.channels_out == 2)\r\n                                primebuff1[i] = 0;\r\n                        } else {\r\n                            primebuff0[i] = inbuf[0][j];\r\n                            if (gfc.channels_out == 2)\r\n                                primebuff1[i] = inbuf[1][j];\r\n                            ++j;\r\n                        }\r\n                    }\r\n                    /* polyphase filtering / mdct */\r\n                    for (gr = 0; gr < gfc.mode_gr; gr++) {\r\n                        for (ch = 0; ch < gfc.channels_out; ch++) {\r\n                            gfc.l3_side.tt[gr][ch].block_type = Encoder.SHORT_TYPE;\r\n                        }\r\n                    }\r\n                    newMDCT.mdct_sub48(gfc, primebuff0, primebuff1);\r\n\r\n                    /* check FFT will not use a negative starting offset */\r\n                    /* check if we have enough data for FFT */\r\n                    /* check if we have enough data for polyphase filterbank */\r\n                }\r\n\r\n            }\r\n\r\n            /**\r\n             * <PRE>\r\n             * encodeframe()           Layer 3\r\n             *\r\n             * encode a single frame\r\n             *\r\n             *\r\n             *    lame_encode_frame()\r\n             *\r\n             *\r\n             *                           gr 0            gr 1\r\n             *    inbuf:           |--------------|--------------|--------------|\r\n             *\r\n             *\r\n             *    Polyphase (18 windows, each shifted 32)\r\n             *    gr 0:\r\n             *    window1          <----512---.\r\n             *    window18                 <----512---.\r\n             *\r\n             *    gr 1:\r\n             *    window1                         <----512---.\r\n             *    window18                                <----512---.\r\n             *\r\n             *\r\n             *\r\n             *    MDCT output:  |--------------|--------------|--------------|\r\n             *\r\n             *    FFT's                    <---------1024---------.\r\n             *                                             <---------1024-------.\r\n             *\r\n             *\r\n             *\r\n             *        inbuf = buffer of PCM data size=MP3 framesize\r\n             *        encoder acts on inbuf[ch][0], but output is delayed by MDCTDELAY\r\n             *        so the MDCT coefficints are from inbuf[ch][-MDCTDELAY]\r\n             *\r\n             *        psy-model FFT has a 1 granule delay, so we feed it data for the\r\n             *        next granule.\r\n             *        FFT is centered over granule:  224+576+224\r\n             *        So FFT starts at:   576-224-MDCTDELAY\r\n             *\r\n             *        MPEG2:  FFT ends at:  BLKSIZE+576-224-MDCTDELAY      (1328)\r\n             *        MPEG1:  FFT ends at:  BLKSIZE+2*576-224-MDCTDELAY    (1904)\r\n             *\r\n             *        MPEG2:  polyphase first window:  [0..511]\r\n             *                          18th window:   [544..1055]          (1056)\r\n             *        MPEG1:            36th window:   [1120..1631]         (1632)\r\n             *                data needed:  512+framesize-32\r\n             *\r\n             *        A close look newmdct.c shows that the polyphase filterbank\r\n             *        only uses data from [0..510] for each window.  Perhaps because the window\r\n             *        used by the filterbank is zero for the last point, so Takehiro's\r\n             *        code doesn't bother to compute with it.\r\n             *\r\n             *        FFT starts at 576-224-MDCTDELAY (304)  = 576-FFTOFFSET\r\n             *\r\n             * </PRE>\r\n             */\r\n\r\n\r\n            this.lame_encode_mp3_frame = function (gfp, inbuf_l, inbuf_r, mp3buf, mp3bufPos, mp3buf_size) {\r\n                var mp3count;\r\n                var masking_LR = new_array_n([2, 2]);\r\n                /*\r\n                 * LR masking &\r\n                 * energy\r\n                 */\r\n                masking_LR[0][0] = new III_psy_ratio();\r\n                masking_LR[0][1] = new III_psy_ratio();\r\n                masking_LR[1][0] = new III_psy_ratio();\r\n                masking_LR[1][1] = new III_psy_ratio();\r\n                var masking_MS = new_array_n([2, 2]);\r\n                /* MS masking & energy */\r\n                masking_MS[0][0] = new III_psy_ratio();\r\n                masking_MS[0][1] = new III_psy_ratio();\r\n                masking_MS[1][0] = new III_psy_ratio();\r\n                masking_MS[1][1] = new III_psy_ratio();\r\n                //III_psy_ratio masking[][];\r\n                var masking;\r\n                /* pointer to selected maskings */\r\n                var inbuf = [null, null];\r\n                var gfc = gfp.internal_flags;\r\n\r\n                var tot_ener = new_float_n([2, 4]);\r\n                var ms_ener_ratio = [.5, .5];\r\n                var pe = [[0., 0.], [0., 0.]];\r\n                var pe_MS = [[0., 0.], [0., 0.]];\r\n\r\n//float[][] pe_use;\r\n                var pe_use;\r\n\r\n                var ch, gr;\r\n\r\n                inbuf[0] = inbuf_l;\r\n                inbuf[1] = inbuf_r;\r\n\r\n                if (gfc.lame_encode_frame_init == 0) {\r\n                    /* first run? */\r\n                    lame_encode_frame_init(gfp, inbuf);\r\n\r\n                }\r\n\r\n                /********************** padding *****************************/\r\n                /**\r\n                 * <PRE>\r\n                 * padding method as described in\r\n                 * \"MPEG-Layer3 / Bitstream Syntax and Decoding\"\r\n                 * by Martin Sieler, Ralph Sperschneider\r\n                 *\r\n                 * note: there is no padding for the very first frame\r\n                 *\r\n                 * Robert Hegemann 2000-06-22\r\n                 * </PRE>\r\n                 */\r\n                gfc.padding = 0;\r\n                if ((gfc.slot_lag -= gfc.frac_SpF) < 0) {\r\n                    gfc.slot_lag += gfp.out_samplerate;\r\n                    gfc.padding = 1;\r\n                }\r\n\r\n                /****************************************\r\n                 * Stage 1: psychoacoustic model *\r\n                 ****************************************/\r\n\r\n                if (gfc.psymodel != 0) {\r\n                    /*\r\n                     * psychoacoustic model psy model has a 1 granule (576) delay that\r\n                     * we must compensate for (mt 6/99).\r\n                     */\r\n                    var ret;\r\n                    var bufp = [null, null];\r\n                    /* address of beginning of left & right granule */\r\n                    var bufpPos = 0;\r\n                    /* address of beginning of left & right granule */\r\n                    var blocktype = new_int(2);\r\n\r\n                    for (gr = 0; gr < gfc.mode_gr; gr++) {\r\n\r\n                        for (ch = 0; ch < gfc.channels_out; ch++) {\r\n                            bufp[ch] = inbuf[ch];\r\n                            bufpPos = 576 + gr * 576 - Encoder.FFTOFFSET;\r\n                        }\r\n                        if (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) {\r\n                            ret = psy.L3psycho_anal_vbr(gfp, bufp, bufpPos, gr,\r\n                                masking_LR, masking_MS, pe[gr], pe_MS[gr],\r\n                                tot_ener[gr], blocktype);\r\n                        } else {\r\n                            ret = psy.L3psycho_anal_ns(gfp, bufp, bufpPos, gr,\r\n                                masking_LR, masking_MS, pe[gr], pe_MS[gr],\r\n                                tot_ener[gr], blocktype);\r\n                        }\r\n                        if (ret != 0)\r\n                            return -4;\r\n\r\n                        if (gfp.mode == MPEGMode.JOINT_STEREO) {\r\n                            ms_ener_ratio[gr] = tot_ener[gr][2] + tot_ener[gr][3];\r\n                            if (ms_ener_ratio[gr] > 0)\r\n                                ms_ener_ratio[gr] = tot_ener[gr][3] / ms_ener_ratio[gr];\r\n                        }\r\n\r\n                        /* block type flags */\r\n                        for (ch = 0; ch < gfc.channels_out; ch++) {\r\n                            var cod_info = gfc.l3_side.tt[gr][ch];\r\n                            cod_info.block_type = blocktype[ch];\r\n                            cod_info.mixed_block_flag = 0;\r\n                        }\r\n                    }\r\n                } else {\r\n                    /* no psy model */\r\n                    for (gr = 0; gr < gfc.mode_gr; gr++)\r\n                        for (ch = 0; ch < gfc.channels_out; ch++) {\r\n                            gfc.l3_side.tt[gr][ch].block_type = Encoder.NORM_TYPE;\r\n                            gfc.l3_side.tt[gr][ch].mixed_block_flag = 0;\r\n                            pe_MS[gr][ch] = pe[gr][ch] = 700;\r\n                        }\r\n                }\r\n\r\n                /* auto-adjust of ATH, useful for low volume */\r\n                adjust_ATH(gfc);\r\n\r\n                /****************************************\r\n                 * Stage 2: MDCT *\r\n                 ****************************************/\r\n\r\n                /* polyphase filtering / mdct */\r\n                newMDCT.mdct_sub48(gfc, inbuf[0], inbuf[1]);\r\n\r\n                /****************************************\r\n                 * Stage 3: MS/LR decision *\r\n                 ****************************************/\r\n\r\n                /* Here will be selected MS or LR coding of the 2 stereo channels */\r\n                gfc.mode_ext = Encoder.MPG_MD_LR_LR;\r\n\r\n                if (gfp.force_ms) {\r\n                    gfc.mode_ext = Encoder.MPG_MD_MS_LR;\r\n                } else if (gfp.mode == MPEGMode.JOINT_STEREO) {\r\n                    /*\r\n                     * ms_ratio = is scaled, for historical reasons, to look like a\r\n                     * ratio of side_channel / total. 0 = signal is 100% mono .5 = L & R\r\n                     * uncorrelated\r\n                     */\r\n\r\n                    /**\r\n                     * <PRE>\r\n                     * [0] and [1] are the results for the two granules in MPEG-1,\r\n                     * in MPEG-2 it's only a faked averaging of the same value\r\n                     * _prev is the value of the last granule of the previous frame\r\n                     * _next is the value of the first granule of the next frame\r\n                     * </PRE>\r\n                     */\r\n\r\n                    var sum_pe_MS = 0.;\r\n                    var sum_pe_LR = 0.;\r\n                    for (gr = 0; gr < gfc.mode_gr; gr++) {\r\n                        for (ch = 0; ch < gfc.channels_out; ch++) {\r\n                            sum_pe_MS += pe_MS[gr][ch];\r\n                            sum_pe_LR += pe[gr][ch];\r\n                        }\r\n                    }\r\n\r\n                    /* based on PE: M/S coding would not use much more bits than L/R */\r\n                    if (sum_pe_MS <= 1.00 * sum_pe_LR) {\r\n\r\n                        var gi0 = gfc.l3_side.tt[0];\r\n                        var gi1 = gfc.l3_side.tt[gfc.mode_gr - 1];\r\n\r\n                        if (gi0[0].block_type == gi0[1].block_type\r\n                            && gi1[0].block_type == gi1[1].block_type) {\r\n\r\n                            gfc.mode_ext = Encoder.MPG_MD_MS_LR;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                /* bit and noise allocation */\r\n                if (gfc.mode_ext == MPG_MD_MS_LR) {\r\n                    masking = masking_MS;\r\n                    /* use MS masking */\r\n                    pe_use = pe_MS;\r\n                } else {\r\n                    masking = masking_LR;\r\n                    /* use LR masking */\r\n                    pe_use = pe;\r\n                }\r\n\r\n                /* copy data for MP3 frame analyzer */\r\n                if (gfp.analysis && gfc.pinfo != null) {\r\n                    for (gr = 0; gr < gfc.mode_gr; gr++) {\r\n                        for (ch = 0; ch < gfc.channels_out; ch++) {\r\n                            gfc.pinfo.ms_ratio[gr] = gfc.ms_ratio[gr];\r\n                            gfc.pinfo.ms_ener_ratio[gr] = ms_ener_ratio[gr];\r\n                            gfc.pinfo.blocktype[gr][ch] = gfc.l3_side.tt[gr][ch].block_type;\r\n                            gfc.pinfo.pe[gr][ch] = pe_use[gr][ch];\r\n                            System.arraycopy(gfc.l3_side.tt[gr][ch].xr, 0,\r\n                                gfc.pinfo.xr[gr][ch], 0, 576);\r\n                            /*\r\n                             * in psymodel, LR and MS data was stored in pinfo. switch\r\n                             * to MS data:\r\n                             */\r\n                            if (gfc.mode_ext == MPG_MD_MS_LR) {\r\n                                gfc.pinfo.ers[gr][ch] = gfc.pinfo.ers[gr][ch + 2];\r\n                                System.arraycopy(gfc.pinfo.energy[gr][ch + 2], 0,\r\n                                    gfc.pinfo.energy[gr][ch], 0,\r\n                                    gfc.pinfo.energy[gr][ch].length);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                /****************************************\r\n                 * Stage 4: quantization loop *\r\n                 ****************************************/\r\n\r\n                if (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_abr) {\r\n\r\n                    var i;\r\n                    var f;\r\n\r\n                    for (i = 0; i < 18; i++)\r\n                        gfc.nsPsy.pefirbuf[i] = gfc.nsPsy.pefirbuf[i + 1];\r\n\r\n                    f = 0.0;\r\n                    for (gr = 0; gr < gfc.mode_gr; gr++)\r\n                        for (ch = 0; ch < gfc.channels_out; ch++)\r\n                            f += pe_use[gr][ch];\r\n                    gfc.nsPsy.pefirbuf[18] = f;\r\n\r\n                    f = gfc.nsPsy.pefirbuf[9];\r\n                    for (i = 0; i < 9; i++)\r\n                        f += (gfc.nsPsy.pefirbuf[i] + gfc.nsPsy.pefirbuf[18 - i])\r\n                            * Encoder.fircoef[i];\r\n\r\n                    f = (670 * 5 * gfc.mode_gr * gfc.channels_out) / f;\r\n                    for (gr = 0; gr < gfc.mode_gr; gr++) {\r\n                        for (ch = 0; ch < gfc.channels_out; ch++) {\r\n                            pe_use[gr][ch] *= f;\r\n                        }\r\n                    }\r\n                }\r\n                gfc.iteration_loop.iteration_loop(gfp, pe_use, ms_ener_ratio, masking);\r\n\r\n                /****************************************\r\n                 * Stage 5: bitstream formatting *\r\n                 ****************************************/\r\n\r\n                /* write the frame to the bitstream */\r\n                bs.format_bitstream(gfp);\r\n\r\n                /* copy mp3 bit buffer into array */\r\n                mp3count = bs.copy_buffer(gfc, mp3buf, mp3bufPos, mp3buf_size, 1);\r\n\r\n                if (gfp.bWriteVbrTag)\r\n                    vbr.addVbrFrame(gfp);\r\n\r\n                if (gfp.analysis && gfc.pinfo != null) {\r\n                    for (ch = 0; ch < gfc.channels_out; ch++) {\r\n                        var j;\r\n                        for (j = 0; j < FFTOFFSET; j++)\r\n                            gfc.pinfo.pcmdata[ch][j] = gfc.pinfo.pcmdata[ch][j\r\n                            + gfp.framesize];\r\n                        for (j = FFTOFFSET; j < 1600; j++) {\r\n                            gfc.pinfo.pcmdata[ch][j] = inbuf[ch][j - FFTOFFSET];\r\n                        }\r\n                    }\r\n                    qupvt.set_frame_pinfo(gfp, masking);\r\n                }\r\n\r\n                updateStats(gfc);\r\n\r\n                return mp3count;\r\n            }\r\n        }\r\n\r\n\r\n//package mp3;\r\n\r\n        function VBRSeekInfo() {\r\n            /**\r\n             * What we have seen so far.\r\n             */\r\n            this.sum = 0;\r\n            /**\r\n             * How many frames we have seen in this chunk.\r\n             */\r\n            this.seen = 0;\r\n            /**\r\n             * How many frames we want to collect into one chunk.\r\n             */\r\n            this.want = 0;\r\n            /**\r\n             * Actual position in our bag.\r\n             */\r\n            this.pos = 0;\r\n            /**\r\n             * Size of our bag.\r\n             */\r\n            this.size = 0;\r\n            /**\r\n             * Pointer to our bag.\r\n             */\r\n            this.bag = null;\r\n            this.nVbrNumFrames = 0;\r\n            this.nBytesWritten = 0;\r\n            /* VBR tag data */\r\n            this.TotalFrameSize = 0;\r\n        }\r\n\r\n\r\n\r\n        function IIISideInfo() {\r\n            this.tt = [[null, null], [null, null]];\r\n            this.main_data_begin = 0;\r\n            this.private_bits = 0;\r\n            this.resvDrain_pre = 0;\r\n            this.resvDrain_post = 0;\r\n            this.scfsi = [new_int(4), new_int(4)];\r\n\r\n            for (var gr = 0; gr < 2; gr++) {\r\n                for (var ch = 0; ch < 2; ch++) {\r\n                    this.tt[gr][ch] = new GrInfo();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        function III_psy_xmin() {\r\n            this.l = new_float(Encoder.SBMAX_l);\r\n            this.s = new_float_n([Encoder.SBMAX_s, 3]);\r\n\r\n            var self = this;\r\n            this.assign = function (iii_psy_xmin) {\r\n                System.arraycopy(iii_psy_xmin.l, 0, self.l, 0, Encoder.SBMAX_l);\r\n                for (var i = 0; i < Encoder.SBMAX_s; i++) {\r\n                    for (var j = 0; j < 3; j++) {\r\n                        self.s[i][j] = iii_psy_xmin.s[i][j];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n//package mp3;\r\n\r\n        /**\r\n         * Variables used for --nspsytune\r\n         *\r\n         * @author Ken\r\n         *\r\n         */\r\n        function NsPsy() {\r\n            this.last_en_subshort = new_float_n([4, 9]);\r\n            this.lastAttacks = new_int(4);\r\n            this.pefirbuf = new_float(19);\r\n            this.longfact = new_float(Encoder.SBMAX_l);\r\n            this.shortfact = new_float(Encoder.SBMAX_s);\r\n\r\n            /**\r\n             * short block tuning\r\n             */\r\n            this.attackthre = 0.;\r\n            this.attackthre_s = 0.;\r\n        }\r\n\r\n\r\n\r\n\r\n        LameInternalFlags.MFSIZE = (3 * 1152 + Encoder.ENCDELAY - Encoder.MDCTDELAY);\r\n        LameInternalFlags.MAX_HEADER_BUF = 256;\r\n        LameInternalFlags.MAX_BITS_PER_CHANNEL = 4095;\r\n        LameInternalFlags.MAX_BITS_PER_GRANULE = 7680;\r\n        LameInternalFlags.BPC = 320;\r\n\r\n        function LameInternalFlags() {\r\n            var MAX_HEADER_LEN = 40;\r\n\r\n\r\n            /********************************************************************\r\n             * internal variables NOT set by calling program, and should not be *\r\n             * modified by the calling program *\r\n             ********************************************************************/\r\n\r\n            /**\r\n             * Some remarks to the Class_ID field: The Class ID is an Identifier for a\r\n             * pointer to this struct. It is very unlikely that a pointer to\r\n             * lame_global_flags has the same 32 bits in it's structure (large and other\r\n             * special properties, for instance prime).\r\n             *\r\n             * To test that the structure is right and initialized, use: if ( gfc .\r\n             * Class_ID == LAME_ID ) ... Other remark: If you set a flag to 0 for uninit\r\n             * data and 1 for init data, the right test should be \"if (flag == 1)\" and\r\n             * NOT \"if (flag)\". Unintended modification of this element will be\r\n             * otherwise misinterpreted as an init.\r\n             */\r\n            this.Class_ID = 0;\r\n\r\n            this.lame_encode_frame_init = 0;\r\n            this.iteration_init_init = 0;\r\n            this.fill_buffer_resample_init = 0;\r\n\r\n            //public float mfbuf[][] = new float[2][MFSIZE];\r\n            this.mfbuf = new_float_n([2, LameInternalFlags.MFSIZE]);\r\n\r\n            /**\r\n             * granules per frame\r\n             */\r\n            this.mode_gr = 0;\r\n            /**\r\n             * number of channels in the input data stream (PCM or decoded PCM)\r\n             */\r\n            this.channels_in = 0;\r\n            /**\r\n             * number of channels in the output data stream (not used for decoding)\r\n             */\r\n            this.channels_out = 0;\r\n            /**\r\n             * input_samp_rate/output_samp_rate\r\n             */\r\n            //public double resample_ratio;\r\n            this.resample_ratio = 0.;\r\n\r\n            this.mf_samples_to_encode = 0;\r\n            this.mf_size = 0;\r\n            /**\r\n             * min bitrate index\r\n             */\r\n            this.VBR_min_bitrate = 0;\r\n            /**\r\n             * max bitrate index\r\n             */\r\n            this.VBR_max_bitrate = 0;\r\n            this.bitrate_index = 0;\r\n            this.samplerate_index = 0;\r\n            this.mode_ext = 0;\r\n\r\n            /* lowpass and highpass filter control */\r\n            /**\r\n             * normalized frequency bounds of passband\r\n             */\r\n            this.lowpass1 = 0.;\r\n            this.lowpass2 = 0.;\r\n            /**\r\n             * normalized frequency bounds of passband\r\n             */\r\n            this.highpass1 = 0.;\r\n            this.highpass2 = 0.;\r\n\r\n            /**\r\n             * 0 = none 1 = ISO AAC model 2 = allow scalefac_select=1\r\n             */\r\n            this.noise_shaping = 0;\r\n\r\n            /**\r\n             * 0 = ISO model: amplify all distorted bands<BR>\r\n             * 1 = amplify within 50% of max (on db scale)<BR>\r\n             * 2 = amplify only most distorted band<BR>\r\n             * 3 = method 1 and refine with method 2<BR>\r\n             */\r\n            this.noise_shaping_amp = 0;\r\n            /**\r\n             * 0 = no substep<BR>\r\n             * 1 = use substep shaping at last step(VBR only)<BR>\r\n             * (not implemented yet)<BR>\r\n             * 2 = use substep inside loop<BR>\r\n             * 3 = use substep inside loop and last step<BR>\r\n             */\r\n            this.substep_shaping = 0;\r\n\r\n            /**\r\n             * 1 = gpsycho. 0 = none\r\n             */\r\n            this.psymodel = 0;\r\n            /**\r\n             * 0 = stop at over=0, all scalefacs amplified or<BR>\r\n             * a scalefac has reached max value<BR>\r\n             * 1 = stop when all scalefacs amplified or a scalefac has reached max value<BR>\r\n             * 2 = stop when all scalefacs amplified\r\n             */\r\n            this.noise_shaping_stop = 0;\r\n\r\n            /**\r\n             * 0 = no, 1 = yes\r\n             */\r\n            this.subblock_gain = 0;\r\n            /**\r\n             * 0 = no. 1=outside loop 2=inside loop(slow)\r\n             */\r\n            this.use_best_huffman = 0;\r\n\r\n            /**\r\n             * 0 = stop early after 0 distortion found. 1 = full search\r\n             */\r\n            this.full_outer_loop = 0;\r\n\r\n            //public IIISideInfo l3_side = new IIISideInfo();\r\n            this.l3_side = new IIISideInfo();\r\n            this.ms_ratio = new_float(2);\r\n\r\n            /* used for padding */\r\n            /**\r\n             * padding for the current frame?\r\n             */\r\n            this.padding = 0;\r\n            this.frac_SpF = 0;\r\n            this.slot_lag = 0;\r\n\r\n            /**\r\n             * optional ID3 tags\r\n             */\r\n            //public ID3TagSpec tag_spec;\r\n            this.tag_spec = null;\r\n            this.nMusicCRC = 0;\r\n\r\n            /* variables used by Quantize */\r\n            //public int OldValue[] = new int[2];\r\n            this.OldValue = new_int(2);\r\n            //public int CurrentStep[] = new int[2];\r\n            this.CurrentStep = new_int(2);\r\n\r\n            this.masking_lower = 0.;\r\n            //public int bv_scf[] = new int[576];\r\n            this.bv_scf = new_int(576);\r\n            //public int pseudohalf[] = new int[L3Side.SFBMAX];\r\n            this.pseudohalf = new_int(L3Side.SFBMAX);\r\n\r\n            /**\r\n             * will be set in lame_init_params\r\n             */\r\n            this.sfb21_extra = false;\r\n\r\n            /* BPC = maximum number of filter convolution windows to precompute */\r\n            //public float[][] inbuf_old = new float[2][];\r\n            this.inbuf_old = new Array(2);\r\n            //public float[][] blackfilt = new float[2 * BPC + 1][];\r\n            this.blackfilt = new Array(2 * LameInternalFlags.BPC + 1);\r\n            //public double itime[] = new double[2];\r\n            this.itime = new_double(2);\r\n            this.sideinfo_len = 0;\r\n\r\n            /* variables for newmdct.c */\r\n            //public float sb_sample[][][][] = new float[2][2][18][Encoder.SBLIMIT];\r\n            this.sb_sample = new_float_n([2, 2, 18, Encoder.SBLIMIT]);\r\n            this.amp_filter = new_float(32);\r\n\r\n            /* variables for BitStream */\r\n\r\n            /**\r\n             * <PRE>\r\n             * mpeg1: buffer=511 bytes  smallest frame: 96-38(sideinfo)=58\r\n             * max number of frames in reservoir:  8\r\n             * mpeg2: buffer=255 bytes.  smallest frame: 24-23bytes=1\r\n             * with VBR, if you are encoding all silence, it is possible to\r\n             * have 8kbs/24khz frames with 1byte of data each, which means we need\r\n             * to buffer up to 255 headers!\r\n             * </PRE>\r\n             */\r\n            /**\r\n             * also, max_header_buf has to be a power of two\r\n             */\r\n            /**\r\n             * max size of header is 38\r\n             */\r\n\r\n            function Header() {\r\n                this.write_timing = 0;\r\n                this.ptr = 0;\r\n                //public byte buf[] = new byte[MAX_HEADER_LEN];\r\n                this.buf = new_byte(MAX_HEADER_LEN);\r\n            }\r\n\r\n            this.header = new Array(LameInternalFlags.MAX_HEADER_BUF);\r\n\r\n            this.h_ptr = 0;\r\n            this.w_ptr = 0;\r\n            this.ancillary_flag = 0;\r\n\r\n            /* variables for Reservoir */\r\n            /**\r\n             * in bits\r\n             */\r\n            this.ResvSize = 0;\r\n            /**\r\n             * in bits\r\n             */\r\n            this.ResvMax = 0;\r\n\r\n            //public ScaleFac scalefac_band = new ScaleFac();\r\n            this.scalefac_band = new ScaleFac();\r\n\r\n            /* daa from PsyModel */\r\n            /* The static variables \"r\", \"phi_sav\", \"new\", \"old\" and \"oldest\" have */\r\n            /* to be remembered for the unpredictability measure. For \"r\" and */\r\n            /* \"phi_sav\", the first index from the left is the channel select and */\r\n            /* the second index is the \"age\" of the data. */\r\n            this.minval_l = new_float(Encoder.CBANDS);\r\n            this.minval_s = new_float(Encoder.CBANDS);\r\n            this.nb_1 = new_float_n([4, Encoder.CBANDS]);\r\n            this.nb_2 = new_float_n([4, Encoder.CBANDS]);\r\n            this.nb_s1 = new_float_n([4, Encoder.CBANDS]);\r\n            this.nb_s2 = new_float_n([4, Encoder.CBANDS]);\r\n            this.s3_ss = null;\r\n            this.s3_ll = null;\r\n            this.decay = 0.;\r\n\r\n            //public III_psy_xmin[] thm = new III_psy_xmin[4];\r\n            //public III_psy_xmin[] en = new III_psy_xmin[4];\r\n            this.thm = new Array(4);\r\n            this.en = new Array(4);\r\n\r\n            /**\r\n             * fft and energy calculation\r\n             */\r\n            this.tot_ener = new_float(4);\r\n\r\n            /* loudness calculation (for adaptive threshold of hearing) */\r\n            /**\r\n             * loudness^2 approx. per granule and channel\r\n             */\r\n            this.loudness_sq = new_float_n([2, 2]);\r\n            /**\r\n             * account for granule delay of L3psycho_anal\r\n             */\r\n            this.loudness_sq_save = new_float(2);\r\n\r\n            /**\r\n             * Scale Factor Bands\r\n             */\r\n            this.mld_l = new_float(Encoder.SBMAX_l);\r\n            this.mld_s = new_float(Encoder.SBMAX_s);\r\n            this.bm_l = new_int(Encoder.SBMAX_l);\r\n            this.bo_l = new_int(Encoder.SBMAX_l);\r\n            this.bm_s = new_int(Encoder.SBMAX_s);\r\n            this.bo_s = new_int(Encoder.SBMAX_s);\r\n            this.npart_l = 0;\r\n            this.npart_s = 0;\r\n\r\n            this.s3ind = new_int_n([Encoder.CBANDS, 2]);\r\n            this.s3ind_s = new_int_n([Encoder.CBANDS, 2]);\r\n\r\n            this.numlines_s = new_int(Encoder.CBANDS);\r\n            this.numlines_l = new_int(Encoder.CBANDS);\r\n            this.rnumlines_l = new_float(Encoder.CBANDS);\r\n            this.mld_cb_l = new_float(Encoder.CBANDS);\r\n            this.mld_cb_s = new_float(Encoder.CBANDS);\r\n            this.numlines_s_num1 = 0;\r\n            this.numlines_l_num1 = 0;\r\n\r\n            /* ratios */\r\n            this.pe = new_float(4);\r\n            this.ms_ratio_s_old = 0.;\r\n            this.ms_ratio_l_old = 0.;\r\n            this.ms_ener_ratio_old = 0.;\r\n\r\n            /**\r\n             * block type\r\n             */\r\n            this.blocktype_old = new_int(2);\r\n\r\n            /**\r\n             * variables used for --nspsytune\r\n             */\r\n            this.nsPsy = new NsPsy();\r\n\r\n            /**\r\n             * used for Xing VBR header\r\n             */\r\n            this.VBR_seek_table = new VBRSeekInfo();\r\n\r\n            /**\r\n             * all ATH related stuff\r\n             */\r\n            //public ATH ATH;\r\n            this.ATH = null;\r\n\r\n            this.PSY = null;\r\n\r\n            this.nogap_total = 0;\r\n            this.nogap_current = 0;\r\n\r\n            /* ReplayGain */\r\n            this.decode_on_the_fly = true;\r\n            this.findReplayGain = true;\r\n            this.findPeakSample = true;\r\n            this.PeakSample = 0.;\r\n            this.RadioGain = 0;\r\n            this.AudiophileGain = 0;\r\n            //public ReplayGain rgdata;\r\n            this.rgdata = null;\r\n\r\n            /**\r\n             * gain change required for preventing clipping\r\n             */\r\n            this.noclipGainChange = 0;\r\n            /**\r\n             * user-specified scale factor required for preventing clipping\r\n             */\r\n            this.noclipScale = 0.;\r\n\r\n            /* simple statistics */\r\n            this.bitrate_stereoMode_Hist = new_int_n([16, 4 + 1]);\r\n            /**\r\n             * norm/start/short/stop/mixed(short)/sum\r\n             */\r\n            this.bitrate_blockType_Hist = new_int_n([16, 4 + 1 + 1]);\r\n\r\n            //public PlottingData pinfo;\r\n            //public MPGLib.mpstr_tag hip;\r\n            this.pinfo = null;\r\n            this.hip = null;\r\n\r\n            this.in_buffer_nsamples = 0;\r\n            //public float[] in_buffer_0;\r\n            //public float[] in_buffer_1;\r\n            this.in_buffer_0 = null;\r\n            this.in_buffer_1 = null;\r\n\r\n            //public IIterationLoop iteration_loop;\r\n            this.iteration_loop = null;\r\n\r\n            for (var i = 0; i < this.en.length; i++) {\r\n                this.en[i] = new III_psy_xmin();\r\n            }\r\n            for (var i = 0; i < this.thm.length; i++) {\r\n                this.thm[i] = new III_psy_xmin();\r\n            }\r\n            for (var i = 0; i < this.header.length; i++) {\r\n                this.header[i] = new Header();\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        function FFT() {\r\n\r\n            var window = new_float(Encoder.BLKSIZE);\r\n            var window_s = new_float(Encoder.BLKSIZE_s / 2);\r\n\r\n            var costab = [\r\n                9.238795325112867e-01, 3.826834323650898e-01,\r\n                9.951847266721969e-01, 9.801714032956060e-02,\r\n                9.996988186962042e-01, 2.454122852291229e-02,\r\n                9.999811752826011e-01, 6.135884649154475e-03\r\n            ];\r\n\r\n            function fht(fz, fzPos, n) {\r\n                var tri = 0;\r\n                var k4;\r\n                var fi;\r\n                var gi;\r\n\r\n                n <<= 1;\r\n                /* to get BLKSIZE, because of 3DNow! ASM routine */\r\n                var fn = fzPos + n;\r\n                k4 = 4;\r\n                do {\r\n                    var s1, c1;\r\n                    var i, k1, k2, k3, kx;\r\n                    kx = k4 >> 1;\r\n                    k1 = k4;\r\n                    k2 = k4 << 1;\r\n                    k3 = k2 + k1;\r\n                    k4 = k2 << 1;\r\n                    fi = fzPos;\r\n                    gi = fi + kx;\r\n                    do {\r\n                        var f0, f1, f2, f3;\r\n                        f1 = fz[fi + 0] - fz[fi + k1];\r\n                        f0 = fz[fi + 0] + fz[fi + k1];\r\n                        f3 = fz[fi + k2] - fz[fi + k3];\r\n                        f2 = fz[fi + k2] + fz[fi + k3];\r\n                        fz[fi + k2] = f0 - f2;\r\n                        fz[fi + 0] = f0 + f2;\r\n                        fz[fi + k3] = f1 - f3;\r\n                        fz[fi + k1] = f1 + f3;\r\n                        f1 = fz[gi + 0] - fz[gi + k1];\r\n                        f0 = fz[gi + 0] + fz[gi + k1];\r\n                        f3 = (Util.SQRT2 * fz[gi + k3]);\r\n                        f2 = (Util.SQRT2 * fz[gi + k2]);\r\n                        fz[gi + k2] = f0 - f2;\r\n                        fz[gi + 0] = f0 + f2;\r\n                        fz[gi + k3] = f1 - f3;\r\n                        fz[gi + k1] = f1 + f3;\r\n                        gi += k4;\r\n                        fi += k4;\r\n                    } while (fi < fn);\r\n                    c1 = costab[tri + 0];\r\n                    s1 = costab[tri + 1];\r\n                    for (i = 1; i < kx; i++) {\r\n                        var c2, s2;\r\n                        c2 = 1 - (2 * s1) * s1;\r\n                        s2 = (2 * s1) * c1;\r\n                        fi = fzPos + i;\r\n                        gi = fzPos + k1 - i;\r\n                        do {\r\n                            var a, b, g0, f0, f1, g1, f2, g2, f3, g3;\r\n                            b = s2 * fz[fi + k1] - c2 * fz[gi + k1];\r\n                            a = c2 * fz[fi + k1] + s2 * fz[gi + k1];\r\n                            f1 = fz[fi + 0] - a;\r\n                            f0 = fz[fi + 0] + a;\r\n                            g1 = fz[gi + 0] - b;\r\n                            g0 = fz[gi + 0] + b;\r\n                            b = s2 * fz[fi + k3] - c2 * fz[gi + k3];\r\n                            a = c2 * fz[fi + k3] + s2 * fz[gi + k3];\r\n                            f3 = fz[fi + k2] - a;\r\n                            f2 = fz[fi + k2] + a;\r\n                            g3 = fz[gi + k2] - b;\r\n                            g2 = fz[gi + k2] + b;\r\n                            b = s1 * f2 - c1 * g3;\r\n                            a = c1 * f2 + s1 * g3;\r\n                            fz[fi + k2] = f0 - a;\r\n                            fz[fi + 0] = f0 + a;\r\n                            fz[gi + k3] = g1 - b;\r\n                            fz[gi + k1] = g1 + b;\r\n                            b = c1 * g2 - s1 * f3;\r\n                            a = s1 * g2 + c1 * f3;\r\n                            fz[gi + k2] = g0 - a;\r\n                            fz[gi + 0] = g0 + a;\r\n                            fz[fi + k3] = f1 - b;\r\n                            fz[fi + k1] = f1 + b;\r\n                            gi += k4;\r\n                            fi += k4;\r\n                        } while (fi < fn);\r\n                        c2 = c1;\r\n                        c1 = c2 * costab[tri + 0] - s1 * costab[tri + 1];\r\n                        s1 = c2 * costab[tri + 1] + s1 * costab[tri + 0];\r\n                    }\r\n                    tri += 2;\r\n                } while (k4 < n);\r\n            }\r\n\r\n            var rv_tbl = [0x00, 0x80, 0x40,\r\n                0xc0, 0x20, 0xa0, 0x60, 0xe0, 0x10,\r\n                0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70,\r\n                0xf0, 0x08, 0x88, 0x48, 0xc8, 0x28,\r\n                0xa8, 0x68, 0xe8, 0x18, 0x98, 0x58,\r\n                0xd8, 0x38, 0xb8, 0x78, 0xf8, 0x04,\r\n                0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64,\r\n                0xe4, 0x14, 0x94, 0x54, 0xd4, 0x34,\r\n                0xb4, 0x74, 0xf4, 0x0c, 0x8c, 0x4c,\r\n                0xcc, 0x2c, 0xac, 0x6c, 0xec, 0x1c,\r\n                0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c,\r\n                0xfc, 0x02, 0x82, 0x42, 0xc2, 0x22,\r\n                0xa2, 0x62, 0xe2, 0x12, 0x92, 0x52,\r\n                0xd2, 0x32, 0xb2, 0x72, 0xf2, 0x0a,\r\n                0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a,\r\n                0xea, 0x1a, 0x9a, 0x5a, 0xda, 0x3a,\r\n                0xba, 0x7a, 0xfa, 0x06, 0x86, 0x46,\r\n                0xc6, 0x26, 0xa6, 0x66, 0xe6, 0x16,\r\n                0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76,\r\n                0xf6, 0x0e, 0x8e, 0x4e, 0xce, 0x2e,\r\n                0xae, 0x6e, 0xee, 0x1e, 0x9e, 0x5e,\r\n                0xde, 0x3e, 0xbe, 0x7e, 0xfe];\r\n\r\n            this.fft_short = function (gfc, x_real, chn, buffer, bufPos) {\r\n                for (var b = 0; b < 3; b++) {\r\n                    var x = Encoder.BLKSIZE_s / 2;\r\n                    var k = 0xffff & ((576 / 3) * (b + 1));\r\n                    var j = Encoder.BLKSIZE_s / 8 - 1;\r\n                    do {\r\n                        var f0, f1, f2, f3, w;\r\n                        var i = rv_tbl[j << 2] & 0xff;\r\n\r\n                        f0 = window_s[i] * buffer[chn][bufPos + i + k];\r\n                        w = window_s[0x7f - i] * buffer[chn][bufPos + i + k + 0x80];\r\n                        f1 = f0 - w;\r\n                        f0 = f0 + w;\r\n                        f2 = window_s[i + 0x40] * buffer[chn][bufPos + i + k + 0x40];\r\n                        w = window_s[0x3f - i] * buffer[chn][bufPos + i + k + 0xc0];\r\n                        f3 = f2 - w;\r\n                        f2 = f2 + w;\r\n\r\n                        x -= 4;\r\n                        x_real[b][x + 0] = f0 + f2;\r\n                        x_real[b][x + 2] = f0 - f2;\r\n                        x_real[b][x + 1] = f1 + f3;\r\n                        x_real[b][x + 3] = f1 - f3;\r\n\r\n                        f0 = window_s[i + 0x01] * buffer[chn][bufPos + i + k + 0x01];\r\n                        w = window_s[0x7e - i] * buffer[chn][bufPos + i + k + 0x81];\r\n                        f1 = f0 - w;\r\n                        f0 = f0 + w;\r\n                        f2 = window_s[i + 0x41] * buffer[chn][bufPos + i + k + 0x41];\r\n                        w = window_s[0x3e - i] * buffer[chn][bufPos + i + k + 0xc1];\r\n                        f3 = f2 - w;\r\n                        f2 = f2 + w;\r\n\r\n                        x_real[b][x + Encoder.BLKSIZE_s / 2 + 0] = f0 + f2;\r\n                        x_real[b][x + Encoder.BLKSIZE_s / 2 + 2] = f0 - f2;\r\n                        x_real[b][x + Encoder.BLKSIZE_s / 2 + 1] = f1 + f3;\r\n                        x_real[b][x + Encoder.BLKSIZE_s / 2 + 3] = f1 - f3;\r\n                    } while (--j >= 0);\r\n\r\n                    fht(x_real[b], x, Encoder.BLKSIZE_s / 2);\r\n                    /* BLKSIZE_s/2 because of 3DNow! ASM routine */\r\n                    /* BLKSIZE/2 because of 3DNow! ASM routine */\r\n                }\r\n            }\r\n\r\n            this.fft_long = function (gfc, y, chn, buffer, bufPos) {\r\n                var jj = Encoder.BLKSIZE / 8 - 1;\r\n                var x = Encoder.BLKSIZE / 2;\r\n\r\n                do {\r\n                    var f0, f1, f2, f3, w;\r\n                    var i = rv_tbl[jj] & 0xff;\r\n                    f0 = window[i] * buffer[chn][bufPos + i];\r\n                    w = window[i + 0x200] * buffer[chn][bufPos + i + 0x200];\r\n                    f1 = f0 - w;\r\n                    f0 = f0 + w;\r\n                    f2 = window[i + 0x100] * buffer[chn][bufPos + i + 0x100];\r\n                    w = window[i + 0x300] * buffer[chn][bufPos + i + 0x300];\r\n                    f3 = f2 - w;\r\n                    f2 = f2 + w;\r\n\r\n                    x -= 4;\r\n                    y[x + 0] = f0 + f2;\r\n                    y[x + 2] = f0 - f2;\r\n                    y[x + 1] = f1 + f3;\r\n                    y[x + 3] = f1 - f3;\r\n\r\n                    f0 = window[i + 0x001] * buffer[chn][bufPos + i + 0x001];\r\n                    w = window[i + 0x201] * buffer[chn][bufPos + i + 0x201];\r\n                    f1 = f0 - w;\r\n                    f0 = f0 + w;\r\n                    f2 = window[i + 0x101] * buffer[chn][bufPos + i + 0x101];\r\n                    w = window[i + 0x301] * buffer[chn][bufPos + i + 0x301];\r\n                    f3 = f2 - w;\r\n                    f2 = f2 + w;\r\n\r\n                    y[x + Encoder.BLKSIZE / 2 + 0] = f0 + f2;\r\n                    y[x + Encoder.BLKSIZE / 2 + 2] = f0 - f2;\r\n                    y[x + Encoder.BLKSIZE / 2 + 1] = f1 + f3;\r\n                    y[x + Encoder.BLKSIZE / 2 + 3] = f1 - f3;\r\n                } while (--jj >= 0);\r\n\r\n                fht(y, x, Encoder.BLKSIZE / 2);\r\n                /* BLKSIZE/2 because of 3DNow! ASM routine */\r\n            }\r\n\r\n            this.init_fft = function (gfc) {\r\n                /* The type of window used here will make no real difference, but */\r\n                /*\r\n                 * in the interest of merging nspsytune stuff - switch to blackman\r\n                 * window\r\n                 */\r\n                for (var i = 0; i < Encoder.BLKSIZE; i++)\r\n                    /* blackman window */\r\n                    window[i] = (0.42 - 0.5 * Math.cos(2 * Math.PI * (i + .5)\r\n                        / Encoder.BLKSIZE) + 0.08 * Math.cos(4 * Math.PI * (i + .5)\r\n                        / Encoder.BLKSIZE));\r\n\r\n                for (var i = 0; i < Encoder.BLKSIZE_s / 2; i++)\r\n                    window_s[i] = (0.5 * (1.0 - Math.cos(2.0 * Math.PI\r\n                        * (i + 0.5) / Encoder.BLKSIZE_s)));\r\n\r\n            }\r\n\r\n        }\r\n\r\n        /*\r\n         *      psymodel.c\r\n         *\r\n         *      Copyright (c) 1999-2000 Mark Taylor\r\n         *      Copyright (c) 2001-2002 Naoki Shibata\r\n         *      Copyright (c) 2000-2003 Takehiro Tominaga\r\n         *      Copyright (c) 2000-2008 Robert Hegemann\r\n         *      Copyright (c) 2000-2005 Gabriel Bouvigne\r\n         *      Copyright (c) 2000-2005 Alexander Leidinger\r\n         *\r\n         * This library is free software; you can redistribute it and/or\r\n         * modify it under the terms of the GNU Lesser General Public\r\n         * License as published by the Free Software Foundation; either\r\n         * version 2 of the License, or (at your option) any later version.\r\n         *\r\n         * This library is distributed in the hope that it will be useful,\r\n         * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n         * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n         * Library General Public License for more details.\r\n         *\r\n         * You should have received a copy of the GNU Lesser General Public\r\n         * License along with this library; if not, write to the\r\n         * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\r\n         * Boston, MA 02111-1307, USA.\r\n         */\r\n\r\n        /* $Id: PsyModel.java,v 1.27 2011/05/24 20:48:06 kenchis Exp $ */\r\n\r\n\r\n        /*\r\n         PSYCHO ACOUSTICS\r\n\r\n\r\n         This routine computes the psycho acoustics, delayed by one granule.\r\n\r\n         Input: buffer of PCM data (1024 samples).\r\n\r\n         This window should be centered over the 576 sample granule window.\r\n         The routine will compute the psycho acoustics for\r\n         this granule, but return the psycho acoustics computed\r\n         for the *previous* granule.  This is because the block\r\n         type of the previous granule can only be determined\r\n         after we have computed the psycho acoustics for the following\r\n         granule.\r\n\r\n         Output:  maskings and energies for each scalefactor band.\r\n         block type, PE, and some correlation measures.\r\n         The PE is used by CBR modes to determine if extra bits\r\n         from the bit reservoir should be used.  The correlation\r\n         measures are used to determine mid/side or regular stereo.\r\n         */\r\n        /*\r\n         Notation:\r\n\r\n         barks:  a non-linear frequency scale.  Mapping from frequency to\r\n         barks is given by freq2bark()\r\n\r\n         scalefactor bands: The spectrum (frequencies) are broken into\r\n         SBMAX \"scalefactor bands\".  Thes bands\r\n         are determined by the MPEG ISO spec.  In\r\n         the noise shaping/quantization code, we allocate\r\n         bits among the partition bands to achieve the\r\n         best possible quality\r\n\r\n         partition bands:   The spectrum is also broken into about\r\n         64 \"partition bands\".  Each partition\r\n         band is about .34 barks wide.  There are about 2-5\r\n         partition bands for each scalefactor band.\r\n\r\n         LAME computes all psycho acoustic information for each partition\r\n         band.  Then at the end of the computations, this information\r\n         is mapped to scalefactor bands.  The energy in each scalefactor\r\n         band is taken as the sum of the energy in all partition bands\r\n         which overlap the scalefactor band.  The maskings can be computed\r\n         in the same way (and thus represent the average masking in that band)\r\n         or by taking the minmum value multiplied by the number of\r\n         partition bands used (which represents a minimum masking in that band).\r\n         */\r\n        /*\r\n         The general outline is as follows:\r\n\r\n         1. compute the energy in each partition band\r\n         2. compute the tonality in each partition band\r\n         3. compute the strength of each partion band \"masker\"\r\n         4. compute the masking (via the spreading function applied to each masker)\r\n         5. Modifications for mid/side masking.\r\n\r\n         Each partition band is considiered a \"masker\".  The strength\r\n         of the i'th masker in band j is given by:\r\n\r\n         s3(bark(i)-bark(j))*strength(i)\r\n\r\n         The strength of the masker is a function of the energy and tonality.\r\n         The more tonal, the less masking.  LAME uses a simple linear formula\r\n         (controlled by NMT and TMN) which says the strength is given by the\r\n         energy divided by a linear function of the tonality.\r\n         */\r\n        /*\r\n         s3() is the \"spreading function\".  It is given by a formula\r\n         determined via listening tests.\r\n\r\n         The total masking in the j'th partition band is the sum over\r\n         all maskings i.  It is thus given by the convolution of\r\n         the strength with s3(), the \"spreading function.\"\r\n\r\n         masking(j) = sum_over_i  s3(i-j)*strength(i)  = s3 o strength\r\n\r\n         where \"o\" = convolution operator.  s3 is given by a formula determined\r\n         via listening tests.  It is normalized so that s3 o 1 = 1.\r\n\r\n         Note: instead of a simple convolution, LAME also has the\r\n         option of using \"additive masking\"\r\n\r\n         The most critical part is step 2, computing the tonality of each\r\n         partition band.  LAME has two tonality estimators.  The first\r\n         is based on the ISO spec, and measures how predictiable the\r\n         signal is over time.  The more predictable, the more tonal.\r\n         The second measure is based on looking at the spectrum of\r\n         a single granule.  The more peaky the spectrum, the more\r\n         tonal.  By most indications, the latter approach is better.\r\n\r\n         Finally, in step 5, the maskings for the mid and side\r\n         channel are possibly increased.  Under certain circumstances,\r\n         noise in the mid & side channels is assumed to also\r\n         be masked by strong maskers in the L or R channels.\r\n\r\n\r\n         Other data computed by the psy-model:\r\n\r\n         ms_ratio        side-channel / mid-channel masking ratio (for previous granule)\r\n         ms_ratio_next   side-channel / mid-channel masking ratio for this granule\r\n\r\n         percep_entropy[2]     L and R values (prev granule) of PE - A measure of how\r\n         much pre-echo is in the previous granule\r\n         percep_entropy_MS[2]  mid and side channel values (prev granule) of percep_entropy\r\n         energy[4]             L,R,M,S energy in each channel, prev granule\r\n         blocktype_d[2]        block type to use for previous granule\r\n         */\r\n//package mp3;\r\n\r\n//import java.util.Arrays;\r\n\r\n\r\n        function PsyModel() {\r\n\r\n            var fft = new FFT();\r\n\r\n            var LOG10 = 2.30258509299404568402;\r\n\r\n            var rpelev = 2;\r\n            var rpelev2 = 16;\r\n            var rpelev_s = 2;\r\n            var rpelev2_s = 16;\r\n\r\n            /* size of each partition band, in barks: */\r\n            var DELBARK = .34;\r\n\r\n            /* tuned for output level (sensitive to energy scale) */\r\n            var VO_SCALE = (1. / (14752 * 14752) / (Encoder.BLKSIZE / 2));\r\n\r\n            var temporalmask_sustain_sec = 0.01;\r\n\r\n            var NS_PREECHO_ATT0 = 0.8;\r\n            var NS_PREECHO_ATT1 = 0.6;\r\n            var NS_PREECHO_ATT2 = 0.3;\r\n\r\n            var NS_MSFIX = 3.5;\r\n\r\n            var NSATTACKTHRE = 4.4;\r\n            var NSATTACKTHRE_S = 25;\r\n\r\n            var NSFIRLEN = 21;\r\n\r\n            /* size of each partition band, in barks: */\r\n            var LN_TO_LOG10 = 0.2302585093;\r\n\r\n            function NON_LINEAR_SCALE_ENERGY(x) {\r\n                return x;\r\n            }\r\n\r\n            /**\r\n             * <PRE>\r\n             *       L3psycho_anal.  Compute psycho acoustics.\r\n             *\r\n             *       Data returned to the calling program must be delayed by one\r\n             *       granule.\r\n             *\r\n             *       This is done in two places.\r\n             *       If we do not need to know the blocktype, the copying\r\n             *       can be done here at the top of the program: we copy the data for\r\n             *       the last granule (computed during the last call) before it is\r\n             *       overwritten with the new data.  It looks like this:\r\n             *\r\n             *       0. static psymodel_data\r\n             *       1. calling_program_data = psymodel_data\r\n             *       2. compute psymodel_data\r\n             *\r\n             *       For data which needs to know the blocktype, the copying must be\r\n             *       done at the end of this loop, and the old values must be saved:\r\n             *\r\n             *       0. static psymodel_data_old\r\n             *       1. compute psymodel_data\r\n             *       2. compute possible block type of this granule\r\n             *       3. compute final block type of previous granule based on #2.\r\n             *       4. calling_program_data = psymodel_data_old\r\n             *       5. psymodel_data_old = psymodel_data\r\n             *     psycho_loudness_approx\r\n             *       jd - 2001 mar 12\r\n             *    in:  energy   - BLKSIZE/2 elements of frequency magnitudes ^ 2\r\n             *         gfp      - uses out_samplerate, ATHtype (also needed for ATHformula)\r\n             *    returns: loudness^2 approximation, a positive value roughly tuned for a value\r\n             *             of 1.0 for signals near clipping.\r\n             *    notes:   When calibrated, feeding this function binary white noise at sample\r\n             *             values +32767 or -32768 should return values that approach 3.\r\n             *             ATHformula is used to approximate an equal loudness curve.\r\n             *    future:  Data indicates that the shape of the equal loudness curve varies\r\n             *             with intensity.  This function might be improved by using an equal\r\n             *             loudness curve shaped for typical playback levels (instead of the\r\n             *             ATH, that is shaped for the threshold).  A flexible realization might\r\n             *             simply bend the existing ATH curve to achieve the desired shape.\r\n             *             However, the potential gain may not be enough to justify an effort.\r\n             * </PRE>\r\n             */\r\n            function psycho_loudness_approx(energy, gfc) {\r\n                var loudness_power = 0.0;\r\n                /* apply weights to power in freq. bands */\r\n                for (var i = 0; i < Encoder.BLKSIZE / 2; ++i)\r\n                    loudness_power += energy[i] * gfc.ATH.eql_w[i];\r\n                loudness_power *= VO_SCALE;\r\n\r\n                return loudness_power;\r\n            }\r\n\r\n            function compute_ffts(gfp, fftenergy, fftenergy_s, wsamp_l, wsamp_lPos, wsamp_s, wsamp_sPos, gr_out, chn, buffer, bufPos) {\r\n                var gfc = gfp.internal_flags;\r\n                if (chn < 2) {\r\n                    fft.fft_long(gfc, wsamp_l[wsamp_lPos], chn, buffer, bufPos);\r\n                    fft.fft_short(gfc, wsamp_s[wsamp_sPos], chn, buffer, bufPos);\r\n                }\r\n                /* FFT data for mid and side channel is derived from L & R */\r\n                else if (chn == 2) {\r\n                    for (var j = Encoder.BLKSIZE - 1; j >= 0; --j) {\r\n                        var l = wsamp_l[wsamp_lPos + 0][j];\r\n                        var r = wsamp_l[wsamp_lPos + 1][j];\r\n                        wsamp_l[wsamp_lPos + 0][j] = (l + r) * Util.SQRT2 * 0.5;\r\n                        wsamp_l[wsamp_lPos + 1][j] = (l - r) * Util.SQRT2 * 0.5;\r\n                    }\r\n                    for (var b = 2; b >= 0; --b) {\r\n                        for (var j = Encoder.BLKSIZE_s - 1; j >= 0; --j) {\r\n                            var l = wsamp_s[wsamp_sPos + 0][b][j];\r\n                            var r = wsamp_s[wsamp_sPos + 1][b][j];\r\n                            wsamp_s[wsamp_sPos + 0][b][j] = (l + r) * Util.SQRT2 * 0.5;\r\n                            wsamp_s[wsamp_sPos + 1][b][j] = (l - r) * Util.SQRT2 * 0.5;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                /*********************************************************************\r\n                 * compute energies\r\n                 *********************************************************************/\r\n                fftenergy[0] = NON_LINEAR_SCALE_ENERGY(wsamp_l[wsamp_lPos + 0][0]);\r\n                fftenergy[0] *= fftenergy[0];\r\n\r\n                for (var j = Encoder.BLKSIZE / 2 - 1; j >= 0; --j) {\r\n                    var re = (wsamp_l[wsamp_lPos + 0])[Encoder.BLKSIZE / 2 - j];\r\n                    var im = (wsamp_l[wsamp_lPos + 0])[Encoder.BLKSIZE / 2 + j];\r\n                    fftenergy[Encoder.BLKSIZE / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\r\n                        * re + im * im) * 0.5);\r\n                }\r\n                for (var b = 2; b >= 0; --b) {\r\n                    fftenergy_s[b][0] = (wsamp_s[wsamp_sPos + 0])[b][0];\r\n                    fftenergy_s[b][0] *= fftenergy_s[b][0];\r\n                    for (var j = Encoder.BLKSIZE_s / 2 - 1; j >= 0; --j) {\r\n                        var re = (wsamp_s[wsamp_sPos + 0])[b][Encoder.BLKSIZE_s\r\n                        / 2 - j];\r\n                        var im = (wsamp_s[wsamp_sPos + 0])[b][Encoder.BLKSIZE_s\r\n                        / 2 + j];\r\n                        fftenergy_s[b][Encoder.BLKSIZE_s / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\r\n                            * re + im * im) * 0.5);\r\n                    }\r\n                }\r\n                /* total energy */\r\n                {\r\n                    var totalenergy = 0.0;\r\n                    for (var j = 11; j < Encoder.HBLKSIZE; j++)\r\n                        totalenergy += fftenergy[j];\r\n\r\n                    gfc.tot_ener[chn] = totalenergy;\r\n                }\r\n\r\n                if (gfp.analysis) {\r\n                    for (var j = 0; j < Encoder.HBLKSIZE; j++) {\r\n                        gfc.pinfo.energy[gr_out][chn][j] = gfc.pinfo.energy_save[chn][j];\r\n                        gfc.pinfo.energy_save[chn][j] = fftenergy[j];\r\n                    }\r\n                    gfc.pinfo.pe[gr_out][chn] = gfc.pe[chn];\r\n                }\r\n\r\n                /*********************************************************************\r\n                 * compute loudness approximation (used for ATH auto-level adjustment)\r\n                 *********************************************************************/\r\n                if (gfp.athaa_loudapprox == 2 && chn < 2) {\r\n                    // no loudness for mid/side ch\r\n                    gfc.loudness_sq[gr_out][chn] = gfc.loudness_sq_save[chn];\r\n                    gfc.loudness_sq_save[chn] = psycho_loudness_approx(fftenergy, gfc);\r\n                }\r\n            }\r\n\r\n            /* mask_add optimization */\r\n            /* init the limit values used to avoid computing log in mask_add when it is not necessary */\r\n\r\n            /**\r\n             * <PRE>\r\n             *  For example, with i = 10*log10(m2/m1)/10*16         (= log10(m2/m1)*16)\r\n             *\r\n             * abs(i)>8 is equivalent (as i is an integer) to\r\n             * abs(i)>=9\r\n             * i>=9 || i<=-9\r\n             * equivalent to (as i is the biggest integer smaller than log10(m2/m1)*16\r\n             * or the smallest integer bigger than log10(m2/m1)*16 depending on the sign of log10(m2/m1)*16)\r\n             * log10(m2/m1)>=9/16 || log10(m2/m1)<=-9/16\r\n             * exp10 is strictly increasing thus this is equivalent to\r\n             * m2/m1 >= 10^(9/16) || m2/m1<=10^(-9/16) which are comparisons to constants\r\n             * </PRE>\r\n             */\r\n\r\n            /**\r\n             * as in if(i>8)\r\n             */\r\n            var I1LIMIT = 8;\r\n            /**\r\n             * as in if(i>24) . changed 23\r\n             */\r\n            var I2LIMIT = 23;\r\n            /**\r\n             * as in if(m<15)\r\n             */\r\n            var MLIMIT = 15;\r\n\r\n            var ma_max_i1;\r\n            var ma_max_i2;\r\n            var ma_max_m;\r\n\r\n            /**\r\n             * This is the masking table:<BR>\r\n             * According to tonality, values are going from 0dB (TMN) to 9.3dB (NMT).<BR>\r\n             * After additive masking computation, 8dB are added, so final values are\r\n             * going from 8dB to 17.3dB\r\n             *\r\n             * pow(10, -0.0..-0.6)\r\n             */\r\n            var tab = [1.0, 0.79433, 0.63096, 0.63096,\r\n                0.63096, 0.63096, 0.63096, 0.25119, 0.11749];\r\n\r\n            function init_mask_add_max_values() {\r\n                ma_max_i1 = Math.pow(10, (I1LIMIT + 1) / 16.0);\r\n                ma_max_i2 = Math.pow(10, (I2LIMIT + 1) / 16.0);\r\n                ma_max_m = Math.pow(10, (MLIMIT) / 10.0);\r\n            }\r\n\r\n            var table1 = [3.3246 * 3.3246,\r\n                3.23837 * 3.23837, 3.15437 * 3.15437, 3.00412 * 3.00412,\r\n                2.86103 * 2.86103, 2.65407 * 2.65407, 2.46209 * 2.46209,\r\n                2.284 * 2.284, 2.11879 * 2.11879, 1.96552 * 1.96552,\r\n                1.82335 * 1.82335, 1.69146 * 1.69146, 1.56911 * 1.56911,\r\n                1.46658 * 1.46658, 1.37074 * 1.37074, 1.31036 * 1.31036,\r\n                1.25264 * 1.25264, 1.20648 * 1.20648, 1.16203 * 1.16203,\r\n                1.12765 * 1.12765, 1.09428 * 1.09428, 1.0659 * 1.0659,\r\n                1.03826 * 1.03826, 1.01895 * 1.01895, 1];\r\n\r\n            var table2 = [1.33352 * 1.33352,\r\n                1.35879 * 1.35879, 1.38454 * 1.38454, 1.39497 * 1.39497,\r\n                1.40548 * 1.40548, 1.3537 * 1.3537, 1.30382 * 1.30382,\r\n                1.22321 * 1.22321, 1.14758 * 1.14758, 1];\r\n\r\n            var table3 = [2.35364 * 2.35364,\r\n                2.29259 * 2.29259, 2.23313 * 2.23313, 2.12675 * 2.12675,\r\n                2.02545 * 2.02545, 1.87894 * 1.87894, 1.74303 * 1.74303,\r\n                1.61695 * 1.61695, 1.49999 * 1.49999, 1.39148 * 1.39148,\r\n                1.29083 * 1.29083, 1.19746 * 1.19746, 1.11084 * 1.11084,\r\n                1.03826 * 1.03826];\r\n\r\n            /**\r\n             * addition of simultaneous masking Naoki Shibata 2000/7\r\n             */\r\n            function mask_add(m1, m2, kk, b, gfc, shortblock) {\r\n                var ratio;\r\n\r\n                if (m2 > m1) {\r\n                    if (m2 < (m1 * ma_max_i2))\r\n                        ratio = m2 / m1;\r\n                    else\r\n                        return (m1 + m2);\r\n                } else {\r\n                    if (m1 >= (m2 * ma_max_i2))\r\n                        return (m1 + m2);\r\n                    ratio = m1 / m2;\r\n                }\r\n\r\n                /* Should always be true, just checking */\r\n\r\n                m1 += m2;\r\n                //if (((long)(b + 3) & 0xffffffff) <= 3 + 3) {\r\n                if ((b + 3) <= 3 + 3) {\r\n                    /* approximately, 1 bark = 3 partitions */\r\n                    /* 65% of the cases */\r\n                    /* originally 'if(i > 8)' */\r\n                    if (ratio >= ma_max_i1) {\r\n                        /* 43% of the total */\r\n                        return m1;\r\n                    }\r\n\r\n                    /* 22% of the total */\r\n                    var i = 0 | (Util.FAST_LOG10_X(ratio, 16.0));\r\n                    return m1 * table2[i];\r\n                }\r\n\r\n                /**\r\n                 * <PRE>\r\n                 * m<15 equ log10((m1+m2)/gfc.ATH.cb[k])<1.5\r\n                 * equ (m1+m2)/gfc.ATH.cb[k]<10^1.5\r\n                 * equ (m1+m2)<10^1.5 * gfc.ATH.cb[k]\r\n                 * </PRE>\r\n                 */\r\n                var i = 0 | Util.FAST_LOG10_X(ratio, 16.0);\r\n                if (shortblock != 0) {\r\n                    m2 = gfc.ATH.cb_s[kk] * gfc.ATH.adjust;\r\n                } else {\r\n                    m2 = gfc.ATH.cb_l[kk] * gfc.ATH.adjust;\r\n                }\r\n                if (m1 < ma_max_m * m2) {\r\n                    /* 3% of the total */\r\n                    /* Originally if (m > 0) { */\r\n                    if (m1 > m2) {\r\n                        var f, r;\r\n\r\n                        f = 1.0;\r\n                        if (i <= 13)\r\n                            f = table3[i];\r\n\r\n                        r = Util.FAST_LOG10_X(m1 / m2, 10.0 / 15.0);\r\n                        return m1 * ((table1[i] - f) * r + f);\r\n                    }\r\n\r\n                    if (i > 13)\r\n                        return m1;\r\n\r\n                    return m1 * table3[i];\r\n                }\r\n\r\n                /* 10% of total */\r\n                return m1 * table1[i];\r\n            }\r\n\r\n            var table2_ = [1.33352 * 1.33352,\r\n                1.35879 * 1.35879, 1.38454 * 1.38454, 1.39497 * 1.39497,\r\n                1.40548 * 1.40548, 1.3537 * 1.3537, 1.30382 * 1.30382,\r\n                1.22321 * 1.22321, 1.14758 * 1.14758, 1];\r\n\r\n            /**\r\n             * addition of simultaneous masking Naoki Shibata 2000/7\r\n             */\r\n            function vbrpsy_mask_add(m1, m2, b) {\r\n                var ratio;\r\n\r\n                if (m1 < 0) {\r\n                    m1 = 0;\r\n                }\r\n                if (m2 < 0) {\r\n                    m2 = 0;\r\n                }\r\n                if (m1 <= 0) {\r\n                    return m2;\r\n                }\r\n                if (m2 <= 0) {\r\n                    return m1;\r\n                }\r\n                if (m2 > m1) {\r\n                    ratio = m2 / m1;\r\n                } else {\r\n                    ratio = m1 / m2;\r\n                }\r\n                if (-2 <= b && b <= 2) {\r\n                    /* approximately, 1 bark = 3 partitions */\r\n                    /* originally 'if(i > 8)' */\r\n                    if (ratio >= ma_max_i1) {\r\n                        return m1 + m2;\r\n                    } else {\r\n                        var i = 0 | (Util.FAST_LOG10_X(ratio, 16.0));\r\n                        return (m1 + m2) * table2_[i];\r\n                    }\r\n                }\r\n                if (ratio < ma_max_i2) {\r\n                    return m1 + m2;\r\n                }\r\n                if (m1 < m2) {\r\n                    m1 = m2;\r\n                }\r\n                return m1;\r\n            }\r\n\r\n            /**\r\n             * compute interchannel masking effects\r\n             */\r\n            function calc_interchannel_masking(gfp, ratio) {\r\n                var gfc = gfp.internal_flags;\r\n                if (gfc.channels_out > 1) {\r\n                    for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\r\n                        var l = gfc.thm[0].l[sb];\r\n                        var r = gfc.thm[1].l[sb];\r\n                        gfc.thm[0].l[sb] += r * ratio;\r\n                        gfc.thm[1].l[sb] += l * ratio;\r\n                    }\r\n                    for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\r\n                        for (var sblock = 0; sblock < 3; sblock++) {\r\n                            var l = gfc.thm[0].s[sb][sblock];\r\n                            var r = gfc.thm[1].s[sb][sblock];\r\n                            gfc.thm[0].s[sb][sblock] += r * ratio;\r\n                            gfc.thm[1].s[sb][sblock] += l * ratio;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * compute M/S thresholds from Johnston & Ferreira 1992 ICASSP paper\r\n             */\r\n            function msfix1(gfc) {\r\n                for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\r\n                    /* use this fix if L & R masking differs by 2db or less */\r\n                    /* if db = 10*log10(x2/x1) < 2 */\r\n                    /* if (x2 < 1.58*x1) { */\r\n                    if (gfc.thm[0].l[sb] > 1.58 * gfc.thm[1].l[sb]\r\n                        || gfc.thm[1].l[sb] > 1.58 * gfc.thm[0].l[sb])\r\n                        continue;\r\n                    var mld = gfc.mld_l[sb] * gfc.en[3].l[sb];\r\n                    var rmid = Math.max(gfc.thm[2].l[sb],\r\n                        Math.min(gfc.thm[3].l[sb], mld));\r\n\r\n                    mld = gfc.mld_l[sb] * gfc.en[2].l[sb];\r\n                    var rside = Math.max(gfc.thm[3].l[sb],\r\n                        Math.min(gfc.thm[2].l[sb], mld));\r\n                    gfc.thm[2].l[sb] = rmid;\r\n                    gfc.thm[3].l[sb] = rside;\r\n                }\r\n\r\n                for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\r\n                    for (var sblock = 0; sblock < 3; sblock++) {\r\n                        if (gfc.thm[0].s[sb][sblock] > 1.58 * gfc.thm[1].s[sb][sblock]\r\n                            || gfc.thm[1].s[sb][sblock] > 1.58 * gfc.thm[0].s[sb][sblock])\r\n                            continue;\r\n                        var mld = gfc.mld_s[sb] * gfc.en[3].s[sb][sblock];\r\n                        var rmid = Math.max(gfc.thm[2].s[sb][sblock],\r\n                            Math.min(gfc.thm[3].s[sb][sblock], mld));\r\n\r\n                        mld = gfc.mld_s[sb] * gfc.en[2].s[sb][sblock];\r\n                        var rside = Math.max(gfc.thm[3].s[sb][sblock],\r\n                            Math.min(gfc.thm[2].s[sb][sblock], mld));\r\n\r\n                        gfc.thm[2].s[sb][sblock] = rmid;\r\n                        gfc.thm[3].s[sb][sblock] = rside;\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Adjust M/S maskings if user set \"msfix\"\r\n             *\r\n             * Naoki Shibata 2000\r\n             */\r\n            function ns_msfix(gfc, msfix, athadjust) {\r\n                var msfix2 = msfix;\r\n                var athlower = Math.pow(10, athadjust);\r\n\r\n                msfix *= 2.0;\r\n                msfix2 *= 2.0;\r\n                for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\r\n                    var thmLR, thmM, thmS, ath;\r\n                    ath = (gfc.ATH.cb_l[gfc.bm_l[sb]]) * athlower;\r\n                    thmLR = Math.min(Math.max(gfc.thm[0].l[sb], ath),\r\n                        Math.max(gfc.thm[1].l[sb], ath));\r\n                    thmM = Math.max(gfc.thm[2].l[sb], ath);\r\n                    thmS = Math.max(gfc.thm[3].l[sb], ath);\r\n                    if (thmLR * msfix < thmM + thmS) {\r\n                        var f = thmLR * msfix2 / (thmM + thmS);\r\n                        thmM *= f;\r\n                        thmS *= f;\r\n                    }\r\n                    gfc.thm[2].l[sb] = Math.min(thmM, gfc.thm[2].l[sb]);\r\n                    gfc.thm[3].l[sb] = Math.min(thmS, gfc.thm[3].l[sb]);\r\n                }\r\n\r\n                athlower *= ( Encoder.BLKSIZE_s / Encoder.BLKSIZE);\r\n                for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\r\n                    for (var sblock = 0; sblock < 3; sblock++) {\r\n                        var thmLR, thmM, thmS, ath;\r\n                        ath = (gfc.ATH.cb_s[gfc.bm_s[sb]]) * athlower;\r\n                        thmLR = Math.min(Math.max(gfc.thm[0].s[sb][sblock], ath),\r\n                            Math.max(gfc.thm[1].s[sb][sblock], ath));\r\n                        thmM = Math.max(gfc.thm[2].s[sb][sblock], ath);\r\n                        thmS = Math.max(gfc.thm[3].s[sb][sblock], ath);\r\n\r\n                        if (thmLR * msfix < thmM + thmS) {\r\n                            var f = thmLR * msfix / (thmM + thmS);\r\n                            thmM *= f;\r\n                            thmS *= f;\r\n                        }\r\n                        gfc.thm[2].s[sb][sblock] = Math.min(gfc.thm[2].s[sb][sblock],\r\n                            thmM);\r\n                        gfc.thm[3].s[sb][sblock] = Math.min(gfc.thm[3].s[sb][sblock],\r\n                            thmS);\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * short block threshold calculation (part 2)\r\n             *\r\n             * partition band bo_s[sfb] is at the transition from scalefactor band sfb\r\n             * to the next one sfb+1; enn and thmm have to be split between them\r\n             */\r\n            function convert_partition2scalefac_s(gfc, eb, thr, chn, sblock) {\r\n                var sb, b;\r\n                var enn = 0.0;\r\n                var thmm = 0.0;\r\n                for (sb = b = 0; sb < Encoder.SBMAX_s; ++b, ++sb) {\r\n                    var bo_s_sb = gfc.bo_s[sb];\r\n                    var npart_s = gfc.npart_s;\r\n                    var b_lim = bo_s_sb < npart_s ? bo_s_sb : npart_s;\r\n                    while (b < b_lim) {\r\n                        // iff failed, it may indicate some index error elsewhere\r\n                        enn += eb[b];\r\n                        thmm += thr[b];\r\n                        b++;\r\n                    }\r\n                    gfc.en[chn].s[sb][sblock] = enn;\r\n                    gfc.thm[chn].s[sb][sblock] = thmm;\r\n\r\n                    if (b >= npart_s) {\r\n                        ++sb;\r\n                        break;\r\n                    }\r\n                    // iff failed, it may indicate some index error elsewhere\r\n                    {\r\n                        /* at transition sfb . sfb+1 */\r\n                        var w_curr = gfc.PSY.bo_s_weight[sb];\r\n                        var w_next = 1.0 - w_curr;\r\n                        enn = w_curr * eb[b];\r\n                        thmm = w_curr * thr[b];\r\n                        gfc.en[chn].s[sb][sblock] += enn;\r\n                        gfc.thm[chn].s[sb][sblock] += thmm;\r\n                        enn = w_next * eb[b];\r\n                        thmm = w_next * thr[b];\r\n                    }\r\n                }\r\n                /* zero initialize the rest */\r\n                for (; sb < Encoder.SBMAX_s; ++sb) {\r\n                    gfc.en[chn].s[sb][sblock] = 0;\r\n                    gfc.thm[chn].s[sb][sblock] = 0;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * longblock threshold calculation (part 2)\r\n             */\r\n            function convert_partition2scalefac_l(gfc, eb, thr, chn) {\r\n                var sb, b;\r\n                var enn = 0.0;\r\n                var thmm = 0.0;\r\n                for (sb = b = 0; sb < Encoder.SBMAX_l; ++b, ++sb) {\r\n                    var bo_l_sb = gfc.bo_l[sb];\r\n                    var npart_l = gfc.npart_l;\r\n                    var b_lim = bo_l_sb < npart_l ? bo_l_sb : npart_l;\r\n                    while (b < b_lim) {\r\n                        // iff failed, it may indicate some index error elsewhere\r\n                        enn += eb[b];\r\n                        thmm += thr[b];\r\n                        b++;\r\n                    }\r\n                    gfc.en[chn].l[sb] = enn;\r\n                    gfc.thm[chn].l[sb] = thmm;\r\n\r\n                    if (b >= npart_l) {\r\n                        ++sb;\r\n                        break;\r\n                    }\r\n                    {\r\n                        /* at transition sfb . sfb+1 */\r\n                        var w_curr = gfc.PSY.bo_l_weight[sb];\r\n                        var w_next = 1.0 - w_curr;\r\n                        enn = w_curr * eb[b];\r\n                        thmm = w_curr * thr[b];\r\n                        gfc.en[chn].l[sb] += enn;\r\n                        gfc.thm[chn].l[sb] += thmm;\r\n                        enn = w_next * eb[b];\r\n                        thmm = w_next * thr[b];\r\n                    }\r\n                }\r\n                /* zero initialize the rest */\r\n                for (; sb < Encoder.SBMAX_l; ++sb) {\r\n                    gfc.en[chn].l[sb] = 0;\r\n                    gfc.thm[chn].l[sb] = 0;\r\n                }\r\n            }\r\n\r\n            function compute_masking_s(gfp, fftenergy_s, eb, thr, chn, sblock) {\r\n                var gfc = gfp.internal_flags;\r\n                var j, b;\r\n\r\n                for (b = j = 0; b < gfc.npart_s; ++b) {\r\n                    var ebb = 0, m = 0;\r\n                    var n = gfc.numlines_s[b];\r\n                    for (var i = 0; i < n; ++i, ++j) {\r\n                        var el = fftenergy_s[sblock][j];\r\n                        ebb += el;\r\n                        if (m < el)\r\n                            m = el;\r\n                    }\r\n                    eb[b] = ebb;\r\n                }\r\n                for (j = b = 0; b < gfc.npart_s; b++) {\r\n                    var kk = gfc.s3ind_s[b][0];\r\n                    var ecb = gfc.s3_ss[j++] * eb[kk];\r\n                    ++kk;\r\n                    while (kk <= gfc.s3ind_s[b][1]) {\r\n                        ecb += gfc.s3_ss[j] * eb[kk];\r\n                        ++j;\r\n                        ++kk;\r\n                    }\r\n\r\n                    { /* limit calculated threshold by previous granule */\r\n                        var x = rpelev_s * gfc.nb_s1[chn][b];\r\n                        thr[b] = Math.min(ecb, x);\r\n                    }\r\n                    if (gfc.blocktype_old[chn & 1] == Encoder.SHORT_TYPE) {\r\n                        /* limit calculated threshold by even older granule */\r\n                        var x = rpelev2_s * gfc.nb_s2[chn][b];\r\n                        var y = thr[b];\r\n                        thr[b] = Math.min(x, y);\r\n                    }\r\n\r\n                    gfc.nb_s2[chn][b] = gfc.nb_s1[chn][b];\r\n                    gfc.nb_s1[chn][b] = ecb;\r\n                }\r\n                for (; b <= Encoder.CBANDS; ++b) {\r\n                    eb[b] = 0;\r\n                    thr[b] = 0;\r\n                }\r\n            }\r\n\r\n            function block_type_set(gfp, uselongblock, blocktype_d, blocktype) {\r\n                var gfc = gfp.internal_flags;\r\n\r\n                if (gfp.short_blocks == ShortBlock.short_block_coupled\r\n                    /* force both channels to use the same block type */\r\n                    /* this is necessary if the frame is to be encoded in ms_stereo. */\r\n                    /* But even without ms_stereo, FhG does this */\r\n                    && !(uselongblock[0] != 0 && uselongblock[1] != 0))\r\n                    uselongblock[0] = uselongblock[1] = 0;\r\n\r\n                /*\r\n                 * update the blocktype of the previous granule, since it depends on\r\n                 * what happend in this granule\r\n                 */\r\n                for (var chn = 0; chn < gfc.channels_out; chn++) {\r\n                    blocktype[chn] = Encoder.NORM_TYPE;\r\n                    /* disable short blocks */\r\n                    if (gfp.short_blocks == ShortBlock.short_block_dispensed)\r\n                        uselongblock[chn] = 1;\r\n                    if (gfp.short_blocks == ShortBlock.short_block_forced)\r\n                        uselongblock[chn] = 0;\r\n\r\n                    if (uselongblock[chn] != 0) {\r\n                        /* no attack : use long blocks */\r\n                        if (gfc.blocktype_old[chn] == Encoder.SHORT_TYPE)\r\n                            blocktype[chn] = Encoder.STOP_TYPE;\r\n                    } else {\r\n                        /* attack : use short blocks */\r\n                        blocktype[chn] = Encoder.SHORT_TYPE;\r\n                        if (gfc.blocktype_old[chn] == Encoder.NORM_TYPE) {\r\n                            gfc.blocktype_old[chn] = Encoder.START_TYPE;\r\n                        }\r\n                        if (gfc.blocktype_old[chn] == Encoder.STOP_TYPE)\r\n                            gfc.blocktype_old[chn] = Encoder.SHORT_TYPE;\r\n                    }\r\n\r\n                    blocktype_d[chn] = gfc.blocktype_old[chn];\r\n                    // value returned to calling program\r\n                    gfc.blocktype_old[chn] = blocktype[chn];\r\n                    // save for next call to l3psy_anal\r\n                }\r\n            }\r\n\r\n            function NS_INTERP(x, y, r) {\r\n                /* was pow((x),(r))*pow((y),1-(r)) */\r\n                if (r >= 1.0) {\r\n                    /* 99.7% of the time */\r\n                    return x;\r\n                }\r\n                if (r <= 0.0)\r\n                    return y;\r\n                if (y > 0.0) {\r\n                    /* rest of the time */\r\n                    return (Math.pow(x / y, r) * y);\r\n                }\r\n                /* never happens */\r\n                return 0.0;\r\n            }\r\n\r\n            /**\r\n             * these values are tuned only for 44.1kHz...\r\n             */\r\n            var regcoef_s = [11.8, 13.6, 17.2, 32, 46.5,\r\n                51.3, 57.5, 67.1, 71.5, 84.6, 97.6, 130,\r\n                /* 255.8 */\r\n            ];\r\n\r\n            function pecalc_s(mr, masking_lower) {\r\n                var pe_s = 1236.28 / 4;\r\n                for (var sb = 0; sb < Encoder.SBMAX_s - 1; sb++) {\r\n                    for (var sblock = 0; sblock < 3; sblock++) {\r\n                        var thm = mr.thm.s[sb][sblock];\r\n                        if (thm > 0.0) {\r\n                            var x = thm * masking_lower;\r\n                            var en = mr.en.s[sb][sblock];\r\n                            if (en > x) {\r\n                                if (en > x * 1e10) {\r\n                                    pe_s += regcoef_s[sb] * (10.0 * LOG10);\r\n                                } else {\r\n                                    pe_s += regcoef_s[sb] * Util.FAST_LOG10(en / x);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return pe_s;\r\n            }\r\n\r\n            /**\r\n             * these values are tuned only for 44.1kHz...\r\n             */\r\n            var regcoef_l = [6.8, 5.8, 5.8, 6.4, 6.5, 9.9,\r\n                12.1, 14.4, 15, 18.9, 21.6, 26.9, 34.2, 40.2, 46.8, 56.5,\r\n                60.7, 73.9, 85.7, 93.4, 126.1,\r\n                /* 241.3 */\r\n            ];\r\n\r\n            function pecalc_l(mr, masking_lower) {\r\n                var pe_l = 1124.23 / 4;\r\n                for (var sb = 0; sb < Encoder.SBMAX_l - 1; sb++) {\r\n                    var thm = mr.thm.l[sb];\r\n                    if (thm > 0.0) {\r\n                        var x = thm * masking_lower;\r\n                        var en = mr.en.l[sb];\r\n                        if (en > x) {\r\n                            if (en > x * 1e10) {\r\n                                pe_l += regcoef_l[sb] * (10.0 * LOG10);\r\n                            } else {\r\n                                pe_l += regcoef_l[sb] * Util.FAST_LOG10(en / x);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return pe_l;\r\n            }\r\n\r\n            function calc_energy(gfc, fftenergy, eb, max, avg) {\r\n                var b, j;\r\n\r\n                for (b = j = 0; b < gfc.npart_l; ++b) {\r\n                    var ebb = 0, m = 0;\r\n                    var i;\r\n                    for (i = 0; i < gfc.numlines_l[b]; ++i, ++j) {\r\n                        var el = fftenergy[j];\r\n                        ebb += el;\r\n                        if (m < el)\r\n                            m = el;\r\n                    }\r\n                    eb[b] = ebb;\r\n                    max[b] = m;\r\n                    avg[b] = ebb * gfc.rnumlines_l[b];\r\n                }\r\n            }\r\n\r\n            function calc_mask_index_l(gfc, max, avg, mask_idx) {\r\n                var last_tab_entry = tab.length - 1;\r\n                var b = 0;\r\n                var a = avg[b] + avg[b + 1];\r\n                if (a > 0.0) {\r\n                    var m = max[b];\r\n                    if (m < max[b + 1])\r\n                        m = max[b + 1];\r\n                    a = 20.0 * (m * 2.0 - a)\r\n                        / (a * (gfc.numlines_l[b] + gfc.numlines_l[b + 1] - 1));\r\n                    var k = 0 | a;\r\n                    if (k > last_tab_entry)\r\n                        k = last_tab_entry;\r\n                    mask_idx[b] = k;\r\n                } else {\r\n                    mask_idx[b] = 0;\r\n                }\r\n\r\n                for (b = 1; b < gfc.npart_l - 1; b++) {\r\n                    a = avg[b - 1] + avg[b] + avg[b + 1];\r\n                    if (a > 0.0) {\r\n                        var m = max[b - 1];\r\n                        if (m < max[b])\r\n                            m = max[b];\r\n                        if (m < max[b + 1])\r\n                            m = max[b + 1];\r\n                        a = 20.0\r\n                            * (m * 3.0 - a)\r\n                            / (a * (gfc.numlines_l[b - 1] + gfc.numlines_l[b]\r\n                            + gfc.numlines_l[b + 1] - 1));\r\n                        var k = 0 | a;\r\n                        if (k > last_tab_entry)\r\n                            k = last_tab_entry;\r\n                        mask_idx[b] = k;\r\n                    } else {\r\n                        mask_idx[b] = 0;\r\n                    }\r\n                }\r\n\r\n                a = avg[b - 1] + avg[b];\r\n                if (a > 0.0) {\r\n                    var m = max[b - 1];\r\n                    if (m < max[b])\r\n                        m = max[b];\r\n                    a = 20.0 * (m * 2.0 - a)\r\n                        / (a * (gfc.numlines_l[b - 1] + gfc.numlines_l[b] - 1));\r\n                    var k = 0 | a;\r\n                    if (k > last_tab_entry)\r\n                        k = last_tab_entry;\r\n                    mask_idx[b] = k;\r\n                } else {\r\n                    mask_idx[b] = 0;\r\n                }\r\n            }\r\n\r\n            var fircoef = [\r\n                -8.65163e-18 * 2, -0.00851586 * 2, -6.74764e-18 * 2, 0.0209036 * 2,\r\n                -3.36639e-17 * 2, -0.0438162 * 2, -1.54175e-17 * 2, 0.0931738 * 2,\r\n                -5.52212e-17 * 2, -0.313819 * 2\r\n            ];\r\n\r\n            this.L3psycho_anal_ns = function (gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, percep_entropy, percep_MS_entropy, energy, blocktype_d) {\r\n                /*\r\n                 * to get a good cache performance, one has to think about the sequence,\r\n                 * in which the variables are used.\r\n                 */\r\n                var gfc = gfp.internal_flags;\r\n\r\n                /* fft and energy calculation */\r\n                var wsamp_L = new_float_n([2, Encoder.BLKSIZE]);\r\n                var wsamp_S = new_float_n([2, 3, Encoder.BLKSIZE_s]);\r\n\r\n                /* convolution */\r\n                var eb_l = new_float(Encoder.CBANDS + 1);\r\n                var eb_s = new_float(Encoder.CBANDS + 1);\r\n                var thr = new_float(Encoder.CBANDS + 2);\r\n\r\n                /* block type */\r\n                var blocktype = new_int(2), uselongblock = new_int(2);\r\n\r\n                /* usual variables like loop indices, etc.. */\r\n                var numchn, chn;\r\n                var b, i, j, k;\r\n                var sb, sblock;\r\n\r\n                /* variables used for --nspsytune */\r\n                var ns_hpfsmpl = new_float_n([2, 576]);\r\n                var pcfact;\r\n                var mask_idx_l = new_int(Encoder.CBANDS + 2), mask_idx_s = new_int(Encoder.CBANDS + 2);\r\n\r\n                Arrays.fill(mask_idx_s, 0);\r\n\r\n                numchn = gfc.channels_out;\r\n                /* chn=2 and 3 = Mid and Side channels */\r\n                if (gfp.mode == MPEGMode.JOINT_STEREO)\r\n                    numchn = 4;\r\n\r\n                if (gfp.VBR == VbrMode.vbr_off)\r\n                    pcfact = gfc.ResvMax == 0 ? 0 : ( gfc.ResvSize)\r\n                        / gfc.ResvMax * 0.5;\r\n                else if (gfp.VBR == VbrMode.vbr_rh || gfp.VBR == VbrMode.vbr_mtrh\r\n                    || gfp.VBR == VbrMode.vbr_mt) {\r\n                    pcfact = 0.6;\r\n                } else\r\n                    pcfact = 1.0;\r\n\r\n                /**********************************************************************\r\n                 * Apply HPF of fs/4 to the input signal. This is used for attack\r\n                 * detection / handling.\r\n                 **********************************************************************/\r\n                /* Don't copy the input buffer into a temporary buffer */\r\n                /* unroll the loop 2 times */\r\n                for (chn = 0; chn < gfc.channels_out; chn++) {\r\n                    /* apply high pass filter of fs/4 */\r\n                    var firbuf = buffer[chn];\r\n                    var firbufPos = bufPos + 576 - 350 - NSFIRLEN + 192;\r\n                    for (i = 0; i < 576; i++) {\r\n                        var sum1, sum2;\r\n                        sum1 = firbuf[firbufPos + i + 10];\r\n                        sum2 = 0.0;\r\n                        for (j = 0; j < ((NSFIRLEN - 1) / 2) - 1; j += 2) {\r\n                            sum1 += fircoef[j]\r\n                                * (firbuf[firbufPos + i + j] + firbuf[firbufPos + i\r\n                                + NSFIRLEN - j]);\r\n                            sum2 += fircoef[j + 1]\r\n                                * (firbuf[firbufPos + i + j + 1] + firbuf[firbufPos\r\n                                + i + NSFIRLEN - j - 1]);\r\n                        }\r\n                        ns_hpfsmpl[chn][i] = sum1 + sum2;\r\n                    }\r\n                    masking_ratio[gr_out][chn].en.assign(gfc.en[chn]);\r\n                    masking_ratio[gr_out][chn].thm.assign(gfc.thm[chn]);\r\n                    if (numchn > 2) {\r\n                        /* MS maskings */\r\n                        /* percep_MS_entropy [chn-2] = gfc . pe [chn]; */\r\n                        masking_MS_ratio[gr_out][chn].en.assign(gfc.en[chn + 2]);\r\n                        masking_MS_ratio[gr_out][chn].thm.assign(gfc.thm[chn + 2]);\r\n                    }\r\n                }\r\n\r\n                for (chn = 0; chn < numchn; chn++) {\r\n                    var wsamp_l;\r\n                    var wsamp_s;\r\n                    var en_subshort = new_float(12);\r\n                    var en_short = [0, 0, 0, 0];\r\n                    var attack_intensity = new_float(12);\r\n                    var ns_uselongblock = 1;\r\n                    var attackThreshold;\r\n                    var max = new_float(Encoder.CBANDS), avg = new_float(Encoder.CBANDS);\r\n                    var ns_attacks = [0, 0, 0, 0];\r\n                    var fftenergy = new_float(Encoder.HBLKSIZE);\r\n                    var fftenergy_s = new_float_n([3, Encoder.HBLKSIZE_s]);\r\n\r\n                    /*\r\n                     * rh 20040301: the following loops do access one off the limits so\r\n                     * I increase the array dimensions by one and initialize the\r\n                     * accessed values to zero\r\n                     */\r\n\r\n                    /***************************************************************\r\n                     * determine the block type (window type)\r\n                     ***************************************************************/\r\n                    /* calculate energies of each sub-shortblocks */\r\n                    for (i = 0; i < 3; i++) {\r\n                        en_subshort[i] = gfc.nsPsy.last_en_subshort[chn][i + 6];\r\n                        attack_intensity[i] = en_subshort[i]\r\n                            / gfc.nsPsy.last_en_subshort[chn][i + 4];\r\n                        en_short[0] += en_subshort[i];\r\n                    }\r\n\r\n                    if (chn == 2) {\r\n                        for (i = 0; i < 576; i++) {\r\n                            var l, r;\r\n                            l = ns_hpfsmpl[0][i];\r\n                            r = ns_hpfsmpl[1][i];\r\n                            ns_hpfsmpl[0][i] = l + r;\r\n                            ns_hpfsmpl[1][i] = l - r;\r\n                        }\r\n                    }\r\n                    {\r\n                        var pf = ns_hpfsmpl[chn & 1];\r\n                        var pfPos = 0;\r\n                        for (i = 0; i < 9; i++) {\r\n                            var pfe = pfPos + 576 / 9;\r\n                            var p = 1.;\r\n                            for (; pfPos < pfe; pfPos++)\r\n                                if (p < Math.abs(pf[pfPos]))\r\n                                    p = Math.abs(pf[pfPos]);\r\n\r\n                            gfc.nsPsy.last_en_subshort[chn][i] = en_subshort[i + 3] = p;\r\n                            en_short[1 + i / 3] += p;\r\n                            if (p > en_subshort[i + 3 - 2]) {\r\n                                p = p / en_subshort[i + 3 - 2];\r\n                            } else if (en_subshort[i + 3 - 2] > p * 10.0) {\r\n                                p = en_subshort[i + 3 - 2] / (p * 10.0);\r\n                            } else\r\n                                p = 0.0;\r\n                            attack_intensity[i + 3] = p;\r\n                        }\r\n                    }\r\n\r\n                    if (gfp.analysis) {\r\n                        var x = attack_intensity[0];\r\n                        for (i = 1; i < 12; i++)\r\n                            if (x < attack_intensity[i])\r\n                                x = attack_intensity[i];\r\n                        gfc.pinfo.ers[gr_out][chn] = gfc.pinfo.ers_save[chn];\r\n                        gfc.pinfo.ers_save[chn] = x;\r\n                    }\r\n\r\n                    /* compare energies between sub-shortblocks */\r\n                    attackThreshold = (chn == 3) ? gfc.nsPsy.attackthre_s\r\n                        : gfc.nsPsy.attackthre;\r\n                    for (i = 0; i < 12; i++)\r\n                        if (0 == ns_attacks[i / 3]\r\n                            && attack_intensity[i] > attackThreshold)\r\n                            ns_attacks[i / 3] = (i % 3) + 1;\r\n\r\n                    /*\r\n                     * should have energy change between short blocks, in order to avoid\r\n                     * periodic signals\r\n                     */\r\n                    for (i = 1; i < 4; i++) {\r\n                        var ratio;\r\n                        if (en_short[i - 1] > en_short[i]) {\r\n                            ratio = en_short[i - 1] / en_short[i];\r\n                        } else {\r\n                            ratio = en_short[i] / en_short[i - 1];\r\n                        }\r\n                        if (ratio < 1.7) {\r\n                            ns_attacks[i] = 0;\r\n                            if (i == 1)\r\n                                ns_attacks[0] = 0;\r\n                        }\r\n                    }\r\n\r\n                    if (ns_attacks[0] != 0 && gfc.nsPsy.lastAttacks[chn] != 0)\r\n                        ns_attacks[0] = 0;\r\n\r\n                    if (gfc.nsPsy.lastAttacks[chn] == 3\r\n                        || (ns_attacks[0] + ns_attacks[1] + ns_attacks[2] + ns_attacks[3]) != 0) {\r\n                        ns_uselongblock = 0;\r\n\r\n                        if (ns_attacks[1] != 0 && ns_attacks[0] != 0)\r\n                            ns_attacks[1] = 0;\r\n                        if (ns_attacks[2] != 0 && ns_attacks[1] != 0)\r\n                            ns_attacks[2] = 0;\r\n                        if (ns_attacks[3] != 0 && ns_attacks[2] != 0)\r\n                            ns_attacks[3] = 0;\r\n                    }\r\n\r\n                    if (chn < 2) {\r\n                        uselongblock[chn] = ns_uselongblock;\r\n                    } else {\r\n                        if (ns_uselongblock == 0) {\r\n                            uselongblock[0] = uselongblock[1] = 0;\r\n                        }\r\n                    }\r\n\r\n                    /*\r\n                     * there is a one granule delay. Copy maskings computed last call\r\n                     * into masking_ratio to return to calling program.\r\n                     */\r\n                    energy[chn] = gfc.tot_ener[chn];\r\n\r\n                    /*********************************************************************\r\n                     * compute FFTs\r\n                     *********************************************************************/\r\n                    wsamp_s = wsamp_S;\r\n                    wsamp_l = wsamp_L;\r\n                    compute_ffts(gfp, fftenergy, fftenergy_s, wsamp_l, (chn & 1),\r\n                        wsamp_s, (chn & 1), gr_out, chn, buffer, bufPos);\r\n\r\n                    /*********************************************************************\r\n                     * Calculate the energy and the tonality of each partition.\r\n                     *********************************************************************/\r\n                    calc_energy(gfc, fftenergy, eb_l, max, avg);\r\n                    calc_mask_index_l(gfc, max, avg, mask_idx_l);\r\n                    /* compute masking thresholds for short blocks */\r\n                    for (sblock = 0; sblock < 3; sblock++) {\r\n                        var enn, thmm;\r\n                        compute_masking_s(gfp, fftenergy_s, eb_s, thr, chn, sblock);\r\n                        convert_partition2scalefac_s(gfc, eb_s, thr, chn, sblock);\r\n                        /**** short block pre-echo control ****/\r\n                        for (sb = 0; sb < Encoder.SBMAX_s; sb++) {\r\n                            thmm = gfc.thm[chn].s[sb][sblock];\r\n\r\n                            thmm *= NS_PREECHO_ATT0;\r\n                            if (ns_attacks[sblock] >= 2 || ns_attacks[sblock + 1] == 1) {\r\n                                var idx = (sblock != 0) ? sblock - 1 : 2;\r\n                                var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\r\n                                    NS_PREECHO_ATT1 * pcfact);\r\n                                thmm = Math.min(thmm, p);\r\n                            }\r\n\r\n                            if (ns_attacks[sblock] == 1) {\r\n                                var idx = (sblock != 0) ? sblock - 1 : 2;\r\n                                var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\r\n                                    NS_PREECHO_ATT2 * pcfact);\r\n                                thmm = Math.min(thmm, p);\r\n                            } else if ((sblock != 0 && ns_attacks[sblock - 1] == 3)\r\n                                || (sblock == 0 && gfc.nsPsy.lastAttacks[chn] == 3)) {\r\n                                var idx = (sblock != 2) ? sblock + 1 : 0;\r\n                                var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\r\n                                    NS_PREECHO_ATT2 * pcfact);\r\n                                thmm = Math.min(thmm, p);\r\n                            }\r\n\r\n                            /* pulse like signal detection for fatboy.wav and so on */\r\n                            enn = en_subshort[sblock * 3 + 3]\r\n                                + en_subshort[sblock * 3 + 4]\r\n                                + en_subshort[sblock * 3 + 5];\r\n                            if (en_subshort[sblock * 3 + 5] * 6 < enn) {\r\n                                thmm *= 0.5;\r\n                                if (en_subshort[sblock * 3 + 4] * 6 < enn)\r\n                                    thmm *= 0.5;\r\n                            }\r\n\r\n                            gfc.thm[chn].s[sb][sblock] = thmm;\r\n                        }\r\n                    }\r\n                    gfc.nsPsy.lastAttacks[chn] = ns_attacks[2];\r\n\r\n                    /*********************************************************************\r\n                     * convolve the partitioned energy and unpredictability with the\r\n                     * spreading function, s3_l[b][k]\r\n                     ********************************************************************/\r\n                    k = 0;\r\n                    {\r\n                        for (b = 0; b < gfc.npart_l; b++) {\r\n                            /*\r\n                             * convolve the partitioned energy with the spreading\r\n                             * function\r\n                             */\r\n                            var kk = gfc.s3ind[b][0];\r\n                            var eb2 = eb_l[kk] * tab[mask_idx_l[kk]];\r\n                            var ecb = gfc.s3_ll[k++] * eb2;\r\n                            while (++kk <= gfc.s3ind[b][1]) {\r\n                                eb2 = eb_l[kk] * tab[mask_idx_l[kk]];\r\n                                ecb = mask_add(ecb, gfc.s3_ll[k++] * eb2, kk, kk - b,\r\n                                    gfc, 0);\r\n                            }\r\n                            ecb *= 0.158489319246111;\r\n                            /* pow(10,-0.8) */\r\n\r\n                            /**** long block pre-echo control ****/\r\n                            /**\r\n                             * <PRE>\r\n                             * dont use long block pre-echo control if previous granule was\r\n                             * a short block.  This is to avoid the situation:\r\n                             * frame0:  quiet (very low masking)\r\n                             * frame1:  surge  (triggers short blocks)\r\n                             * frame2:  regular frame.  looks like pre-echo when compared to\r\n                             *          frame0, but all pre-echo was in frame1.\r\n                             * </PRE>\r\n                             */\r\n                            /*\r\n                             * chn=0,1 L and R channels\r\n                             *\r\n                             * chn=2,3 S and M channels.\r\n                             */\r\n\r\n                            if (gfc.blocktype_old[chn & 1] == Encoder.SHORT_TYPE)\r\n                                thr[b] = ecb;\r\n                            else\r\n                                thr[b] = NS_INTERP(\r\n                                    Math.min(ecb, Math.min(rpelev\r\n                                        * gfc.nb_1[chn][b], rpelev2\r\n                                        * gfc.nb_2[chn][b])), ecb, pcfact);\r\n\r\n                            gfc.nb_2[chn][b] = gfc.nb_1[chn][b];\r\n                            gfc.nb_1[chn][b] = ecb;\r\n                        }\r\n                    }\r\n                    for (; b <= Encoder.CBANDS; ++b) {\r\n                        eb_l[b] = 0;\r\n                        thr[b] = 0;\r\n                    }\r\n                    /* compute masking thresholds for long blocks */\r\n                    convert_partition2scalefac_l(gfc, eb_l, thr, chn);\r\n                }\r\n                /* end loop over chn */\r\n\r\n                if (gfp.mode == MPEGMode.STEREO || gfp.mode == MPEGMode.JOINT_STEREO) {\r\n                    if (gfp.interChRatio > 0.0) {\r\n                        calc_interchannel_masking(gfp, gfp.interChRatio);\r\n                    }\r\n                }\r\n\r\n                if (gfp.mode == MPEGMode.JOINT_STEREO) {\r\n                    var msfix;\r\n                    msfix1(gfc);\r\n                    msfix = gfp.msfix;\r\n                    if (Math.abs(msfix) > 0.0)\r\n                        ns_msfix(gfc, msfix, gfp.ATHlower * gfc.ATH.adjust);\r\n                }\r\n\r\n                /***************************************************************\r\n                 * determine final block type\r\n                 ***************************************************************/\r\n                block_type_set(gfp, uselongblock, blocktype_d, blocktype);\r\n\r\n                /*********************************************************************\r\n                 * compute the value of PE to return ... no delay and advance\r\n                 *********************************************************************/\r\n                for (chn = 0; chn < numchn; chn++) {\r\n                    var ppe;\r\n                    var ppePos = 0;\r\n                    var type;\r\n                    var mr;\r\n\r\n                    if (chn > 1) {\r\n                        ppe = percep_MS_entropy;\r\n                        ppePos = -2;\r\n                        type = Encoder.NORM_TYPE;\r\n                        if (blocktype_d[0] == Encoder.SHORT_TYPE\r\n                            || blocktype_d[1] == Encoder.SHORT_TYPE)\r\n                            type = Encoder.SHORT_TYPE;\r\n                        mr = masking_MS_ratio[gr_out][chn - 2];\r\n                    } else {\r\n                        ppe = percep_entropy;\r\n                        ppePos = 0;\r\n                        type = blocktype_d[chn];\r\n                        mr = masking_ratio[gr_out][chn];\r\n                    }\r\n\r\n                    if (type == Encoder.SHORT_TYPE)\r\n                        ppe[ppePos + chn] = pecalc_s(mr, gfc.masking_lower);\r\n                    else\r\n                        ppe[ppePos + chn] = pecalc_l(mr, gfc.masking_lower);\r\n\r\n                    if (gfp.analysis)\r\n                        gfc.pinfo.pe[gr_out][chn] = ppe[ppePos + chn];\r\n\r\n                }\r\n                return 0;\r\n            }\r\n\r\n            function vbrpsy_compute_fft_l(gfp, buffer, bufPos, chn, gr_out, fftenergy, wsamp_l, wsamp_lPos) {\r\n                var gfc = gfp.internal_flags;\r\n                if (chn < 2) {\r\n                    fft.fft_long(gfc, wsamp_l[wsamp_lPos], chn, buffer, bufPos);\r\n                } else if (chn == 2) {\r\n                    /* FFT data for mid and side channel is derived from L & R */\r\n                    for (var j = Encoder.BLKSIZE - 1; j >= 0; --j) {\r\n                        var l = wsamp_l[wsamp_lPos + 0][j];\r\n                        var r = wsamp_l[wsamp_lPos + 1][j];\r\n                        wsamp_l[wsamp_lPos + 0][j] = (l + r) * Util.SQRT2 * 0.5;\r\n                        wsamp_l[wsamp_lPos + 1][j] = (l - r) * Util.SQRT2 * 0.5;\r\n                    }\r\n                }\r\n\r\n                /*********************************************************************\r\n                 * compute energies\r\n                 *********************************************************************/\r\n                fftenergy[0] = NON_LINEAR_SCALE_ENERGY(wsamp_l[wsamp_lPos + 0][0]);\r\n                fftenergy[0] *= fftenergy[0];\r\n\r\n                for (var j = Encoder.BLKSIZE / 2 - 1; j >= 0; --j) {\r\n                    var re = wsamp_l[wsamp_lPos + 0][Encoder.BLKSIZE / 2 - j];\r\n                    var im = wsamp_l[wsamp_lPos + 0][Encoder.BLKSIZE / 2 + j];\r\n                    fftenergy[Encoder.BLKSIZE / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\r\n                        * re + im * im) * 0.5);\r\n                }\r\n                /* total energy */\r\n                {\r\n                    var totalenergy = 0.0;\r\n                    for (var j = 11; j < Encoder.HBLKSIZE; j++)\r\n                        totalenergy += fftenergy[j];\r\n\r\n                    gfc.tot_ener[chn] = totalenergy;\r\n                }\r\n\r\n                if (gfp.analysis) {\r\n                    for (var j = 0; j < Encoder.HBLKSIZE; j++) {\r\n                        gfc.pinfo.energy[gr_out][chn][j] = gfc.pinfo.energy_save[chn][j];\r\n                        gfc.pinfo.energy_save[chn][j] = fftenergy[j];\r\n                    }\r\n                    gfc.pinfo.pe[gr_out][chn] = gfc.pe[chn];\r\n                }\r\n            }\r\n\r\n            function vbrpsy_compute_fft_s(gfp, buffer, bufPos, chn, sblock, fftenergy_s, wsamp_s, wsamp_sPos) {\r\n                var gfc = gfp.internal_flags;\r\n\r\n                if (sblock == 0 && chn < 2) {\r\n                    fft.fft_short(gfc, wsamp_s[wsamp_sPos], chn, buffer, bufPos);\r\n                }\r\n                if (chn == 2) {\r\n                    /* FFT data for mid and side channel is derived from L & R */\r\n                    for (var j = Encoder.BLKSIZE_s - 1; j >= 0; --j) {\r\n                        var l = wsamp_s[wsamp_sPos + 0][sblock][j];\r\n                        var r = wsamp_s[wsamp_sPos + 1][sblock][j];\r\n                        wsamp_s[wsamp_sPos + 0][sblock][j] = (l + r) * Util.SQRT2 * 0.5;\r\n                        wsamp_s[wsamp_sPos + 1][sblock][j] = (l - r) * Util.SQRT2 * 0.5;\r\n                    }\r\n                }\r\n\r\n                /*********************************************************************\r\n                 * compute energies\r\n                 *********************************************************************/\r\n                fftenergy_s[sblock][0] = wsamp_s[wsamp_sPos + 0][sblock][0];\r\n                fftenergy_s[sblock][0] *= fftenergy_s[sblock][0];\r\n                for (var j = Encoder.BLKSIZE_s / 2 - 1; j >= 0; --j) {\r\n                    var re = wsamp_s[wsamp_sPos + 0][sblock][Encoder.BLKSIZE_s / 2 - j];\r\n                    var im = wsamp_s[wsamp_sPos + 0][sblock][Encoder.BLKSIZE_s / 2 + j];\r\n                    fftenergy_s[sblock][Encoder.BLKSIZE_s / 2 - j] = NON_LINEAR_SCALE_ENERGY((re\r\n                        * re + im * im) * 0.5);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * compute loudness approximation (used for ATH auto-level adjustment)\r\n             */\r\n            function vbrpsy_compute_loudness_approximation_l(gfp, gr_out, chn, fftenergy) {\r\n                var gfc = gfp.internal_flags;\r\n                if (gfp.athaa_loudapprox == 2 && chn < 2) {\r\n                    // no loudness for mid/side ch\r\n                    gfc.loudness_sq[gr_out][chn] = gfc.loudness_sq_save[chn];\r\n                    gfc.loudness_sq_save[chn] = psycho_loudness_approx(fftenergy, gfc);\r\n                }\r\n            }\r\n\r\n            var fircoef_ = [-8.65163e-18 * 2,\r\n                -0.00851586 * 2, -6.74764e-18 * 2, 0.0209036 * 2,\r\n                -3.36639e-17 * 2, -0.0438162 * 2, -1.54175e-17 * 2,\r\n                0.0931738 * 2, -5.52212e-17 * 2, -0.313819 * 2];\r\n\r\n            /**\r\n             * Apply HPF of fs/4 to the input signal. This is used for attack detection\r\n             * / handling.\r\n             */\r\n            function vbrpsy_attack_detection(gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, energy, sub_short_factor, ns_attacks, uselongblock) {\r\n                var ns_hpfsmpl = new_float_n([2, 576]);\r\n                var gfc = gfp.internal_flags;\r\n                var n_chn_out = gfc.channels_out;\r\n                /* chn=2 and 3 = Mid and Side channels */\r\n                var n_chn_psy = (gfp.mode == MPEGMode.JOINT_STEREO) ? 4 : n_chn_out;\r\n                /* Don't copy the input buffer into a temporary buffer */\r\n                /* unroll the loop 2 times */\r\n                for (var chn = 0; chn < n_chn_out; chn++) {\r\n                    /* apply high pass filter of fs/4 */\r\n                    firbuf = buffer[chn];\r\n                    var firbufPos = bufPos + 576 - 350 - NSFIRLEN + 192;\r\n                    for (var i = 0; i < 576; i++) {\r\n                        var sum1, sum2;\r\n                        sum1 = firbuf[firbufPos + i + 10];\r\n                        sum2 = 0.0;\r\n                        for (var j = 0; j < ((NSFIRLEN - 1) / 2) - 1; j += 2) {\r\n                            sum1 += fircoef_[j]\r\n                                * (firbuf[firbufPos + i + j] + firbuf[firbufPos + i\r\n                                + NSFIRLEN - j]);\r\n                            sum2 += fircoef_[j + 1]\r\n                                * (firbuf[firbufPos + i + j + 1] + firbuf[firbufPos\r\n                                + i + NSFIRLEN - j - 1]);\r\n                        }\r\n                        ns_hpfsmpl[chn][i] = sum1 + sum2;\r\n                    }\r\n                    masking_ratio[gr_out][chn].en.assign(gfc.en[chn]);\r\n                    masking_ratio[gr_out][chn].thm.assign(gfc.thm[chn]);\r\n                    if (n_chn_psy > 2) {\r\n                        /* MS maskings */\r\n                        /* percep_MS_entropy [chn-2] = gfc . pe [chn]; */\r\n                        masking_MS_ratio[gr_out][chn].en.assign(gfc.en[chn + 2]);\r\n                        masking_MS_ratio[gr_out][chn].thm.assign(gfc.thm[chn + 2]);\r\n                    }\r\n                }\r\n                for (var chn = 0; chn < n_chn_psy; chn++) {\r\n                    var attack_intensity = new_float(12);\r\n                    var en_subshort = new_float(12);\r\n                    var en_short = [0, 0, 0, 0];\r\n                    var pf = ns_hpfsmpl[chn & 1];\r\n                    var pfPos = 0;\r\n                    var attackThreshold = (chn == 3) ? gfc.nsPsy.attackthre_s\r\n                        : gfc.nsPsy.attackthre;\r\n                    var ns_uselongblock = 1;\r\n\r\n                    if (chn == 2) {\r\n                        for (var i = 0, j = 576; j > 0; ++i, --j) {\r\n                            var l = ns_hpfsmpl[0][i];\r\n                            var r = ns_hpfsmpl[1][i];\r\n                            ns_hpfsmpl[0][i] = l + r;\r\n                            ns_hpfsmpl[1][i] = l - r;\r\n                        }\r\n                    }\r\n                    /***************************************************************\r\n                     * determine the block type (window type)\r\n                     ***************************************************************/\r\n                    /* calculate energies of each sub-shortblocks */\r\n                    for (var i = 0; i < 3; i++) {\r\n                        en_subshort[i] = gfc.nsPsy.last_en_subshort[chn][i + 6];\r\n                        attack_intensity[i] = en_subshort[i]\r\n                            / gfc.nsPsy.last_en_subshort[chn][i + 4];\r\n                        en_short[0] += en_subshort[i];\r\n                    }\r\n\r\n                    for (var i = 0; i < 9; i++) {\r\n                        var pfe = pfPos + 576 / 9;\r\n                        var p = 1.;\r\n                        for (; pfPos < pfe; pfPos++)\r\n                            if (p < Math.abs(pf[pfPos]))\r\n                                p = Math.abs(pf[pfPos]);\r\n\r\n                        gfc.nsPsy.last_en_subshort[chn][i] = en_subshort[i + 3] = p;\r\n                        en_short[1 + i / 3] += p;\r\n                        if (p > en_subshort[i + 3 - 2]) {\r\n                            p = p / en_subshort[i + 3 - 2];\r\n                        } else if (en_subshort[i + 3 - 2] > p * 10.0) {\r\n                            p = en_subshort[i + 3 - 2] / (p * 10.0);\r\n                        } else {\r\n                            p = 0.0;\r\n                        }\r\n                        attack_intensity[i + 3] = p;\r\n                    }\r\n                    /* pulse like signal detection for fatboy.wav and so on */\r\n                    for (var i = 0; i < 3; ++i) {\r\n                        var enn = en_subshort[i * 3 + 3]\r\n                            + en_subshort[i * 3 + 4] + en_subshort[i * 3 + 5];\r\n                        var factor = 1.;\r\n                        if (en_subshort[i * 3 + 5] * 6 < enn) {\r\n                            factor *= 0.5;\r\n                            if (en_subshort[i * 3 + 4] * 6 < enn) {\r\n                                factor *= 0.5;\r\n                            }\r\n                        }\r\n                        sub_short_factor[chn][i] = factor;\r\n                    }\r\n\r\n                    if (gfp.analysis) {\r\n                        var x = attack_intensity[0];\r\n                        for (var i = 1; i < 12; i++) {\r\n                            if (x < attack_intensity[i]) {\r\n                                x = attack_intensity[i];\r\n                            }\r\n                        }\r\n                        gfc.pinfo.ers[gr_out][chn] = gfc.pinfo.ers_save[chn];\r\n                        gfc.pinfo.ers_save[chn] = x;\r\n                    }\r\n\r\n                    /* compare energies between sub-shortblocks */\r\n                    for (var i = 0; i < 12; i++) {\r\n                        if (0 == ns_attacks[chn][i / 3]\r\n                            && attack_intensity[i] > attackThreshold) {\r\n                            ns_attacks[chn][i / 3] = (i % 3) + 1;\r\n                        }\r\n                    }\r\n\r\n                    /*\r\n                     * should have energy change between short blocks, in order to avoid\r\n                     * periodic signals\r\n                     */\r\n                    /* Good samples to show the effect are Trumpet test songs */\r\n                    /*\r\n                     * GB: tuned (1) to avoid too many short blocks for test sample\r\n                     * TRUMPET\r\n                     */\r\n                    /*\r\n                     * RH: tuned (2) to let enough short blocks through for test sample\r\n                     * FSOL and SNAPS\r\n                     */\r\n                    for (var i = 1; i < 4; i++) {\r\n                        var u = en_short[i - 1];\r\n                        var v = en_short[i];\r\n                        var m = Math.max(u, v);\r\n                        if (m < 40000) { /* (2) */\r\n                            if (u < 1.7 * v && v < 1.7 * u) { /* (1) */\r\n                                if (i == 1 && ns_attacks[chn][0] <= ns_attacks[chn][i]) {\r\n                                    ns_attacks[chn][0] = 0;\r\n                                }\r\n                                ns_attacks[chn][i] = 0;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (ns_attacks[chn][0] <= gfc.nsPsy.lastAttacks[chn]) {\r\n                        ns_attacks[chn][0] = 0;\r\n                    }\r\n\r\n                    if (gfc.nsPsy.lastAttacks[chn] == 3\r\n                        || (ns_attacks[chn][0] + ns_attacks[chn][1]\r\n                        + ns_attacks[chn][2] + ns_attacks[chn][3]) != 0) {\r\n                        ns_uselongblock = 0;\r\n\r\n                        if (ns_attacks[chn][1] != 0 && ns_attacks[chn][0] != 0) {\r\n                            ns_attacks[chn][1] = 0;\r\n                        }\r\n                        if (ns_attacks[chn][2] != 0 && ns_attacks[chn][1] != 0) {\r\n                            ns_attacks[chn][2] = 0;\r\n                        }\r\n                        if (ns_attacks[chn][3] != 0 && ns_attacks[chn][2] != 0) {\r\n                            ns_attacks[chn][3] = 0;\r\n                        }\r\n                    }\r\n                    if (chn < 2) {\r\n                        uselongblock[chn] = ns_uselongblock;\r\n                    } else {\r\n                        if (ns_uselongblock == 0) {\r\n                            uselongblock[0] = uselongblock[1] = 0;\r\n                        }\r\n                    }\r\n\r\n                    /*\r\n                     * there is a one granule delay. Copy maskings computed last call\r\n                     * into masking_ratio to return to calling program.\r\n                     */\r\n                    energy[chn] = gfc.tot_ener[chn];\r\n                }\r\n            }\r\n\r\n            function vbrpsy_skip_masking_s(gfc, chn, sblock) {\r\n                if (sblock == 0) {\r\n                    for (var b = 0; b < gfc.npart_s; b++) {\r\n                        gfc.nb_s2[chn][b] = gfc.nb_s1[chn][b];\r\n                        gfc.nb_s1[chn][b] = 0;\r\n                    }\r\n                }\r\n            }\r\n\r\n            function vbrpsy_skip_masking_l(gfc, chn) {\r\n                for (var b = 0; b < gfc.npart_l; b++) {\r\n                    gfc.nb_2[chn][b] = gfc.nb_1[chn][b];\r\n                    gfc.nb_1[chn][b] = 0;\r\n                }\r\n            }\r\n\r\n            function psyvbr_calc_mask_index_s(gfc, max, avg, mask_idx) {\r\n                var last_tab_entry = tab.length - 1;\r\n                var b = 0;\r\n                var a = avg[b] + avg[b + 1];\r\n                if (a > 0.0) {\r\n                    var m = max[b];\r\n                    if (m < max[b + 1])\r\n                        m = max[b + 1];\r\n                    a = 20.0 * (m * 2.0 - a)\r\n                        / (a * (gfc.numlines_s[b] + gfc.numlines_s[b + 1] - 1));\r\n                    var k = 0 | a;\r\n                    if (k > last_tab_entry)\r\n                        k = last_tab_entry;\r\n                    mask_idx[b] = k;\r\n                } else {\r\n                    mask_idx[b] = 0;\r\n                }\r\n\r\n                for (b = 1; b < gfc.npart_s - 1; b++) {\r\n                    a = avg[b - 1] + avg[b] + avg[b + 1];\r\n                    if (a > 0.0) {\r\n                        var m = max[b - 1];\r\n                        if (m < max[b])\r\n                            m = max[b];\r\n                        if (m < max[b + 1])\r\n                            m = max[b + 1];\r\n                        a = 20.0\r\n                            * (m * 3.0 - a)\r\n                            / (a * (gfc.numlines_s[b - 1] + gfc.numlines_s[b]\r\n                            + gfc.numlines_s[b + 1] - 1));\r\n                        var k = 0 | a;\r\n                        if (k > last_tab_entry)\r\n                            k = last_tab_entry;\r\n                        mask_idx[b] = k;\r\n                    } else {\r\n                        mask_idx[b] = 0;\r\n                    }\r\n                }\r\n\r\n                a = avg[b - 1] + avg[b];\r\n                if (a > 0.0) {\r\n                    var m = max[b - 1];\r\n                    if (m < max[b])\r\n                        m = max[b];\r\n                    a = 20.0 * (m * 2.0 - a)\r\n                        / (a * (gfc.numlines_s[b - 1] + gfc.numlines_s[b] - 1));\r\n                    var k = 0 | a;\r\n                    if (k > last_tab_entry)\r\n                        k = last_tab_entry;\r\n                    mask_idx[b] = k;\r\n                } else {\r\n                    mask_idx[b] = 0;\r\n                }\r\n            }\r\n\r\n            function vbrpsy_compute_masking_s(gfp, fftenergy_s, eb, thr, chn, sblock) {\r\n                var gfc = gfp.internal_flags;\r\n                var max = new float[Encoder.CBANDS], avg = new_float(Encoder.CBANDS);\r\n                var i, j, b;\r\n                var mask_idx_s = new int[Encoder.CBANDS];\r\n\r\n                for (b = j = 0; b < gfc.npart_s; ++b) {\r\n                    var ebb = 0, m = 0;\r\n                    var n = gfc.numlines_s[b];\r\n                    for (i = 0; i < n; ++i, ++j) {\r\n                        var el = fftenergy_s[sblock][j];\r\n                        ebb += el;\r\n                        if (m < el)\r\n                            m = el;\r\n                    }\r\n                    eb[b] = ebb;\r\n                    max[b] = m;\r\n                    avg[b] = ebb / n;\r\n                }\r\n                for (; b < Encoder.CBANDS; ++b) {\r\n                    max[b] = 0;\r\n                    avg[b] = 0;\r\n                }\r\n                psyvbr_calc_mask_index_s(gfc, max, avg, mask_idx_s);\r\n                for (j = b = 0; b < gfc.npart_s; b++) {\r\n                    var kk = gfc.s3ind_s[b][0];\r\n                    var last = gfc.s3ind_s[b][1];\r\n                    var dd, dd_n;\r\n                    var x, ecb, avg_mask;\r\n                    dd = mask_idx_s[kk];\r\n                    dd_n = 1;\r\n                    ecb = gfc.s3_ss[j] * eb[kk] * tab[mask_idx_s[kk]];\r\n                    ++j;\r\n                    ++kk;\r\n                    while (kk <= last) {\r\n                        dd += mask_idx_s[kk];\r\n                        dd_n += 1;\r\n                        x = gfc.s3_ss[j] * eb[kk] * tab[mask_idx_s[kk]];\r\n                        ecb = vbrpsy_mask_add(ecb, x, kk - b);\r\n                        ++j;\r\n                        ++kk;\r\n                    }\r\n                    dd = (1 + 2 * dd) / (2 * dd_n);\r\n                    avg_mask = tab[dd] * 0.5;\r\n                    ecb *= avg_mask;\r\n                    thr[b] = ecb;\r\n                    gfc.nb_s2[chn][b] = gfc.nb_s1[chn][b];\r\n                    gfc.nb_s1[chn][b] = ecb;\r\n                    {\r\n                        /*\r\n                         * if THR exceeds EB, the quantization routines will take the\r\n                         * difference from other bands. in case of strong tonal samples\r\n                         * (tonaltest.wav) this leads to heavy distortions. that's why\r\n                         * we limit THR here.\r\n                         */\r\n                        x = max[b];\r\n                        x *= gfc.minval_s[b];\r\n                        x *= avg_mask;\r\n                        if (thr[b] > x) {\r\n                            thr[b] = x;\r\n                        }\r\n                    }\r\n                    if (gfc.masking_lower > 1) {\r\n                        thr[b] *= gfc.masking_lower;\r\n                    }\r\n                    if (thr[b] > eb[b]) {\r\n                        thr[b] = eb[b];\r\n                    }\r\n                    if (gfc.masking_lower < 1) {\r\n                        thr[b] *= gfc.masking_lower;\r\n                    }\r\n\r\n                }\r\n                for (; b < Encoder.CBANDS; ++b) {\r\n                    eb[b] = 0;\r\n                    thr[b] = 0;\r\n                }\r\n            }\r\n\r\n            function vbrpsy_compute_masking_l(gfc, fftenergy, eb_l, thr, chn) {\r\n                var max = new_float(Encoder.CBANDS), avg = new_float(Encoder.CBANDS);\r\n                var mask_idx_l = new_int(Encoder.CBANDS + 2);\r\n                var b;\r\n\r\n                /*********************************************************************\r\n                 * Calculate the energy and the tonality of each partition.\r\n                 *********************************************************************/\r\n                calc_energy(gfc, fftenergy, eb_l, max, avg);\r\n                calc_mask_index_l(gfc, max, avg, mask_idx_l);\r\n\r\n                /*********************************************************************\r\n                 * convolve the partitioned energy and unpredictability with the\r\n                 * spreading function, s3_l[b][k]\r\n                 ********************************************************************/\r\n                var k = 0;\r\n                for (b = 0; b < gfc.npart_l; b++) {\r\n                    var x, ecb, avg_mask, t;\r\n                    /* convolve the partitioned energy with the spreading function */\r\n                    var kk = gfc.s3ind[b][0];\r\n                    var last = gfc.s3ind[b][1];\r\n                    var dd = 0, dd_n = 0;\r\n                    dd = mask_idx_l[kk];\r\n                    dd_n += 1;\r\n                    ecb = gfc.s3_ll[k] * eb_l[kk] * tab[mask_idx_l[kk]];\r\n                    ++k;\r\n                    ++kk;\r\n                    while (kk <= last) {\r\n                        dd += mask_idx_l[kk];\r\n                        dd_n += 1;\r\n                        x = gfc.s3_ll[k] * eb_l[kk] * tab[mask_idx_l[kk]];\r\n                        t = vbrpsy_mask_add(ecb, x, kk - b);\r\n                        ecb = t;\r\n                        ++k;\r\n                        ++kk;\r\n                    }\r\n                    dd = (1 + 2 * dd) / (2 * dd_n);\r\n                    avg_mask = tab[dd] * 0.5;\r\n                    ecb *= avg_mask;\r\n\r\n                    /**** long block pre-echo control ****/\r\n                    /**\r\n                     * <PRE>\r\n                     * dont use long block pre-echo control if previous granule was\r\n                     * a short block.  This is to avoid the situation:\r\n                     * frame0:  quiet (very low masking)\r\n                     * frame1:  surge  (triggers short blocks)\r\n                     * frame2:  regular frame.  looks like pre-echo when compared to\r\n                     *          frame0, but all pre-echo was in frame1.\r\n                     * </PRE>\r\n                     */\r\n                    /*\r\n                     * chn=0,1 L and R channels chn=2,3 S and M channels.\r\n                     */\r\n                    if (gfc.blocktype_old[chn & 0x01] == Encoder.SHORT_TYPE) {\r\n                        var ecb_limit = rpelev * gfc.nb_1[chn][b];\r\n                        if (ecb_limit > 0) {\r\n                            thr[b] = Math.min(ecb, ecb_limit);\r\n                        } else {\r\n                            /**\r\n                             * <PRE>\r\n                             * Robert 071209:\r\n                             * Because we don't calculate long block psy when we know a granule\r\n                             * should be of short blocks, we don't have any clue how the granule\r\n                             * before would have looked like as a long block. So we have to guess\r\n                             * a little bit for this END_TYPE block.\r\n                             * Most of the time we get away with this sloppyness. (fingers crossed :)\r\n                             * The speed increase is worth it.\r\n                             * </PRE>\r\n                             */\r\n                            thr[b] = Math.min(ecb, eb_l[b] * NS_PREECHO_ATT2);\r\n                        }\r\n                    } else {\r\n                        var ecb_limit_2 = rpelev2 * gfc.nb_2[chn][b];\r\n                        var ecb_limit_1 = rpelev * gfc.nb_1[chn][b];\r\n                        var ecb_limit;\r\n                        if (ecb_limit_2 <= 0) {\r\n                            ecb_limit_2 = ecb;\r\n                        }\r\n                        if (ecb_limit_1 <= 0) {\r\n                            ecb_limit_1 = ecb;\r\n                        }\r\n                        if (gfc.blocktype_old[chn & 0x01] == Encoder.NORM_TYPE) {\r\n                            ecb_limit = Math.min(ecb_limit_1, ecb_limit_2);\r\n                        } else {\r\n                            ecb_limit = ecb_limit_1;\r\n                        }\r\n                        thr[b] = Math.min(ecb, ecb_limit);\r\n                    }\r\n                    gfc.nb_2[chn][b] = gfc.nb_1[chn][b];\r\n                    gfc.nb_1[chn][b] = ecb;\r\n                    {\r\n                        /*\r\n                         * if THR exceeds EB, the quantization routines will take the\r\n                         * difference from other bands. in case of strong tonal samples\r\n                         * (tonaltest.wav) this leads to heavy distortions. that's why\r\n                         * we limit THR here.\r\n                         */\r\n                        x = max[b];\r\n                        x *= gfc.minval_l[b];\r\n                        x *= avg_mask;\r\n                        if (thr[b] > x) {\r\n                            thr[b] = x;\r\n                        }\r\n                    }\r\n                    if (gfc.masking_lower > 1) {\r\n                        thr[b] *= gfc.masking_lower;\r\n                    }\r\n                    if (thr[b] > eb_l[b]) {\r\n                        thr[b] = eb_l[b];\r\n                    }\r\n                    if (gfc.masking_lower < 1) {\r\n                        thr[b] *= gfc.masking_lower;\r\n                    }\r\n                }\r\n                for (; b < Encoder.CBANDS; ++b) {\r\n                    eb_l[b] = 0;\r\n                    thr[b] = 0;\r\n                }\r\n            }\r\n\r\n            function vbrpsy_compute_block_type(gfp, uselongblock) {\r\n                var gfc = gfp.internal_flags;\r\n\r\n                if (gfp.short_blocks == ShortBlock.short_block_coupled\r\n                    /* force both channels to use the same block type */\r\n                    /* this is necessary if the frame is to be encoded in ms_stereo. */\r\n                    /* But even without ms_stereo, FhG does this */\r\n                    && !(uselongblock[0] != 0 && uselongblock[1] != 0))\r\n                    uselongblock[0] = uselongblock[1] = 0;\r\n\r\n                for (var chn = 0; chn < gfc.channels_out; chn++) {\r\n                    /* disable short blocks */\r\n                    if (gfp.short_blocks == ShortBlock.short_block_dispensed) {\r\n                        uselongblock[chn] = 1;\r\n                    }\r\n                    if (gfp.short_blocks == ShortBlock.short_block_forced) {\r\n                        uselongblock[chn] = 0;\r\n                    }\r\n                }\r\n            }\r\n\r\n            function vbrpsy_apply_block_type(gfp, uselongblock, blocktype_d) {\r\n                var gfc = gfp.internal_flags;\r\n\r\n                /*\r\n                 * update the blocktype of the previous granule, since it depends on\r\n                 * what happend in this granule\r\n                 */\r\n                for (var chn = 0; chn < gfc.channels_out; chn++) {\r\n                    var blocktype = Encoder.NORM_TYPE;\r\n                    /* disable short blocks */\r\n\r\n                    if (uselongblock[chn] != 0) {\r\n                        /* no attack : use long blocks */\r\n                        if (gfc.blocktype_old[chn] == Encoder.SHORT_TYPE)\r\n                            blocktype = Encoder.STOP_TYPE;\r\n                    } else {\r\n                        /* attack : use short blocks */\r\n                        blocktype = Encoder.SHORT_TYPE;\r\n                        if (gfc.blocktype_old[chn] == Encoder.NORM_TYPE) {\r\n                            gfc.blocktype_old[chn] = Encoder.START_TYPE;\r\n                        }\r\n                        if (gfc.blocktype_old[chn] == Encoder.STOP_TYPE)\r\n                            gfc.blocktype_old[chn] = Encoder.SHORT_TYPE;\r\n                    }\r\n\r\n                    blocktype_d[chn] = gfc.blocktype_old[chn];\r\n                    // value returned to calling program\r\n                    gfc.blocktype_old[chn] = blocktype;\r\n                    // save for next call to l3psy_anal\r\n                }\r\n            }\r\n\r\n            /**\r\n             * compute M/S thresholds from Johnston & Ferreira 1992 ICASSP paper\r\n             */\r\n            function vbrpsy_compute_MS_thresholds(eb, thr, cb_mld, ath_cb, athadjust, msfix, n) {\r\n                var msfix2 = msfix * 2;\r\n                var athlower = msfix > 0 ? Math.pow(10, athadjust) : 1;\r\n                var rside, rmid;\r\n                for (var b = 0; b < n; ++b) {\r\n                    var ebM = eb[2][b];\r\n                    var ebS = eb[3][b];\r\n                    var thmL = thr[0][b];\r\n                    var thmR = thr[1][b];\r\n                    var thmM = thr[2][b];\r\n                    var thmS = thr[3][b];\r\n\r\n                    /* use this fix if L & R masking differs by 2db or less */\r\n                    if (thmL <= 1.58 * thmR && thmR <= 1.58 * thmL) {\r\n                        var mld_m = cb_mld[b] * ebS;\r\n                        var mld_s = cb_mld[b] * ebM;\r\n                        rmid = Math.max(thmM, Math.min(thmS, mld_m));\r\n                        rside = Math.max(thmS, Math.min(thmM, mld_s));\r\n                    } else {\r\n                        rmid = thmM;\r\n                        rside = thmS;\r\n                    }\r\n                    if (msfix > 0) {\r\n                        /***************************************************************/\r\n                        /* Adjust M/S maskings if user set \"msfix\" */\r\n                        /***************************************************************/\r\n                        /* Naoki Shibata 2000 */\r\n                        var thmLR, thmMS;\r\n                        var ath = ath_cb[b] * athlower;\r\n                        thmLR = Math.min(Math.max(thmL, ath), Math.max(thmR, ath));\r\n                        thmM = Math.max(rmid, ath);\r\n                        thmS = Math.max(rside, ath);\r\n                        thmMS = thmM + thmS;\r\n                        if (thmMS > 0 && (thmLR * msfix2) < thmMS) {\r\n                            var f = thmLR * msfix2 / thmMS;\r\n                            thmM *= f;\r\n                            thmS *= f;\r\n                        }\r\n                        rmid = Math.min(thmM, rmid);\r\n                        rside = Math.min(thmS, rside);\r\n                    }\r\n                    if (rmid > ebM) {\r\n                        rmid = ebM;\r\n                    }\r\n                    if (rside > ebS) {\r\n                        rside = ebS;\r\n                    }\r\n                    thr[2][b] = rmid;\r\n                    thr[3][b] = rside;\r\n                }\r\n            }\r\n\r\n            this.L3psycho_anal_vbr = function (gfp, buffer, bufPos, gr_out, masking_ratio, masking_MS_ratio, percep_entropy, percep_MS_entropy, energy, blocktype_d) {\r\n                var gfc = gfp.internal_flags;\r\n\r\n                /* fft and energy calculation */\r\n                var wsamp_l;\r\n                var wsamp_s;\r\n                var fftenergy = new_float(Encoder.HBLKSIZE);\r\n                var fftenergy_s = new_float_n([3, Encoder.HBLKSIZE_s]);\r\n                var wsamp_L = new_float_n([2, Encoder.BLKSIZE]);\r\n                var wsamp_S = new_float_n([2, 3, Encoder.BLKSIZE_s]);\r\n                var eb = new_float_n([4, Encoder.CBANDS]), thr = new_float_n([4, Encoder.CBANDS]);\r\n                var sub_short_factor = new_float_n([4, 3]);\r\n                var pcfact = 0.6;\r\n\r\n                /* block type */\r\n                var ns_attacks = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],\r\n                    [0, 0, 0, 0]];\r\n                var uselongblock = new_int(2);\r\n\r\n                /* usual variables like loop indices, etc.. */\r\n\r\n                /* chn=2 and 3 = Mid and Side channels */\r\n                var n_chn_psy = (gfp.mode == MPEGMode.JOINT_STEREO) ? 4\r\n                    : gfc.channels_out;\r\n\r\n                vbrpsy_attack_detection(gfp, buffer, bufPos, gr_out, masking_ratio,\r\n                    masking_MS_ratio, energy, sub_short_factor, ns_attacks,\r\n                    uselongblock);\r\n\r\n                vbrpsy_compute_block_type(gfp, uselongblock);\r\n\r\n                /* LONG BLOCK CASE */\r\n                {\r\n                    for (var chn = 0; chn < n_chn_psy; chn++) {\r\n                        var ch01 = chn & 0x01;\r\n                        wsamp_l = wsamp_L;\r\n                        vbrpsy_compute_fft_l(gfp, buffer, bufPos, chn, gr_out,\r\n                            fftenergy, wsamp_l, ch01);\r\n\r\n                        vbrpsy_compute_loudness_approximation_l(gfp, gr_out, chn,\r\n                            fftenergy);\r\n\r\n                        if (uselongblock[ch01] != 0) {\r\n                            vbrpsy_compute_masking_l(gfc, fftenergy, eb[chn], thr[chn],\r\n                                chn);\r\n                        } else {\r\n                            vbrpsy_skip_masking_l(gfc, chn);\r\n                        }\r\n                    }\r\n                    if ((uselongblock[0] + uselongblock[1]) == 2) {\r\n                        /* M/S channel */\r\n                        if (gfp.mode == MPEGMode.JOINT_STEREO) {\r\n                            vbrpsy_compute_MS_thresholds(eb, thr, gfc.mld_cb_l,\r\n                                gfc.ATH.cb_l, gfp.ATHlower * gfc.ATH.adjust,\r\n                                gfp.msfix, gfc.npart_l);\r\n                        }\r\n                    }\r\n                    /* TODO: apply adaptive ATH masking here ?? */\r\n                    for (var chn = 0; chn < n_chn_psy; chn++) {\r\n                        var ch01 = chn & 0x01;\r\n                        if (uselongblock[ch01] != 0) {\r\n                            convert_partition2scalefac_l(gfc, eb[chn], thr[chn], chn);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                /* SHORT BLOCKS CASE */\r\n                {\r\n                    for (var sblock = 0; sblock < 3; sblock++) {\r\n                        for (var chn = 0; chn < n_chn_psy; ++chn) {\r\n                            var ch01 = chn & 0x01;\r\n\r\n                            if (uselongblock[ch01] != 0) {\r\n                                vbrpsy_skip_masking_s(gfc, chn, sblock);\r\n                            } else {\r\n                                /* compute masking thresholds for short blocks */\r\n                                wsamp_s = wsamp_S;\r\n                                vbrpsy_compute_fft_s(gfp, buffer, bufPos, chn, sblock,\r\n                                    fftenergy_s, wsamp_s, ch01);\r\n                                vbrpsy_compute_masking_s(gfp, fftenergy_s, eb[chn],\r\n                                    thr[chn], chn, sblock);\r\n                            }\r\n                        }\r\n                        if ((uselongblock[0] + uselongblock[1]) == 0) {\r\n                            /* M/S channel */\r\n                            if (gfp.mode == MPEGMode.JOINT_STEREO) {\r\n                                vbrpsy_compute_MS_thresholds(eb, thr, gfc.mld_cb_s,\r\n                                    gfc.ATH.cb_s, gfp.ATHlower * gfc.ATH.adjust,\r\n                                    gfp.msfix, gfc.npart_s);\r\n                            }\r\n                            /* L/R channel */\r\n                        }\r\n                        /* TODO: apply adaptive ATH masking here ?? */\r\n                        for (var chn = 0; chn < n_chn_psy; ++chn) {\r\n                            var ch01 = chn & 0x01;\r\n                            if (0 == uselongblock[ch01]) {\r\n                                convert_partition2scalefac_s(gfc, eb[chn], thr[chn],\r\n                                    chn, sblock);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    /**** short block pre-echo control ****/\r\n                    for (var chn = 0; chn < n_chn_psy; chn++) {\r\n                        var ch01 = chn & 0x01;\r\n\r\n                        if (uselongblock[ch01] != 0) {\r\n                            continue;\r\n                        }\r\n                        for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\r\n                            var new_thmm = new_float(3);\r\n                            for (var sblock = 0; sblock < 3; sblock++) {\r\n                                var thmm = gfc.thm[chn].s[sb][sblock];\r\n                                thmm *= NS_PREECHO_ATT0;\r\n\r\n                                if (ns_attacks[chn][sblock] >= 2\r\n                                    || ns_attacks[chn][sblock + 1] == 1) {\r\n                                    var idx = (sblock != 0) ? sblock - 1 : 2;\r\n                                    var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\r\n                                        NS_PREECHO_ATT1 * pcfact);\r\n                                    thmm = Math.min(thmm, p);\r\n                                } else if (ns_attacks[chn][sblock] == 1) {\r\n                                    var idx = (sblock != 0) ? sblock - 1 : 2;\r\n                                    var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\r\n                                        NS_PREECHO_ATT2 * pcfact);\r\n                                    thmm = Math.min(thmm, p);\r\n                                } else if ((sblock != 0 && ns_attacks[chn][sblock - 1] == 3)\r\n                                    || (sblock == 0 && gfc.nsPsy.lastAttacks[chn] == 3)) {\r\n                                    var idx = (sblock != 2) ? sblock + 1 : 0;\r\n                                    var p = NS_INTERP(gfc.thm[chn].s[sb][idx], thmm,\r\n                                        NS_PREECHO_ATT2 * pcfact);\r\n                                    thmm = Math.min(thmm, p);\r\n                                }\r\n\r\n                                /* pulse like signal detection for fatboy.wav and so on */\r\n                                thmm *= sub_short_factor[chn][sblock];\r\n\r\n                                new_thmm[sblock] = thmm;\r\n                            }\r\n                            for (var sblock = 0; sblock < 3; sblock++) {\r\n                                gfc.thm[chn].s[sb][sblock] = new_thmm[sblock];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                for (var chn = 0; chn < n_chn_psy; chn++) {\r\n                    gfc.nsPsy.lastAttacks[chn] = ns_attacks[chn][2];\r\n                }\r\n\r\n                /***************************************************************\r\n                 * determine final block type\r\n                 ***************************************************************/\r\n                vbrpsy_apply_block_type(gfp, uselongblock, blocktype_d);\r\n\r\n                /*********************************************************************\r\n                 * compute the value of PE to return ... no delay and advance\r\n                 *********************************************************************/\r\n                for (var chn = 0; chn < n_chn_psy; chn++) {\r\n                    var ppe;\r\n                    var ppePos;\r\n                    var type;\r\n                    var mr;\r\n\r\n                    if (chn > 1) {\r\n                        ppe = percep_MS_entropy;\r\n                        ppePos = -2;\r\n                        type = Encoder.NORM_TYPE;\r\n                        if (blocktype_d[0] == Encoder.SHORT_TYPE\r\n                            || blocktype_d[1] == Encoder.SHORT_TYPE)\r\n                            type = Encoder.SHORT_TYPE;\r\n                        mr = masking_MS_ratio[gr_out][chn - 2];\r\n                    } else {\r\n                        ppe = percep_entropy;\r\n                        ppePos = 0;\r\n                        type = blocktype_d[chn];\r\n                        mr = masking_ratio[gr_out][chn];\r\n                    }\r\n\r\n                    if (type == Encoder.SHORT_TYPE) {\r\n                        ppe[ppePos + chn] = pecalc_s(mr, gfc.masking_lower);\r\n                    } else {\r\n                        ppe[ppePos + chn] = pecalc_l(mr, gfc.masking_lower);\r\n                    }\r\n\r\n                    if (gfp.analysis) {\r\n                        gfc.pinfo.pe[gr_out][chn] = ppe[ppePos + chn];\r\n                    }\r\n                }\r\n                return 0;\r\n            }\r\n\r\n            function s3_func_x(bark, hf_slope) {\r\n                var tempx = bark, tempy;\r\n\r\n                if (tempx >= 0) {\r\n                    tempy = -tempx * 27;\r\n                } else {\r\n                    tempy = tempx * hf_slope;\r\n                }\r\n                if (tempy <= -72.0) {\r\n                    return 0;\r\n                }\r\n                return Math.exp(tempy * LN_TO_LOG10);\r\n            }\r\n\r\n            function norm_s3_func_x(hf_slope) {\r\n                var lim_a = 0, lim_b = 0;\r\n                {\r\n                    var x = 0, l, h;\r\n                    for (x = 0; s3_func_x(x, hf_slope) > 1e-20; x -= 1)\r\n                        ;\r\n                    l = x;\r\n                    h = 0;\r\n                    while (Math.abs(h - l) > 1e-12) {\r\n                        x = (h + l) / 2;\r\n                        if (s3_func_x(x, hf_slope) > 0) {\r\n                            h = x;\r\n                        } else {\r\n                            l = x;\r\n                        }\r\n                    }\r\n                    lim_a = l;\r\n                }\r\n                {\r\n                    var x = 0, l, h;\r\n                    for (x = 0; s3_func_x(x, hf_slope) > 1e-20; x += 1)\r\n                        ;\r\n                    l = 0;\r\n                    h = x;\r\n                    while (Math.abs(h - l) > 1e-12) {\r\n                        x = (h + l) / 2;\r\n                        if (s3_func_x(x, hf_slope) > 0) {\r\n                            l = x;\r\n                        } else {\r\n                            h = x;\r\n                        }\r\n                    }\r\n                    lim_b = h;\r\n                }\r\n                {\r\n                    var sum = 0;\r\n                    var m = 1000;\r\n                    var i;\r\n                    for (i = 0; i <= m; ++i) {\r\n                        var x = lim_a + i * (lim_b - lim_a) / m;\r\n                        var y = s3_func_x(x, hf_slope);\r\n                        sum += y;\r\n                    }\r\n                    {\r\n                        var norm = (m + 1) / (sum * (lim_b - lim_a));\r\n                        /* printf( \"norm = %lf\\n\",norm); */\r\n                        return norm;\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             *   The spreading function.  Values returned in units of energy\r\n             */\r\n            function s3_func(bark) {\r\n                var tempx, x, tempy, temp;\r\n                tempx = bark;\r\n                if (tempx >= 0)\r\n                    tempx *= 3;\r\n                else\r\n                    tempx *= 1.5;\r\n\r\n                if (tempx >= 0.5 && tempx <= 2.5) {\r\n                    temp = tempx - 0.5;\r\n                    x = 8.0 * (temp * temp - 2.0 * temp);\r\n                } else\r\n                    x = 0.0;\r\n                tempx += 0.474;\r\n                tempy = 15.811389 + 7.5 * tempx - 17.5\r\n                    * Math.sqrt(1.0 + tempx * tempx);\r\n\r\n                if (tempy <= -60.0)\r\n                    return 0.0;\r\n\r\n                tempx = Math.exp((x + tempy) * LN_TO_LOG10);\r\n\r\n                /**\r\n                 * <PRE>\r\n                 * Normalization.  The spreading function should be normalized so that:\r\n                 * +inf\r\n                 * /\r\n                 * |  s3 [ bark ]  d(bark)   =  1\r\n                 * /\r\n                 * -inf\r\n                 * </PRE>\r\n                 */\r\n                tempx /= .6609193;\r\n                return tempx;\r\n            }\r\n\r\n            /**\r\n             * see for example \"Zwicker: Psychoakustik, 1982; ISBN 3-540-11401-7\r\n             */\r\n            function freq2bark(freq) {\r\n                /* input: freq in hz output: barks */\r\n                if (freq < 0)\r\n                    freq = 0;\r\n                freq = freq * 0.001;\r\n                return 13.0 * Math.atan(.76 * freq) + 3.5\r\n                    * Math.atan(freq * freq / (7.5 * 7.5));\r\n            }\r\n\r\n            function init_numline(numlines, bo, bm, bval, bval_width, mld, bo_w, sfreq, blksize, scalepos, deltafreq, sbmax) {\r\n                var b_frq = new_float(Encoder.CBANDS + 1);\r\n                var sample_freq_frac = sfreq / (sbmax > 15 ? 2 * 576 : 2 * 192);\r\n                var partition = new_int(Encoder.HBLKSIZE);\r\n                var i;\r\n                sfreq /= blksize;\r\n                var j = 0;\r\n                var ni = 0;\r\n                /* compute numlines, the number of spectral lines in each partition band */\r\n                /* each partition band should be about DELBARK wide. */\r\n                for (i = 0; i < Encoder.CBANDS; i++) {\r\n                    var bark1;\r\n                    var j2;\r\n                    bark1 = freq2bark(sfreq * j);\r\n\r\n                    b_frq[i] = sfreq * j;\r\n\r\n                    for (j2 = j; freq2bark(sfreq * j2) - bark1 < DELBARK\r\n                    && j2 <= blksize / 2; j2++)\r\n                        ;\r\n\r\n                    numlines[i] = j2 - j;\r\n                    ni = i + 1;\r\n\r\n                    while (j < j2) {\r\n                        partition[j++] = i;\r\n                    }\r\n                    if (j > blksize / 2) {\r\n                        j = blksize / 2;\r\n                        ++i;\r\n                        break;\r\n                    }\r\n                }\r\n                b_frq[i] = sfreq * j;\r\n\r\n                for (var sfb = 0; sfb < sbmax; sfb++) {\r\n                    var i1, i2, start, end;\r\n                    var arg;\r\n                    start = scalepos[sfb];\r\n                    end = scalepos[sfb + 1];\r\n\r\n                    i1 = 0 | Math.floor(.5 + deltafreq * (start - .5));\r\n                    if (i1 < 0)\r\n                        i1 = 0;\r\n                    i2 = 0 | Math.floor(.5 + deltafreq * (end - .5));\r\n\r\n                    if (i2 > blksize / 2)\r\n                        i2 = blksize / 2;\r\n\r\n                    bm[sfb] = (partition[i1] + partition[i2]) / 2;\r\n                    bo[sfb] = partition[i2];\r\n                    var f_tmp = sample_freq_frac * end;\r\n                    /*\r\n                     * calculate how much of this band belongs to current scalefactor\r\n                     * band\r\n                     */\r\n                    bo_w[sfb] = (f_tmp - b_frq[bo[sfb]])\r\n                        / (b_frq[bo[sfb] + 1] - b_frq[bo[sfb]]);\r\n                    if (bo_w[sfb] < 0) {\r\n                        bo_w[sfb] = 0;\r\n                    } else {\r\n                        if (bo_w[sfb] > 1) {\r\n                            bo_w[sfb] = 1;\r\n                        }\r\n                    }\r\n                    /* setup stereo demasking thresholds */\r\n                    /* formula reverse enginerred from plot in paper */\r\n                    arg = freq2bark(sfreq * scalepos[sfb] * deltafreq);\r\n                    arg = ( Math.min(arg, 15.5) / 15.5);\r\n\r\n                    mld[sfb] = Math.pow(10.0,\r\n                        1.25 * (1 - Math.cos(Math.PI * arg)) - 2.5);\r\n                }\r\n\r\n                /* compute bark values of each critical band */\r\n                j = 0;\r\n                for (var k = 0; k < ni; k++) {\r\n                    var w = numlines[k];\r\n                    var bark1, bark2;\r\n\r\n                    bark1 = freq2bark(sfreq * (j));\r\n                    bark2 = freq2bark(sfreq * (j + w - 1));\r\n                    bval[k] = .5 * (bark1 + bark2);\r\n\r\n                    bark1 = freq2bark(sfreq * (j - .5));\r\n                    bark2 = freq2bark(sfreq * (j + w - .5));\r\n                    bval_width[k] = bark2 - bark1;\r\n                    j += w;\r\n                }\r\n\r\n                return ni;\r\n            }\r\n\r\n            function init_s3_values(s3ind, npart, bval, bval_width, norm, use_old_s3) {\r\n                var s3 = new_float_n([Encoder.CBANDS, Encoder.CBANDS]);\r\n                /*\r\n                 * The s3 array is not linear in the bark scale.\r\n                 *\r\n                 * bval[x] should be used to get the bark value.\r\n                 */\r\n                var j;\r\n                var numberOfNoneZero = 0;\r\n\r\n                /**\r\n                 * <PRE>\r\n                 * s[i][j], the value of the spreading function,\r\n                 * centered at band j (masker), for band i (maskee)\r\n                 *\r\n                 * i.e.: sum over j to spread into signal barkval=i\r\n                 * NOTE: i and j are used opposite as in the ISO docs\r\n                 * </PRE>\r\n                 */\r\n                if (use_old_s3) {\r\n                    for (var i = 0; i < npart; i++) {\r\n                        for (j = 0; j < npart; j++) {\r\n                            var v = s3_func(bval[i] - bval[j]) * bval_width[j];\r\n                            s3[i][j] = v * norm[i];\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (j = 0; j < npart; j++) {\r\n                        var hf_slope = 15 + Math.min(21 / bval[j], 12);\r\n                        var s3_x_norm = norm_s3_func_x(hf_slope);\r\n                        for (var i = 0; i < npart; i++) {\r\n                            var v = s3_x_norm\r\n                                * s3_func_x(bval[i] - bval[j], hf_slope)\r\n                                * bval_width[j];\r\n                            s3[i][j] = v * norm[i];\r\n                        }\r\n                    }\r\n                }\r\n                for (var i = 0; i < npart; i++) {\r\n                    for (j = 0; j < npart; j++) {\r\n                        if (s3[i][j] > 0.0)\r\n                            break;\r\n                    }\r\n                    s3ind[i][0] = j;\r\n\r\n                    for (j = npart - 1; j > 0; j--) {\r\n                        if (s3[i][j] > 0.0)\r\n                            break;\r\n                    }\r\n                    s3ind[i][1] = j;\r\n                    numberOfNoneZero += (s3ind[i][1] - s3ind[i][0] + 1);\r\n                }\r\n\r\n                var p = new_float(numberOfNoneZero);\r\n                var k = 0;\r\n                for (var i = 0; i < npart; i++)\r\n                    for (j = s3ind[i][0]; j <= s3ind[i][1]; j++)\r\n                        p[k++] = s3[i][j];\r\n\r\n                return p;\r\n            }\r\n\r\n            function stereo_demask(f) {\r\n                /* setup stereo demasking thresholds */\r\n                /* formula reverse enginerred from plot in paper */\r\n                var arg = freq2bark(f);\r\n                arg = (Math.min(arg, 15.5) / 15.5);\r\n\r\n                return Math.pow(10.0,\r\n                    1.25 * (1 - Math.cos(Math.PI * arg)) - 2.5);\r\n            }\r\n\r\n            /**\r\n             * NOTE: the bitrate reduction from the inter-channel masking effect is low\r\n             * compared to the chance of getting annyoing artefacts. L3psycho_anal_vbr\r\n             * does not use this feature. (Robert 071216)\r\n             */\r\n            this.psymodel_init = function (gfp) {\r\n                var gfc = gfp.internal_flags;\r\n                var i;\r\n                var useOldS3 = true;\r\n                var bvl_a = 13, bvl_b = 24;\r\n                var snr_l_a = 0, snr_l_b = 0;\r\n                var snr_s_a = -8.25, snr_s_b = -4.5;\r\n                var bval = new_float(Encoder.CBANDS);\r\n                var bval_width = new_float(Encoder.CBANDS);\r\n                var norm = new_float(Encoder.CBANDS);\r\n                var sfreq = gfp.out_samplerate;\r\n\r\n                switch (gfp.experimentalZ) {\r\n                    default:\r\n                    case 0:\r\n                        useOldS3 = true;\r\n                        break;\r\n                    case 1:\r\n                        useOldS3 = (gfp.VBR == VbrMode.vbr_mtrh || gfp.VBR == VbrMode.vbr_mt) ? false\r\n                            : true;\r\n                        break;\r\n                    case 2:\r\n                        useOldS3 = false;\r\n                        break;\r\n                    case 3:\r\n                        bvl_a = 8;\r\n                        snr_l_a = -1.75;\r\n                        snr_l_b = -0.0125;\r\n                        snr_s_a = -8.25;\r\n                        snr_s_b = -2.25;\r\n                        break;\r\n                }\r\n                gfc.ms_ener_ratio_old = .25;\r\n                gfc.blocktype_old[0] = gfc.blocktype_old[1] = Encoder.NORM_TYPE;\r\n                // the vbr header is long blocks\r\n\r\n                for (i = 0; i < 4; ++i) {\r\n                    for (var j = 0; j < Encoder.CBANDS; ++j) {\r\n                        gfc.nb_1[i][j] = 1e20;\r\n                        gfc.nb_2[i][j] = 1e20;\r\n                        gfc.nb_s1[i][j] = gfc.nb_s2[i][j] = 1.0;\r\n                    }\r\n                    for (var sb = 0; sb < Encoder.SBMAX_l; sb++) {\r\n                        gfc.en[i].l[sb] = 1e20;\r\n                        gfc.thm[i].l[sb] = 1e20;\r\n                    }\r\n                    for (var j = 0; j < 3; ++j) {\r\n                        for (var sb = 0; sb < Encoder.SBMAX_s; sb++) {\r\n                            gfc.en[i].s[sb][j] = 1e20;\r\n                            gfc.thm[i].s[sb][j] = 1e20;\r\n                        }\r\n                        gfc.nsPsy.lastAttacks[i] = 0;\r\n                    }\r\n                    for (var j = 0; j < 9; j++)\r\n                        gfc.nsPsy.last_en_subshort[i][j] = 10.;\r\n                }\r\n\r\n                /* init. for loudness approx. -jd 2001 mar 27 */\r\n                gfc.loudness_sq_save[0] = gfc.loudness_sq_save[1] = 0.0;\r\n\r\n                /*************************************************************************\r\n                 * now compute the psychoacoustic model specific constants\r\n                 ************************************************************************/\r\n                /* compute numlines, bo, bm, bval, bval_width, mld */\r\n\r\n                gfc.npart_l = init_numline(gfc.numlines_l, gfc.bo_l, gfc.bm_l, bval,\r\n                    bval_width, gfc.mld_l, gfc.PSY.bo_l_weight, sfreq,\r\n                    Encoder.BLKSIZE, gfc.scalefac_band.l, Encoder.BLKSIZE\r\n                    / (2.0 * 576), Encoder.SBMAX_l);\r\n                /* compute the spreading function */\r\n                for (i = 0; i < gfc.npart_l; i++) {\r\n                    var snr = snr_l_a;\r\n                    if (bval[i] >= bvl_a) {\r\n                        snr = snr_l_b * (bval[i] - bvl_a) / (bvl_b - bvl_a) + snr_l_a\r\n                            * (bvl_b - bval[i]) / (bvl_b - bvl_a);\r\n                    }\r\n                    norm[i] = Math.pow(10.0, snr / 10.0);\r\n                    if (gfc.numlines_l[i] > 0) {\r\n                        gfc.rnumlines_l[i] = 1.0 / gfc.numlines_l[i];\r\n                    } else {\r\n                        gfc.rnumlines_l[i] = 0;\r\n                    }\r\n                }\r\n                gfc.s3_ll = init_s3_values(gfc.s3ind, gfc.npart_l, bval, bval_width,\r\n                    norm, useOldS3);\r\n\r\n                /* compute long block specific values, ATH and MINVAL */\r\n                var j = 0;\r\n                for (i = 0; i < gfc.npart_l; i++) {\r\n                    var x;\r\n\r\n                    /* ATH */\r\n                    x = Float.MAX_VALUE;\r\n                    for (var k = 0; k < gfc.numlines_l[i]; k++, j++) {\r\n                        var freq = sfreq * j / (1000.0 * Encoder.BLKSIZE);\r\n                        var level;\r\n                        /*\r\n                         * ATH below 100 Hz constant, not further climbing\r\n                         */\r\n                        level = this.ATHformula(freq * 1000, gfp) - 20;\r\n                        // scale to FFT units; returned value is in dB\r\n                        level = Math.pow(10., 0.1 * level);\r\n                        // convert from dB . energy\r\n                        level *= gfc.numlines_l[i];\r\n                        if (x > level)\r\n                            x = level;\r\n                    }\r\n                    gfc.ATH.cb_l[i] = x;\r\n\r\n                    /*\r\n                     * MINVAL. For low freq, the strength of the masking is limited by\r\n                     * minval this is an ISO MPEG1 thing, dont know if it is really\r\n                     * needed\r\n                     */\r\n                    /*\r\n                     * FIXME: it does work to reduce low-freq problems in S53-Wind-Sax\r\n                     * and lead-voice samples, but introduces some 3 kbps bit bloat too.\r\n                     * TODO: Further refinement of the shape of this hack.\r\n                     */\r\n                    x = -20 + bval[i] * 20 / 10;\r\n                    if (x > 6) {\r\n                        x = 100;\r\n                    }\r\n                    if (x < -15) {\r\n                        x = -15;\r\n                    }\r\n                    x -= 8.;\r\n                    gfc.minval_l[i] = (Math.pow(10.0, x / 10.) * gfc.numlines_l[i]);\r\n                }\r\n\r\n                /************************************************************************\r\n                 * do the same things for short blocks\r\n                 ************************************************************************/\r\n                gfc.npart_s = init_numline(gfc.numlines_s, gfc.bo_s, gfc.bm_s, bval,\r\n                    bval_width, gfc.mld_s, gfc.PSY.bo_s_weight, sfreq,\r\n                    Encoder.BLKSIZE_s, gfc.scalefac_band.s, Encoder.BLKSIZE_s\r\n                    / (2.0 * 192), Encoder.SBMAX_s);\r\n\r\n                /* SNR formula. short block is normalized by SNR. is it still right ? */\r\n                j = 0;\r\n                for (i = 0; i < gfc.npart_s; i++) {\r\n                    var x;\r\n                    var snr = snr_s_a;\r\n                    if (bval[i] >= bvl_a) {\r\n                        snr = snr_s_b * (bval[i] - bvl_a) / (bvl_b - bvl_a) + snr_s_a\r\n                            * (bvl_b - bval[i]) / (bvl_b - bvl_a);\r\n                    }\r\n                    norm[i] = Math.pow(10.0, snr / 10.0);\r\n\r\n                    /* ATH */\r\n                    x = Float.MAX_VALUE;\r\n                    for (var k = 0; k < gfc.numlines_s[i]; k++, j++) {\r\n                        var freq = sfreq * j / (1000.0 * Encoder.BLKSIZE_s);\r\n                        var level;\r\n                        /* freq = Min(.1,freq); */\r\n                        /*\r\n                         * ATH below 100 Hz constant, not\r\n                         * further climbing\r\n                         */\r\n                        level = this.ATHformula(freq * 1000, gfp) - 20;\r\n                        // scale to FFT units; returned value is in dB\r\n                        level = Math.pow(10., 0.1 * level);\r\n                        // convert from dB . energy\r\n                        level *= gfc.numlines_s[i];\r\n                        if (x > level)\r\n                            x = level;\r\n                    }\r\n                    gfc.ATH.cb_s[i] = x;\r\n\r\n                    /*\r\n                     * MINVAL. For low freq, the strength of the masking is limited by\r\n                     * minval this is an ISO MPEG1 thing, dont know if it is really\r\n                     * needed\r\n                     */\r\n                    x = (-7.0 + bval[i] * 7.0 / 12.0);\r\n                    if (bval[i] > 12) {\r\n                        x *= 1 + Math.log(1 + x) * 3.1;\r\n                    }\r\n                    if (bval[i] < 12) {\r\n                        x *= 1 + Math.log(1 - x) * 2.3;\r\n                    }\r\n                    if (x < -15) {\r\n                        x = -15;\r\n                    }\r\n                    x -= 8;\r\n                    gfc.minval_s[i] = Math.pow(10.0, x / 10)\r\n                        * gfc.numlines_s[i];\r\n                }\r\n\r\n                gfc.s3_ss = init_s3_values(gfc.s3ind_s, gfc.npart_s, bval, bval_width,\r\n                    norm, useOldS3);\r\n\r\n                init_mask_add_max_values();\r\n                fft.init_fft(gfc);\r\n\r\n                /* setup temporal masking */\r\n                gfc.decay = Math.exp(-1.0 * LOG10\r\n                    / (temporalmask_sustain_sec * sfreq / 192.0));\r\n\r\n                {\r\n                    var msfix;\r\n                    msfix = NS_MSFIX;\r\n                    if ((gfp.exp_nspsytune & 2) != 0)\r\n                        msfix = 1.0;\r\n                    if (Math.abs(gfp.msfix) > 0.0)\r\n                        msfix = gfp.msfix;\r\n                    gfp.msfix = msfix;\r\n\r\n                    /*\r\n                     * spread only from npart_l bands. Normally, we use the spreading\r\n                     * function to convolve from npart_l down to npart_l bands\r\n                     */\r\n                    for (var b = 0; b < gfc.npart_l; b++)\r\n                        if (gfc.s3ind[b][1] > gfc.npart_l - 1)\r\n                            gfc.s3ind[b][1] = gfc.npart_l - 1;\r\n                }\r\n\r\n                /*\r\n                 * prepare for ATH auto adjustment: we want to decrease the ATH by 12 dB\r\n                 * per second\r\n                 */\r\n                var frame_duration = (576. * gfc.mode_gr / sfreq);\r\n                gfc.ATH.decay = Math.pow(10., -12. / 10. * frame_duration);\r\n                gfc.ATH.adjust = 0.01;\r\n                /* minimum, for leading low loudness */\r\n                gfc.ATH.adjustLimit = 1.0;\r\n                /* on lead, allow adjust up to maximum */\r\n\r\n\r\n                if (gfp.ATHtype != -1) {\r\n                    /* compute equal loudness weights (eql_w) */\r\n                    var freq;\r\n                    var freq_inc = gfp.out_samplerate\r\n                        / (Encoder.BLKSIZE);\r\n                    var eql_balance = 0.0;\r\n                    freq = 0.0;\r\n                    for (i = 0; i < Encoder.BLKSIZE / 2; ++i) {\r\n                        /* convert ATH dB to relative power (not dB) */\r\n                        /* to determine eql_w */\r\n                        freq += freq_inc;\r\n                        gfc.ATH.eql_w[i] = 1. / Math.pow(10, this.ATHformula(freq, gfp) / 10);\r\n                        eql_balance += gfc.ATH.eql_w[i];\r\n                    }\r\n                    eql_balance = 1.0 / eql_balance;\r\n                    for (i = Encoder.BLKSIZE / 2; --i >= 0;) { /* scale weights */\r\n                        gfc.ATH.eql_w[i] *= eql_balance;\r\n                    }\r\n                }\r\n                {\r\n                    for (var b = j = 0; b < gfc.npart_s; ++b) {\r\n                        for (i = 0; i < gfc.numlines_s[b]; ++i) {\r\n                            ++j;\r\n                        }\r\n                    }\r\n                    for (var b = j = 0; b < gfc.npart_l; ++b) {\r\n                        for (i = 0; i < gfc.numlines_l[b]; ++i) {\r\n                            ++j;\r\n                        }\r\n                    }\r\n                }\r\n                j = 0;\r\n                for (i = 0; i < gfc.npart_l; i++) {\r\n                    var freq = sfreq * (j + gfc.numlines_l[i] / 2) / (1.0 * Encoder.BLKSIZE);\r\n                    gfc.mld_cb_l[i] = stereo_demask(freq);\r\n                    j += gfc.numlines_l[i];\r\n                }\r\n                for (; i < Encoder.CBANDS; ++i) {\r\n                    gfc.mld_cb_l[i] = 1;\r\n                }\r\n                j = 0;\r\n                for (i = 0; i < gfc.npart_s; i++) {\r\n                    var freq = sfreq * (j + gfc.numlines_s[i] / 2) / (1.0 * Encoder.BLKSIZE_s);\r\n                    gfc.mld_cb_s[i] = stereo_demask(freq);\r\n                    j += gfc.numlines_s[i];\r\n                }\r\n                for (; i < Encoder.CBANDS; ++i) {\r\n                    gfc.mld_cb_s[i] = 1;\r\n                }\r\n                return 0;\r\n            }\r\n\r\n            /**\r\n             * Those ATH formulas are returning their minimum value for input = -1\r\n             */\r\n            function ATHformula_GB(f, value) {\r\n                /**\r\n                 * <PRE>\r\n                 *  from Painter & Spanias\r\n                 *           modified by Gabriel Bouvigne to better fit the reality\r\n                 *           ath =    3.640 * pow(f,-0.8)\r\n                 *           - 6.800 * exp(-0.6*pow(f-3.4,2.0))\r\n                 *           + 6.000 * exp(-0.15*pow(f-8.7,2.0))\r\n                 *           + 0.6* 0.001 * pow(f,4.0);\r\n                 *\r\n                 *\r\n                 *           In the past LAME was using the Painter &Spanias formula.\r\n                 *           But we had some recurrent problems with HF content.\r\n                 *           We measured real ATH values, and found the older formula\r\n                 *           to be inaccurate in the higher part. So we made this new\r\n                 *           formula and this solved most of HF problematic test cases.\r\n                 *           The tradeoff is that in VBR mode it increases a lot the\r\n                 *           bitrate.\r\n                 * </PRE>\r\n                 */\r\n\r\n                /*\r\n                 * This curve can be adjusted according to the VBR scale: it adjusts\r\n                 * from something close to Painter & Spanias on V9 up to Bouvigne's\r\n                 * formula for V0. This way the VBR bitrate is more balanced according\r\n                 * to the -V value.\r\n                 */\r\n\r\n                // the following Hack allows to ask for the lowest value\r\n                if (f < -.3)\r\n                    f = 3410;\r\n\r\n                // convert to khz\r\n                f /= 1000;\r\n                f = Math.max(0.1, f);\r\n                var ath = 3.640 * Math.pow(f, -0.8) - 6.800\r\n                    * Math.exp(-0.6 * Math.pow(f - 3.4, 2.0)) + 6.000\r\n                    * Math.exp(-0.15 * Math.pow(f - 8.7, 2.0))\r\n                    + (0.6 + 0.04 * value) * 0.001 * Math.pow(f, 4.0);\r\n                return ath;\r\n            }\r\n\r\n            this.ATHformula = function (f, gfp) {\r\n                var ath;\r\n                switch (gfp.ATHtype) {\r\n                    case 0:\r\n                        ath = ATHformula_GB(f, 9);\r\n                        break;\r\n                    case 1:\r\n                        // over sensitive, should probably be removed\r\n                        ath = ATHformula_GB(f, -1);\r\n                        break;\r\n                    case 2:\r\n                        ath = ATHformula_GB(f, 0);\r\n                        break;\r\n                    case 3:\r\n                        // modification of GB formula by Roel\r\n                        ath = ATHformula_GB(f, 1) + 6;\r\n                        break;\r\n                    case 4:\r\n                        ath = ATHformula_GB(f, gfp.ATHcurve);\r\n                        break;\r\n                    default:\r\n                        ath = ATHformula_GB(f, 0);\r\n                        break;\r\n                }\r\n                return ath;\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        function Lame() {\r\n            var self = this;\r\n            var LAME_MAXALBUMART = (128 * 1024);\r\n\r\n            Lame.V9 = 410;\r\n            Lame.V8 = 420;\r\n            Lame.V7 = 430;\r\n            Lame.V6 = 440;\r\n            Lame.V5 = 450;\r\n            Lame.V4 = 460;\r\n            Lame.V3 = 470;\r\n            Lame.V2 = 480;\r\n            Lame.V1 = 490;\r\n            Lame.V0 = 500;\r\n\r\n            /* still there for compatibility */\r\n\r\n            Lame.R3MIX = 1000;\r\n            Lame.STANDARD = 1001;\r\n            Lame.EXTREME = 1002;\r\n            Lame.INSANE = 1003;\r\n            Lame.STANDARD_FAST = 1004;\r\n            Lame.EXTREME_FAST = 1005;\r\n            Lame.MEDIUM = 1006;\r\n            Lame.MEDIUM_FAST = 1007;\r\n\r\n            /**\r\n             * maximum size of mp3buffer needed if you encode at most 1152 samples for\r\n             * each call to lame_encode_buffer. see lame_encode_buffer() below\r\n             * (LAME_MAXMP3BUFFER is now obsolete)\r\n             */\r\n            var LAME_MAXMP3BUFFER = (16384 + LAME_MAXALBUMART);\r\n            Lame.LAME_MAXMP3BUFFER = LAME_MAXMP3BUFFER;\r\n\r\n            var ga;\r\n            var bs;\r\n            var p;\r\n            var qupvt;\r\n            var qu;\r\n            var psy = new PsyModel();\r\n            var vbr;\r\n            var ver;\r\n            var id3;\r\n            var mpglib;\r\n            this.enc = new Encoder();\r\n\r\n            this.setModules = function (_ga, _bs, _p, _qupvt, _qu, _vbr, _ver, _id3, _mpglib) {\r\n                ga = _ga;\r\n                bs = _bs;\r\n                p = _p;\r\n                qupvt = _qupvt;\r\n                qu = _qu;\r\n                vbr = _vbr;\r\n                ver = _ver;\r\n                id3 = _id3;\r\n                mpglib = _mpglib;\r\n                this.enc.setModules(bs, psy, qupvt, vbr);\r\n            }\r\n\r\n            /**\r\n             * PSY Model related stuff\r\n             */\r\n            function PSY() {\r\n                /**\r\n                 * The dbQ stuff.\r\n                 */\r\n                this.mask_adjust = 0.;\r\n                /**\r\n                 * The dbQ stuff.\r\n                 */\r\n                this.mask_adjust_short = 0.;\r\n                /* at transition from one scalefactor band to next */\r\n                /**\r\n                 * Band weight long scalefactor bands.\r\n                 */\r\n                this.bo_l_weight = new_float(Encoder.SBMAX_l);\r\n                /**\r\n                 * Band weight short scalefactor bands.\r\n                 */\r\n                this.bo_s_weight = new_float(Encoder.SBMAX_s);\r\n            }\r\n\r\n            function LowPassHighPass() {\r\n                this.lowerlimit = 0.;\r\n            }\r\n\r\n            function BandPass(bitrate, lPass) {\r\n                this.lowpass = lPass;\r\n            }\r\n\r\n            var LAME_ID = 0xFFF88E3B;\r\n\r\n            function lame_init_old(gfp) {\r\n                var gfc;\r\n\r\n                gfp.class_id = LAME_ID;\r\n\r\n                gfc = gfp.internal_flags = new LameInternalFlags();\r\n\r\n                /* Global flags. set defaults here for non-zero values */\r\n                /* see lame.h for description */\r\n                /*\r\n                 * set integer values to -1 to mean that LAME will compute the best\r\n                 * value, UNLESS the calling program as set it (and the value is no\r\n                 * longer -1)\r\n                 */\r\n\r\n                gfp.mode = MPEGMode.NOT_SET;\r\n                gfp.original = 1;\r\n                gfp.in_samplerate = 44100;\r\n                gfp.num_channels = 2;\r\n                gfp.num_samples = -1;\r\n\r\n                gfp.bWriteVbrTag = true;\r\n                gfp.quality = -1;\r\n                gfp.short_blocks = null;\r\n                gfc.subblock_gain = -1;\r\n\r\n                gfp.lowpassfreq = 0;\r\n                gfp.highpassfreq = 0;\r\n                gfp.lowpasswidth = -1;\r\n                gfp.highpasswidth = -1;\r\n\r\n                gfp.VBR = VbrMode.vbr_off;\r\n                gfp.VBR_q = 4;\r\n                gfp.ATHcurve = -1;\r\n                gfp.VBR_mean_bitrate_kbps = 128;\r\n                gfp.VBR_min_bitrate_kbps = 0;\r\n                gfp.VBR_max_bitrate_kbps = 0;\r\n                gfp.VBR_hard_min = 0;\r\n                gfc.VBR_min_bitrate = 1;\r\n                /* not 0 ????? */\r\n                gfc.VBR_max_bitrate = 13;\r\n                /* not 14 ????? */\r\n\r\n                gfp.quant_comp = -1;\r\n                gfp.quant_comp_short = -1;\r\n\r\n                gfp.msfix = -1;\r\n\r\n                gfc.resample_ratio = 1;\r\n\r\n                gfc.OldValue[0] = 180;\r\n                gfc.OldValue[1] = 180;\r\n                gfc.CurrentStep[0] = 4;\r\n                gfc.CurrentStep[1] = 4;\r\n                gfc.masking_lower = 1;\r\n                gfc.nsPsy.attackthre = -1;\r\n                gfc.nsPsy.attackthre_s = -1;\r\n\r\n                gfp.scale = -1;\r\n\r\n                gfp.athaa_type = -1;\r\n                gfp.ATHtype = -1;\r\n                /* default = -1 = set in lame_init_params */\r\n                gfp.athaa_loudapprox = -1;\r\n                /* 1 = flat loudness approx. (total energy) */\r\n                /* 2 = equal loudness curve */\r\n                gfp.athaa_sensitivity = 0.0;\r\n                /* no offset */\r\n                gfp.useTemporal = null;\r\n                gfp.interChRatio = -1;\r\n\r\n                /*\r\n                 * The reason for int mf_samples_to_encode = ENCDELAY + POSTDELAY;\r\n                 * ENCDELAY = internal encoder delay. And then we have to add\r\n                 * POSTDELAY=288 because of the 50% MDCT overlap. A 576 MDCT granule\r\n                 * decodes to 1152 samples. To synthesize the 576 samples centered under\r\n                 * this granule we need the previous granule for the first 288 samples\r\n                 * (no problem), and the next granule for the next 288 samples (not\r\n                 * possible if this is last granule). So we need to pad with 288 samples\r\n                 * to make sure we can encode the 576 samples we are interested in.\r\n                 */\r\n                gfc.mf_samples_to_encode = Encoder.ENCDELAY + Encoder.POSTDELAY;\r\n                gfp.encoder_padding = 0;\r\n                gfc.mf_size = Encoder.ENCDELAY - Encoder.MDCTDELAY;\r\n                /*\r\n                 * we pad input with this many 0's\r\n                 */\r\n\r\n                gfp.findReplayGain = false;\r\n                gfp.decode_on_the_fly = false;\r\n\r\n                gfc.decode_on_the_fly = false;\r\n                gfc.findReplayGain = false;\r\n                gfc.findPeakSample = false;\r\n\r\n                gfc.RadioGain = 0;\r\n                gfc.AudiophileGain = 0;\r\n                gfc.noclipGainChange = 0;\r\n                gfc.noclipScale = -1.0;\r\n\r\n                gfp.preset = 0;\r\n\r\n                gfp.write_id3tag_automatic = true;\r\n                return 0;\r\n            }\r\n\r\n            this.lame_init = function () {\r\n                var gfp = new LameGlobalFlags();\r\n\r\n                var ret = lame_init_old(gfp);\r\n                if (ret != 0) {\r\n                    return null;\r\n                }\r\n\r\n                gfp.lame_allocated_gfp = 1;\r\n                return gfp;\r\n            }\r\n\r\n            function filter_coef(x) {\r\n                if (x > 1.0)\r\n                    return 0.0;\r\n                if (x <= 0.0)\r\n                    return 1.0;\r\n\r\n                return Math.cos(Math.PI / 2 * x);\r\n            }\r\n\r\n            this.nearestBitrateFullIndex = function (bitrate) {\r\n                /* borrowed from DM abr presets */\r\n\r\n                var full_bitrate_table = [8, 16, 24, 32, 40, 48, 56, 64, 80,\r\n                    96, 112, 128, 160, 192, 224, 256, 320];\r\n\r\n                var lower_range = 0, lower_range_kbps = 0, upper_range = 0, upper_range_kbps = 0;\r\n\r\n                /* We assume specified bitrate will be 320kbps */\r\n                upper_range_kbps = full_bitrate_table[16];\r\n                upper_range = 16;\r\n                lower_range_kbps = full_bitrate_table[16];\r\n                lower_range = 16;\r\n\r\n                /*\r\n                 * Determine which significant bitrates the value specified falls\r\n                 * between, if loop ends without breaking then we were correct above\r\n                 * that the value was 320\r\n                 */\r\n                for (var b = 0; b < 16; b++) {\r\n                    if ((Math.max(bitrate, full_bitrate_table[b + 1])) != bitrate) {\r\n                        upper_range_kbps = full_bitrate_table[b + 1];\r\n                        upper_range = b + 1;\r\n                        lower_range_kbps = full_bitrate_table[b];\r\n                        lower_range = (b);\r\n                        break;\r\n                        /* We found upper range */\r\n                    }\r\n                }\r\n\r\n                /* Determine which range the value specified is closer to */\r\n                if ((upper_range_kbps - bitrate) > (bitrate - lower_range_kbps)) {\r\n                    return lower_range;\r\n                }\r\n                return upper_range;\r\n            }\r\n\r\n            function optimum_samplefreq(lowpassfreq, input_samplefreq) {\r\n                /*\r\n                 * Rules:\r\n                 *\r\n                 * - if possible, sfb21 should NOT be used\r\n                 */\r\n                var suggested_samplefreq = 44100;\r\n\r\n                if (input_samplefreq >= 48000)\r\n                    suggested_samplefreq = 48000;\r\n                else if (input_samplefreq >= 44100)\r\n                    suggested_samplefreq = 44100;\r\n                else if (input_samplefreq >= 32000)\r\n                    suggested_samplefreq = 32000;\r\n                else if (input_samplefreq >= 24000)\r\n                    suggested_samplefreq = 24000;\r\n                else if (input_samplefreq >= 22050)\r\n                    suggested_samplefreq = 22050;\r\n                else if (input_samplefreq >= 16000)\r\n                    suggested_samplefreq = 16000;\r\n                else if (input_samplefreq >= 12000)\r\n                    suggested_samplefreq = 12000;\r\n                else if (input_samplefreq >= 11025)\r\n                    suggested_samplefreq = 11025;\r\n                else if (input_samplefreq >= 8000)\r\n                    suggested_samplefreq = 8000;\r\n\r\n                if (lowpassfreq == -1)\r\n                    return suggested_samplefreq;\r\n\r\n                if (lowpassfreq <= 15960)\r\n                    suggested_samplefreq = 44100;\r\n                if (lowpassfreq <= 15250)\r\n                    suggested_samplefreq = 32000;\r\n                if (lowpassfreq <= 11220)\r\n                    suggested_samplefreq = 24000;\r\n                if (lowpassfreq <= 9970)\r\n                    suggested_samplefreq = 22050;\r\n                if (lowpassfreq <= 7230)\r\n                    suggested_samplefreq = 16000;\r\n                if (lowpassfreq <= 5420)\r\n                    suggested_samplefreq = 12000;\r\n                if (lowpassfreq <= 4510)\r\n                    suggested_samplefreq = 11025;\r\n                if (lowpassfreq <= 3970)\r\n                    suggested_samplefreq = 8000;\r\n\r\n                if (input_samplefreq < suggested_samplefreq) {\r\n                    /*\r\n                     * choose a valid MPEG sample frequency above the input sample\r\n                     * frequency to avoid SFB21/12 bitrate bloat rh 061115\r\n                     */\r\n                    if (input_samplefreq > 44100) {\r\n                        return 48000;\r\n                    }\r\n                    if (input_samplefreq > 32000) {\r\n                        return 44100;\r\n                    }\r\n                    if (input_samplefreq > 24000) {\r\n                        return 32000;\r\n                    }\r\n                    if (input_samplefreq > 22050) {\r\n                        return 24000;\r\n                    }\r\n                    if (input_samplefreq > 16000) {\r\n                        return 22050;\r\n                    }\r\n                    if (input_samplefreq > 12000) {\r\n                        return 16000;\r\n                    }\r\n                    if (input_samplefreq > 11025) {\r\n                        return 12000;\r\n                    }\r\n                    if (input_samplefreq > 8000) {\r\n                        return 11025;\r\n                    }\r\n                    return 8000;\r\n                }\r\n                return suggested_samplefreq;\r\n            }\r\n\r\n            /**\r\n             * convert samp freq in Hz to index\r\n             */\r\n            function SmpFrqIndex(sample_freq, gpf) {\r\n                switch (sample_freq) {\r\n                    case 44100:\r\n                        gpf.version = 1;\r\n                        return 0;\r\n                    case 48000:\r\n                        gpf.version = 1;\r\n                        return 1;\r\n                    case 32000:\r\n                        gpf.version = 1;\r\n                        return 2;\r\n                    case 22050:\r\n                        gpf.version = 0;\r\n                        return 0;\r\n                    case 24000:\r\n                        gpf.version = 0;\r\n                        return 1;\r\n                    case 16000:\r\n                        gpf.version = 0;\r\n                        return 2;\r\n                    case 11025:\r\n                        gpf.version = 0;\r\n                        return 0;\r\n                    case 12000:\r\n                        gpf.version = 0;\r\n                        return 1;\r\n                    case 8000:\r\n                        gpf.version = 0;\r\n                        return 2;\r\n                    default:\r\n                        gpf.version = 0;\r\n                        return -1;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * @param bRate\r\n             *            legal rates from 8 to 320\r\n             */\r\n            function FindNearestBitrate(bRate, version, samplerate) {\r\n                /* MPEG-1 or MPEG-2 LSF */\r\n                if (samplerate < 16000)\r\n                    version = 2;\r\n\r\n                var bitrate = Tables.bitrate_table[version][1];\r\n\r\n                for (var i = 2; i <= 14; i++) {\r\n                    if (Tables.bitrate_table[version][i] > 0) {\r\n                        if (Math.abs(Tables.bitrate_table[version][i] - bRate) < Math\r\n                                .abs(bitrate - bRate))\r\n                            bitrate = Tables.bitrate_table[version][i];\r\n                    }\r\n                }\r\n                return bitrate;\r\n            }\r\n\r\n            /**\r\n             * @param bRate\r\n             *            legal rates from 32 to 448 kbps\r\n             * @param version\r\n             *            MPEG-1 or MPEG-2/2.5 LSF\r\n             */\r\n            function BitrateIndex(bRate, version, samplerate) {\r\n                /* convert bitrate in kbps to index */\r\n                if (samplerate < 16000)\r\n                    version = 2;\r\n                for (var i = 0; i <= 14; i++) {\r\n                    if (Tables.bitrate_table[version][i] > 0) {\r\n                        if (Tables.bitrate_table[version][i] == bRate) {\r\n                            return i;\r\n                        }\r\n                    }\r\n                }\r\n                return -1;\r\n            }\r\n\r\n            function optimum_bandwidth(lh, bitrate) {\r\n                /**\r\n                 * <PRE>\r\n                 *  Input:\r\n                 *      bitrate     total bitrate in kbps\r\n                 *\r\n                 *   Output:\r\n                 *      lowerlimit: best lowpass frequency limit for input filter in Hz\r\n                 *      upperlimit: best highpass frequency limit for input filter in Hz\r\n                 * </PRE>\r\n                 */\r\n                var freq_map = [new BandPass(8, 2000),\r\n                    new BandPass(16, 3700), new BandPass(24, 3900),\r\n                    new BandPass(32, 5500), new BandPass(40, 7000),\r\n                    new BandPass(48, 7500), new BandPass(56, 10000),\r\n                    new BandPass(64, 11000), new BandPass(80, 13500),\r\n                    new BandPass(96, 15100), new BandPass(112, 15600),\r\n                    new BandPass(128, 17000), new BandPass(160, 17500),\r\n                    new BandPass(192, 18600), new BandPass(224, 19400),\r\n                    new BandPass(256, 19700), new BandPass(320, 20500)];\r\n\r\n                var table_index = self.nearestBitrateFullIndex(bitrate);\r\n                lh.lowerlimit = freq_map[table_index].lowpass;\r\n            }\r\n\r\n            function lame_init_params_ppflt(gfp) {\r\n                var gfc = gfp.internal_flags;\r\n                /***************************************************************/\r\n                /* compute info needed for polyphase filter (filter type==0, default) */\r\n                /***************************************************************/\r\n\r\n                var lowpass_band = 32;\r\n                var highpass_band = -1;\r\n\r\n                if (gfc.lowpass1 > 0) {\r\n                    var minband = 999;\r\n                    for (var band = 0; band <= 31; band++) {\r\n                        var freq = (band / 31.0);\r\n                        /* this band and above will be zeroed: */\r\n                        if (freq >= gfc.lowpass2) {\r\n                            lowpass_band = Math.min(lowpass_band, band);\r\n                        }\r\n                        if (gfc.lowpass1 < freq && freq < gfc.lowpass2) {\r\n                            minband = Math.min(minband, band);\r\n                        }\r\n                    }\r\n\r\n                    /*\r\n                     * compute the *actual* transition band implemented by the polyphase\r\n                     * filter\r\n                     */\r\n                    if (minband == 999) {\r\n                        gfc.lowpass1 = (lowpass_band - .75) / 31.0;\r\n                    } else {\r\n                        gfc.lowpass1 = (minband - .75) / 31.0;\r\n                    }\r\n                    gfc.lowpass2 = lowpass_band / 31.0;\r\n                }\r\n\r\n                /*\r\n                 * make sure highpass filter is within 90% of what the effective\r\n                 * highpass frequency will be\r\n                 */\r\n                if (gfc.highpass2 > 0) {\r\n                    if (gfc.highpass2 < .9 * (.75 / 31.0)) {\r\n                        gfc.highpass1 = 0;\r\n                        gfc.highpass2 = 0;\r\n                        System.err.println(\"Warning: highpass filter disabled.  \"\r\n                            + \"highpass frequency too small\\n\");\r\n                    }\r\n                }\r\n\r\n                if (gfc.highpass2 > 0) {\r\n                    var maxband = -1;\r\n                    for (var band = 0; band <= 31; band++) {\r\n                        var freq = band / 31.0;\r\n                        /* this band and below will be zereod */\r\n                        if (freq <= gfc.highpass1) {\r\n                            highpass_band = Math.max(highpass_band, band);\r\n                        }\r\n                        if (gfc.highpass1 < freq && freq < gfc.highpass2) {\r\n                            maxband = Math.max(maxband, band);\r\n                        }\r\n                    }\r\n                    /*\r\n                     * compute the *actual* transition band implemented by the polyphase\r\n                     * filter\r\n                     */\r\n                    gfc.highpass1 = highpass_band / 31.0;\r\n                    if (maxband == -1) {\r\n                        gfc.highpass2 = (highpass_band + .75) / 31.0;\r\n                    } else {\r\n                        gfc.highpass2 = (maxband + .75) / 31.0;\r\n                    }\r\n                }\r\n\r\n                for (var band = 0; band < 32; band++) {\r\n                    var fc1, fc2;\r\n                    var freq = band / 31.0;\r\n                    if (gfc.highpass2 > gfc.highpass1) {\r\n                        fc1 = filter_coef((gfc.highpass2 - freq)\r\n                            / (gfc.highpass2 - gfc.highpass1 + 1e-20));\r\n                    } else {\r\n                        fc1 = 1.0;\r\n                    }\r\n                    if (gfc.lowpass2 > gfc.lowpass1) {\r\n                        fc2 = filter_coef((freq - gfc.lowpass1)\r\n                            / (gfc.lowpass2 - gfc.lowpass1 + 1e-20));\r\n                    } else {\r\n                        fc2 = 1.0;\r\n                    }\r\n                    gfc.amp_filter[band] = (fc1 * fc2);\r\n                }\r\n            }\r\n\r\n            function lame_init_qval(gfp) {\r\n                var gfc = gfp.internal_flags;\r\n\r\n                switch (gfp.quality) {\r\n                    default:\r\n                    case 9: /* no psymodel, no noise shaping */\r\n                        gfc.psymodel = 0;\r\n                        gfc.noise_shaping = 0;\r\n                        gfc.noise_shaping_amp = 0;\r\n                        gfc.noise_shaping_stop = 0;\r\n                        gfc.use_best_huffman = 0;\r\n                        gfc.full_outer_loop = 0;\r\n                        break;\r\n\r\n                    case 8:\r\n                        gfp.quality = 7;\r\n                    //$FALL-THROUGH$\r\n                    case 7:\r\n                        /*\r\n                         * use psymodel (for short block and m/s switching), but no noise\r\n                         * shapping\r\n                         */\r\n                        gfc.psymodel = 1;\r\n                        gfc.noise_shaping = 0;\r\n                        gfc.noise_shaping_amp = 0;\r\n                        gfc.noise_shaping_stop = 0;\r\n                        gfc.use_best_huffman = 0;\r\n                        gfc.full_outer_loop = 0;\r\n                        break;\r\n\r\n                    case 6:\r\n                        gfc.psymodel = 1;\r\n                        if (gfc.noise_shaping == 0)\r\n                            gfc.noise_shaping = 1;\r\n                        gfc.noise_shaping_amp = 0;\r\n                        gfc.noise_shaping_stop = 0;\r\n                        if (gfc.subblock_gain == -1)\r\n                            gfc.subblock_gain = 1;\r\n                        gfc.use_best_huffman = 0;\r\n                        gfc.full_outer_loop = 0;\r\n                        break;\r\n\r\n                    case 5:\r\n                        gfc.psymodel = 1;\r\n                        if (gfc.noise_shaping == 0)\r\n                            gfc.noise_shaping = 1;\r\n                        gfc.noise_shaping_amp = 0;\r\n                        gfc.noise_shaping_stop = 0;\r\n                        if (gfc.subblock_gain == -1)\r\n                            gfc.subblock_gain = 1;\r\n                        gfc.use_best_huffman = 0;\r\n                        gfc.full_outer_loop = 0;\r\n                        break;\r\n\r\n                    case 4:\r\n                        gfc.psymodel = 1;\r\n                        if (gfc.noise_shaping == 0)\r\n                            gfc.noise_shaping = 1;\r\n                        gfc.noise_shaping_amp = 0;\r\n                        gfc.noise_shaping_stop = 0;\r\n                        if (gfc.subblock_gain == -1)\r\n                            gfc.subblock_gain = 1;\r\n                        gfc.use_best_huffman = 1;\r\n                        gfc.full_outer_loop = 0;\r\n                        break;\r\n\r\n                    case 3:\r\n                        gfc.psymodel = 1;\r\n                        if (gfc.noise_shaping == 0)\r\n                            gfc.noise_shaping = 1;\r\n                        gfc.noise_shaping_amp = 1;\r\n                        gfc.noise_shaping_stop = 1;\r\n                        if (gfc.subblock_gain == -1)\r\n                            gfc.subblock_gain = 1;\r\n                        gfc.use_best_huffman = 1;\r\n                        gfc.full_outer_loop = 0;\r\n                        break;\r\n\r\n                    case 2:\r\n                        gfc.psymodel = 1;\r\n                        if (gfc.noise_shaping == 0)\r\n                            gfc.noise_shaping = 1;\r\n                        if (gfc.substep_shaping == 0)\r\n                            gfc.substep_shaping = 2;\r\n                        gfc.noise_shaping_amp = 1;\r\n                        gfc.noise_shaping_stop = 1;\r\n                        if (gfc.subblock_gain == -1)\r\n                            gfc.subblock_gain = 1;\r\n                        gfc.use_best_huffman = 1;\r\n                        /* inner loop */\r\n                        gfc.full_outer_loop = 0;\r\n                        break;\r\n\r\n                    case 1:\r\n                        gfc.psymodel = 1;\r\n                        if (gfc.noise_shaping == 0)\r\n                            gfc.noise_shaping = 1;\r\n                        if (gfc.substep_shaping == 0)\r\n                            gfc.substep_shaping = 2;\r\n                        gfc.noise_shaping_amp = 2;\r\n                        gfc.noise_shaping_stop = 1;\r\n                        if (gfc.subblock_gain == -1)\r\n                            gfc.subblock_gain = 1;\r\n                        gfc.use_best_huffman = 1;\r\n                        gfc.full_outer_loop = 0;\r\n                        break;\r\n\r\n                    case 0:\r\n                        gfc.psymodel = 1;\r\n                        if (gfc.noise_shaping == 0)\r\n                            gfc.noise_shaping = 1;\r\n                        if (gfc.substep_shaping == 0)\r\n                            gfc.substep_shaping = 2;\r\n                        gfc.noise_shaping_amp = 2;\r\n                        gfc.noise_shaping_stop = 1;\r\n                        if (gfc.subblock_gain == -1)\r\n                            gfc.subblock_gain = 1;\r\n                        gfc.use_best_huffman = 1;\r\n                        /*\r\n                         * type 2 disabled because of it slowness, in favor of full outer\r\n                         * loop search\r\n                         */\r\n                        gfc.full_outer_loop = 0;\r\n                        /*\r\n                         * full outer loop search disabled because of audible distortions it\r\n                         * may generate rh 060629\r\n                         */\r\n                        break;\r\n                }\r\n\r\n            }\r\n\r\n            function lame_init_bitstream(gfp) {\r\n                var gfc = gfp.internal_flags;\r\n                gfp.frameNum = 0;\r\n\r\n                if (gfp.write_id3tag_automatic) {\r\n                    id3.id3tag_write_v2(gfp);\r\n                }\r\n                /* initialize histogram data optionally used by frontend */\r\n\r\n                gfc.bitrate_stereoMode_Hist = new_int_n([16, 4 + 1]);\r\n                gfc.bitrate_blockType_Hist = new_int_n([16, 4 + 1 + 1]);\r\n\r\n                gfc.PeakSample = 0.0;\r\n\r\n                /* Write initial VBR Header to bitstream and init VBR data */\r\n                if (gfp.bWriteVbrTag)\r\n                    vbr.InitVbrTag(gfp);\r\n            }\r\n\r\n            /********************************************************************\r\n             * initialize internal params based on data in gf (globalflags struct filled\r\n             * in by calling program)\r\n             *\r\n             * OUTLINE:\r\n             *\r\n             * We first have some complex code to determine bitrate, output samplerate\r\n             * and mode. It is complicated by the fact that we allow the user to set\r\n             * some or all of these parameters, and need to determine best possible\r\n             * values for the rest of them:\r\n             *\r\n             * 1. set some CPU related flags 2. check if we are mono.mono, stereo.mono\r\n             * or stereo.stereo 3. compute bitrate and output samplerate: user may have\r\n             * set compression ratio user may have set a bitrate user may have set a\r\n             * output samplerate 4. set some options which depend on output samplerate\r\n             * 5. compute the actual compression ratio 6. set mode based on compression\r\n             * ratio\r\n             *\r\n             * The remaining code is much simpler - it just sets options based on the\r\n             * mode & compression ratio:\r\n             *\r\n             * set allow_diff_short based on mode select lowpass filter based on\r\n             * compression ratio & mode set the bitrate index, and min/max bitrates for\r\n             * VBR modes disable VBR tag if it is not appropriate initialize the\r\n             * bitstream initialize scalefac_band data set sideinfo_len (based on\r\n             * channels, CRC, out_samplerate) write an id3v2 tag into the bitstream\r\n             * write VBR tag into the bitstream set mpeg1/2 flag estimate the number of\r\n             * frames (based on a lot of data)\r\n             *\r\n             * now we set more flags: nspsytune: see code VBR modes see code CBR/ABR see\r\n             * code\r\n             *\r\n             * Finally, we set the algorithm flags based on the gfp.quality value\r\n             * lame_init_qval(gfp);\r\n             *\r\n             ********************************************************************/\r\n            this.lame_init_params = function (gfp) {\r\n                var gfc = gfp.internal_flags;\r\n\r\n                gfc.Class_ID = 0;\r\n                if (gfc.ATH == null)\r\n                    gfc.ATH = new ATH();\r\n                if (gfc.PSY == null)\r\n                    gfc.PSY = new PSY();\r\n                if (gfc.rgdata == null)\r\n                    gfc.rgdata = new ReplayGain();\r\n\r\n                gfc.channels_in = gfp.num_channels;\r\n                if (gfc.channels_in == 1)\r\n                    gfp.mode = MPEGMode.MONO;\r\n                gfc.channels_out = (gfp.mode == MPEGMode.MONO) ? 1 : 2;\r\n                gfc.mode_ext = Encoder.MPG_MD_MS_LR;\r\n                if (gfp.mode == MPEGMode.MONO)\r\n                    gfp.force_ms = false;\r\n                /*\r\n                 * don't allow forced mid/side stereo for mono output\r\n                 */\r\n\r\n                if (gfp.VBR == VbrMode.vbr_off && gfp.VBR_mean_bitrate_kbps != 128\r\n                    && gfp.brate == 0)\r\n                    gfp.brate = gfp.VBR_mean_bitrate_kbps;\r\n\r\n                if (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_mtrh\r\n                    || gfp.VBR == VbrMode.vbr_mt) {\r\n                    /* these modes can handle free format condition */\r\n                } else {\r\n                    gfp.free_format = false;\r\n                    /* mode can't be mixed with free format */\r\n                }\r\n\r\n                if (gfp.VBR == VbrMode.vbr_off && gfp.brate == 0) {\r\n                    /* no bitrate or compression ratio specified, use 11.025 */\r\n                    if (BitStream.EQ(gfp.compression_ratio, 0))\r\n                        gfp.compression_ratio = 11.025;\r\n                    /*\r\n                     * rate to compress a CD down to exactly 128000 bps\r\n                     */\r\n                }\r\n\r\n                /* find bitrate if user specify a compression ratio */\r\n                if (gfp.VBR == VbrMode.vbr_off && gfp.compression_ratio > 0) {\r\n\r\n                    if (gfp.out_samplerate == 0)\r\n                        gfp.out_samplerate = map2MP3Frequency((int)(0.97 * gfp.in_samplerate));\r\n                    /*\r\n                     * round up with a margin of 3 %\r\n                     */\r\n\r\n                    /*\r\n                     * choose a bitrate for the output samplerate which achieves\r\n                     * specified compression ratio\r\n                     */\r\n                    gfp.brate = 0 | (gfp.out_samplerate * 16 * gfc.channels_out / (1.e3 * gfp.compression_ratio));\r\n\r\n                    /* we need the version for the bitrate table look up */\r\n                    gfc.samplerate_index = SmpFrqIndex(gfp.out_samplerate, gfp);\r\n\r\n                    if (!gfp.free_format) /*\r\n                     * for non Free Format find the nearest allowed\r\n                     * bitrate\r\n                     */\r\n                        gfp.brate = FindNearestBitrate(gfp.brate, gfp.version,\r\n                            gfp.out_samplerate);\r\n                }\r\n\r\n                if (gfp.out_samplerate != 0) {\r\n                    if (gfp.out_samplerate < 16000) {\r\n                        gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\r\n                            8);\r\n                        gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\r\n                            64);\r\n                    } else if (gfp.out_samplerate < 32000) {\r\n                        gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\r\n                            8);\r\n                        gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\r\n                            160);\r\n                    } else {\r\n                        gfp.VBR_mean_bitrate_kbps = Math.max(gfp.VBR_mean_bitrate_kbps,\r\n                            32);\r\n                        gfp.VBR_mean_bitrate_kbps = Math.min(gfp.VBR_mean_bitrate_kbps,\r\n                            320);\r\n                    }\r\n                }\r\n\r\n                /****************************************************************/\r\n                /* if a filter has not been enabled, see if we should add one: */\r\n                /****************************************************************/\r\n                if (gfp.lowpassfreq == 0) {\r\n                    var lowpass = 16000.;\r\n\r\n                    switch (gfp.VBR) {\r\n                        case VbrMode.vbr_off:\r\n                        {\r\n                            var lh = new LowPassHighPass();\r\n                            optimum_bandwidth(lh, gfp.brate);\r\n                            lowpass = lh.lowerlimit;\r\n                            break;\r\n                        }\r\n                        case VbrMode.vbr_abr:\r\n                        {\r\n                            var lh = new LowPassHighPass();\r\n                            optimum_bandwidth(lh, gfp.VBR_mean_bitrate_kbps);\r\n                            lowpass = lh.lowerlimit;\r\n                            break;\r\n                        }\r\n                        case VbrMode.vbr_rh:\r\n                        {\r\n                            var x = [19500, 19000, 18600, 18000, 17500, 16000,\r\n                                15600, 14900, 12500, 10000, 3950];\r\n                            if (0 <= gfp.VBR_q && gfp.VBR_q <= 9) {\r\n                                var a = x[gfp.VBR_q], b = x[gfp.VBR_q + 1], m = gfp.VBR_q_frac;\r\n                                lowpass = linear_int(a, b, m);\r\n                            } else {\r\n                                lowpass = 19500;\r\n                            }\r\n                            break;\r\n                        }\r\n                        default:\r\n                        {\r\n                            var x = [19500, 19000, 18500, 18000, 17500, 16500,\r\n                                15500, 14500, 12500, 9500, 3950];\r\n                            if (0 <= gfp.VBR_q && gfp.VBR_q <= 9) {\r\n                                var a = x[gfp.VBR_q], b = x[gfp.VBR_q + 1], m = gfp.VBR_q_frac;\r\n                                lowpass = linear_int(a, b, m);\r\n                            } else {\r\n                                lowpass = 19500;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (gfp.mode == MPEGMode.MONO\r\n                        && (gfp.VBR == VbrMode.vbr_off || gfp.VBR == VbrMode.vbr_abr))\r\n                        lowpass *= 1.5;\r\n\r\n                    gfp.lowpassfreq = lowpass | 0;\r\n                }\r\n\r\n                if (gfp.out_samplerate == 0) {\r\n                    if (2 * gfp.lowpassfreq > gfp.in_samplerate) {\r\n                        gfp.lowpassfreq = gfp.in_samplerate / 2;\r\n                    }\r\n                    gfp.out_samplerate = optimum_samplefreq(gfp.lowpassfreq | 0,\r\n                        gfp.in_samplerate);\r\n                }\r\n\r\n                gfp.lowpassfreq = Math.min(20500, gfp.lowpassfreq);\r\n                gfp.lowpassfreq = Math.min(gfp.out_samplerate / 2, gfp.lowpassfreq);\r\n\r\n                if (gfp.VBR == VbrMode.vbr_off) {\r\n                    gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\r\n                        / (1.e3 * gfp.brate);\r\n                }\r\n                if (gfp.VBR == VbrMode.vbr_abr) {\r\n                    gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\r\n                        / (1.e3 * gfp.VBR_mean_bitrate_kbps);\r\n                }\r\n\r\n                /*\r\n                 * do not compute ReplayGain values and do not find the peak sample if\r\n                 * we can't store them\r\n                 */\r\n                if (!gfp.bWriteVbrTag) {\r\n                    gfp.findReplayGain = false;\r\n                    gfp.decode_on_the_fly = false;\r\n                    gfc.findPeakSample = false;\r\n                }\r\n                gfc.findReplayGain = gfp.findReplayGain;\r\n                gfc.decode_on_the_fly = gfp.decode_on_the_fly;\r\n\r\n                if (gfc.decode_on_the_fly)\r\n                    gfc.findPeakSample = true;\r\n\r\n                if (gfc.findReplayGain) {\r\n                    if (ga.InitGainAnalysis(gfc.rgdata, gfp.out_samplerate) == GainAnalysis.INIT_GAIN_ANALYSIS_ERROR) {\r\n                        gfp.internal_flags = null;\r\n                        return -6;\r\n                    }\r\n                }\r\n\r\n                if (gfc.decode_on_the_fly && !gfp.decode_only) {\r\n                    if (gfc.hip != null) {\r\n                        mpglib.hip_decode_exit(gfc.hip);\r\n                    }\r\n                    gfc.hip = mpglib.hip_decode_init();\r\n                }\r\n\r\n                gfc.mode_gr = gfp.out_samplerate <= 24000 ? 1 : 2;\r\n                /*\r\n                 * Number of granules per frame\r\n                 */\r\n                gfp.framesize = 576 * gfc.mode_gr;\r\n                gfp.encoder_delay = Encoder.ENCDELAY;\r\n\r\n                gfc.resample_ratio = gfp.in_samplerate / gfp.out_samplerate;\r\n\r\n                /**\r\n                 * <PRE>\r\n                 *  sample freq       bitrate     compression ratio\r\n                 *     [kHz]      [kbps/channel]   for 16 bit input\r\n                 *     44.1            56               12.6\r\n                 *     44.1            64               11.025\r\n                 *     44.1            80                8.82\r\n                 *     22.05           24               14.7\r\n                 *     22.05           32               11.025\r\n                 *     22.05           40                8.82\r\n                 *     16              16               16.0\r\n                 *     16              24               10.667\r\n                 * </PRE>\r\n                 */\r\n                /**\r\n                 * <PRE>\r\n                 *  For VBR, take a guess at the compression_ratio.\r\n                 *  For example:\r\n                 *\r\n                 *    VBR_q    compression     like\r\n                 *     -        4.4         320 kbps/44 kHz\r\n                 *   0...1      5.5         256 kbps/44 kHz\r\n                 *     2        7.3         192 kbps/44 kHz\r\n                 *     4        8.8         160 kbps/44 kHz\r\n                 *     6       11           128 kbps/44 kHz\r\n                 *     9       14.7          96 kbps\r\n                 *\r\n                 *  for lower bitrates, downsample with --resample\r\n                 * </PRE>\r\n                 */\r\n                switch (gfp.VBR) {\r\n                    case VbrMode.vbr_mt:\r\n                    case VbrMode.vbr_rh:\r\n                    case VbrMode.vbr_mtrh:\r\n                    {\r\n                        /* numbers are a bit strange, but they determine the lowpass value */\r\n                        var cmp = [5.7, 6.5, 7.3, 8.2, 10, 11.9, 13, 14,\r\n                            15, 16.5];\r\n                        gfp.compression_ratio = cmp[gfp.VBR_q];\r\n                    }\r\n                        break;\r\n                    case VbrMode.vbr_abr:\r\n                        gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\r\n                            / (1.e3 * gfp.VBR_mean_bitrate_kbps);\r\n                        break;\r\n                    default:\r\n                        gfp.compression_ratio = gfp.out_samplerate * 16 * gfc.channels_out\r\n                            / (1.e3 * gfp.brate);\r\n                        break;\r\n                }\r\n\r\n                /*\r\n                 * mode = -1 (not set by user) or mode = MONO (because of only 1 input\r\n                 * channel). If mode has not been set, then select J-STEREO\r\n                 */\r\n                if (gfp.mode == MPEGMode.NOT_SET) {\r\n                    gfp.mode = MPEGMode.JOINT_STEREO;\r\n                }\r\n\r\n                /* apply user driven high pass filter */\r\n                if (gfp.highpassfreq > 0) {\r\n                    gfc.highpass1 = 2. * gfp.highpassfreq;\r\n\r\n                    if (gfp.highpasswidth >= 0)\r\n                        gfc.highpass2 = 2. * (gfp.highpassfreq + gfp.highpasswidth);\r\n                    else\r\n                    /* 0% above on default */\r\n                        gfc.highpass2 = (1 + 0.00) * 2. * gfp.highpassfreq;\r\n\r\n                    gfc.highpass1 /= gfp.out_samplerate;\r\n                    gfc.highpass2 /= gfp.out_samplerate;\r\n                } else {\r\n                    gfc.highpass1 = 0;\r\n                    gfc.highpass2 = 0;\r\n                }\r\n                /* apply user driven low pass filter */\r\n                if (gfp.lowpassfreq > 0) {\r\n                    gfc.lowpass2 = 2. * gfp.lowpassfreq;\r\n                    if (gfp.lowpasswidth >= 0) {\r\n                        gfc.lowpass1 = 2. * (gfp.lowpassfreq - gfp.lowpasswidth);\r\n                        if (gfc.lowpass1 < 0) /* has to be >= 0 */\r\n                            gfc.lowpass1 = 0;\r\n                    } else { /* 0% below on default */\r\n                        gfc.lowpass1 = (1 - 0.00) * 2. * gfp.lowpassfreq;\r\n                    }\r\n                    gfc.lowpass1 /= gfp.out_samplerate;\r\n                    gfc.lowpass2 /= gfp.out_samplerate;\r\n                } else {\r\n                    gfc.lowpass1 = 0;\r\n                    gfc.lowpass2 = 0;\r\n                }\r\n\r\n                /**********************************************************************/\r\n                /* compute info needed for polyphase filter (filter type==0, default) */\r\n                /**********************************************************************/\r\n                lame_init_params_ppflt(gfp);\r\n                /*******************************************************\r\n                 * samplerate and bitrate index\r\n                 *******************************************************/\r\n                gfc.samplerate_index = SmpFrqIndex(gfp.out_samplerate, gfp);\r\n                if (gfc.samplerate_index < 0) {\r\n                    gfp.internal_flags = null;\r\n                    return -1;\r\n                }\r\n\r\n                if (gfp.VBR == VbrMode.vbr_off) {\r\n                    if (gfp.free_format) {\r\n                        gfc.bitrate_index = 0;\r\n                    } else {\r\n                        gfp.brate = FindNearestBitrate(gfp.brate, gfp.version,\r\n                            gfp.out_samplerate);\r\n                        gfc.bitrate_index = BitrateIndex(gfp.brate, gfp.version,\r\n                            gfp.out_samplerate);\r\n                        if (gfc.bitrate_index <= 0) {\r\n                            gfp.internal_flags = null;\r\n                            return -1;\r\n                        }\r\n                    }\r\n                } else {\r\n                    gfc.bitrate_index = 1;\r\n                }\r\n\r\n                /* for CBR, we will write an \"info\" tag. */\r\n\r\n                if (gfp.analysis)\r\n                    gfp.bWriteVbrTag = false;\r\n\r\n                /* some file options not allowed if output is: not specified or stdout */\r\n                if (gfc.pinfo != null)\r\n                    gfp.bWriteVbrTag = false;\r\n                /* disable Xing VBR tag */\r\n\r\n                bs.init_bit_stream_w(gfc);\r\n\r\n                var j = gfc.samplerate_index + (3 * gfp.version) + 6\r\n                    * (gfp.out_samplerate < 16000 ? 1 : 0);\r\n                for (var i = 0; i < Encoder.SBMAX_l + 1; i++)\r\n                    gfc.scalefac_band.l[i] = qupvt.sfBandIndex[j].l[i];\r\n\r\n                for (var i = 0; i < Encoder.PSFB21 + 1; i++) {\r\n                    var size = (gfc.scalefac_band.l[22] - gfc.scalefac_band.l[21])\r\n                        / Encoder.PSFB21;\r\n                    var start = gfc.scalefac_band.l[21] + i * size;\r\n                    gfc.scalefac_band.psfb21[i] = start;\r\n                }\r\n                gfc.scalefac_band.psfb21[Encoder.PSFB21] = 576;\r\n\r\n                for (var i = 0; i < Encoder.SBMAX_s + 1; i++)\r\n                    gfc.scalefac_band.s[i] = qupvt.sfBandIndex[j].s[i];\r\n\r\n                for (var i = 0; i < Encoder.PSFB12 + 1; i++) {\r\n                    var size = (gfc.scalefac_band.s[13] - gfc.scalefac_band.s[12])\r\n                        / Encoder.PSFB12;\r\n                    var start = gfc.scalefac_band.s[12] + i * size;\r\n                    gfc.scalefac_band.psfb12[i] = start;\r\n                }\r\n                gfc.scalefac_band.psfb12[Encoder.PSFB12] = 192;\r\n                /* determine the mean bitrate for main data */\r\n                if (gfp.version == 1) /* MPEG 1 */\r\n                    gfc.sideinfo_len = (gfc.channels_out == 1) ? 4 + 17 : 4 + 32;\r\n                else\r\n                /* MPEG 2 */\r\n                    gfc.sideinfo_len = (gfc.channels_out == 1) ? 4 + 9 : 4 + 17;\r\n\r\n                if (gfp.error_protection)\r\n                    gfc.sideinfo_len += 2;\r\n\r\n                lame_init_bitstream(gfp);\r\n\r\n                gfc.Class_ID = LAME_ID;\r\n\r\n                {\r\n                    var k;\r\n\r\n                    for (k = 0; k < 19; k++)\r\n                        gfc.nsPsy.pefirbuf[k] = 700 * gfc.mode_gr * gfc.channels_out;\r\n\r\n                    if (gfp.ATHtype == -1)\r\n                        gfp.ATHtype = 4;\r\n                }\r\n\r\n                switch (gfp.VBR) {\r\n\r\n                    case VbrMode.vbr_mt:\r\n                        gfp.VBR = VbrMode.vbr_mtrh;\r\n                    //$FALL-THROUGH$\r\n                    case VbrMode.vbr_mtrh:\r\n                    {\r\n                        if (gfp.useTemporal == null) {\r\n                            gfp.useTemporal = false;\r\n                            /* off by default for this VBR mode */\r\n                        }\r\n\r\n                        p.apply_preset(gfp, 500 - (gfp.VBR_q * 10), 0);\r\n                        /**\r\n                         * <PRE>\r\n                         *   The newer VBR code supports only a limited\r\n                         *     subset of quality levels:\r\n                         *     9-5=5 are the same, uses x^3/4 quantization\r\n                         *   4-0=0 are the same  5 plus best huffman divide code\r\n                         * </PRE>\r\n                         */\r\n                        if (gfp.quality < 0)\r\n                            gfp.quality = LAME_DEFAULT_QUALITY;\r\n                        if (gfp.quality < 5)\r\n                            gfp.quality = 0;\r\n                        if (gfp.quality > 5)\r\n                            gfp.quality = 5;\r\n\r\n                        gfc.PSY.mask_adjust = gfp.maskingadjust;\r\n                        gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\r\n\r\n                        /*\r\n                         * sfb21 extra only with MPEG-1 at higher sampling rates\r\n                         */\r\n                        if (gfp.experimentalY)\r\n                            gfc.sfb21_extra = false;\r\n                        else\r\n                            gfc.sfb21_extra = (gfp.out_samplerate > 44000);\r\n\r\n                        gfc.iteration_loop = new VBRNewIterationLoop(qu);\r\n                        break;\r\n\r\n                    }\r\n                    case VbrMode.vbr_rh:\r\n                    {\r\n\r\n                        p.apply_preset(gfp, 500 - (gfp.VBR_q * 10), 0);\r\n\r\n                        gfc.PSY.mask_adjust = gfp.maskingadjust;\r\n                        gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\r\n\r\n                        /*\r\n                         * sfb21 extra only with MPEG-1 at higher sampling rates\r\n                         */\r\n                        if (gfp.experimentalY)\r\n                            gfc.sfb21_extra = false;\r\n                        else\r\n                            gfc.sfb21_extra = (gfp.out_samplerate > 44000);\r\n\r\n                        /*\r\n                         * VBR needs at least the output of GPSYCHO, so we have to garantee\r\n                         * that by setting a minimum quality level, actually level 6 does\r\n                         * it. down to level 6\r\n                         */\r\n                        if (gfp.quality > 6)\r\n                            gfp.quality = 6;\r\n\r\n                        if (gfp.quality < 0)\r\n                            gfp.quality = LAME_DEFAULT_QUALITY;\r\n\r\n                        gfc.iteration_loop = new VBROldIterationLoop(qu);\r\n                        break;\r\n                    }\r\n\r\n                    default: /* cbr/abr */\r\n                    {\r\n                        var vbrmode;\r\n\r\n                        /*\r\n                         * no sfb21 extra with CBR code\r\n                         */\r\n                        gfc.sfb21_extra = false;\r\n\r\n                        if (gfp.quality < 0)\r\n                            gfp.quality = LAME_DEFAULT_QUALITY;\r\n\r\n                        vbrmode = gfp.VBR;\r\n                        if (vbrmode == VbrMode.vbr_off)\r\n                            gfp.VBR_mean_bitrate_kbps = gfp.brate;\r\n                        /* second, set parameters depending on bitrate */\r\n                        p.apply_preset(gfp, gfp.VBR_mean_bitrate_kbps, 0);\r\n                        gfp.VBR = vbrmode;\r\n\r\n                        gfc.PSY.mask_adjust = gfp.maskingadjust;\r\n                        gfc.PSY.mask_adjust_short = gfp.maskingadjust_short;\r\n\r\n                        if (vbrmode == VbrMode.vbr_off) {\r\n                            gfc.iteration_loop = new CBRNewIterationLoop(qu);\r\n                        } else {\r\n                            gfc.iteration_loop = new ABRIterationLoop(qu);\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                /* initialize default values common for all modes */\r\n\r\n                if (gfp.VBR != VbrMode.vbr_off) { /* choose a min/max bitrate for VBR */\r\n                    /* if the user didn't specify VBR_max_bitrate: */\r\n                    gfc.VBR_min_bitrate = 1;\r\n                    /*\r\n                     * default: allow 8 kbps (MPEG-2) or 32 kbps (MPEG-1)\r\n                     */\r\n                    gfc.VBR_max_bitrate = 14;\r\n                    /*\r\n                     * default: allow 160 kbps (MPEG-2) or 320 kbps (MPEG-1)\r\n                     */\r\n                    if (gfp.out_samplerate < 16000)\r\n                        gfc.VBR_max_bitrate = 8;\r\n                    /* default: allow 64 kbps (MPEG-2.5) */\r\n                    if (gfp.VBR_min_bitrate_kbps != 0) {\r\n                        gfp.VBR_min_bitrate_kbps = FindNearestBitrate(\r\n                            gfp.VBR_min_bitrate_kbps, gfp.version,\r\n                            gfp.out_samplerate);\r\n                        gfc.VBR_min_bitrate = BitrateIndex(gfp.VBR_min_bitrate_kbps,\r\n                            gfp.version, gfp.out_samplerate);\r\n                        if (gfc.VBR_min_bitrate < 0)\r\n                            return -1;\r\n                    }\r\n                    if (gfp.VBR_max_bitrate_kbps != 0) {\r\n                        gfp.VBR_max_bitrate_kbps = FindNearestBitrate(\r\n                            gfp.VBR_max_bitrate_kbps, gfp.version,\r\n                            gfp.out_samplerate);\r\n                        gfc.VBR_max_bitrate = BitrateIndex(gfp.VBR_max_bitrate_kbps,\r\n                            gfp.version, gfp.out_samplerate);\r\n                        if (gfc.VBR_max_bitrate < 0)\r\n                            return -1;\r\n                    }\r\n                    gfp.VBR_min_bitrate_kbps = Tables.bitrate_table[gfp.version][gfc.VBR_min_bitrate];\r\n                    gfp.VBR_max_bitrate_kbps = Tables.bitrate_table[gfp.version][gfc.VBR_max_bitrate];\r\n                    gfp.VBR_mean_bitrate_kbps = Math.min(\r\n                        Tables.bitrate_table[gfp.version][gfc.VBR_max_bitrate],\r\n                        gfp.VBR_mean_bitrate_kbps);\r\n                    gfp.VBR_mean_bitrate_kbps = Math.max(\r\n                        Tables.bitrate_table[gfp.version][gfc.VBR_min_bitrate],\r\n                        gfp.VBR_mean_bitrate_kbps);\r\n                }\r\n\r\n                /* just another daily changing developer switch */\r\n                if (gfp.tune) {\r\n                    gfc.PSY.mask_adjust += gfp.tune_value_a;\r\n                    gfc.PSY.mask_adjust_short += gfp.tune_value_a;\r\n                }\r\n\r\n                /* initialize internal qval settings */\r\n                lame_init_qval(gfp);\r\n                /*\r\n                 * automatic ATH adjustment on\r\n                 */\r\n                if (gfp.athaa_type < 0)\r\n                    gfc.ATH.useAdjust = 3;\r\n                else\r\n                    gfc.ATH.useAdjust = gfp.athaa_type;\r\n\r\n                /* initialize internal adaptive ATH settings -jd */\r\n                gfc.ATH.aaSensitivityP = Math.pow(10.0, gfp.athaa_sensitivity\r\n                    / -10.0);\r\n\r\n                if (gfp.short_blocks == null) {\r\n                    gfp.short_blocks = ShortBlock.short_block_allowed;\r\n                }\r\n\r\n                /*\r\n                 * Note Jan/2003: Many hardware decoders cannot handle short blocks in\r\n                 * regular stereo mode unless they are coupled (same type in both\r\n                 * channels) it is a rare event (1 frame per min. or so) that LAME would\r\n                 * use uncoupled short blocks, so lets turn them off until we decide how\r\n                 * to handle this. No other encoders allow uncoupled short blocks, even\r\n                 * though it is in the standard.\r\n                 */\r\n                /*\r\n                 * rh 20040217: coupling makes no sense for mono and dual-mono streams\r\n                 */\r\n                if (gfp.short_blocks == ShortBlock.short_block_allowed\r\n                    && (gfp.mode == MPEGMode.JOINT_STEREO || gfp.mode == MPEGMode.STEREO)) {\r\n                    gfp.short_blocks = ShortBlock.short_block_coupled;\r\n                }\r\n\r\n                if (gfp.quant_comp < 0)\r\n                    gfp.quant_comp = 1;\r\n                if (gfp.quant_comp_short < 0)\r\n                    gfp.quant_comp_short = 0;\r\n\r\n                if (gfp.msfix < 0)\r\n                    gfp.msfix = 0;\r\n\r\n                /* select psychoacoustic model */\r\n                gfp.exp_nspsytune = gfp.exp_nspsytune | 1;\r\n\r\n                if (gfp.internal_flags.nsPsy.attackthre < 0)\r\n                    gfp.internal_flags.nsPsy.attackthre = PsyModel.NSATTACKTHRE;\r\n                if (gfp.internal_flags.nsPsy.attackthre_s < 0)\r\n                    gfp.internal_flags.nsPsy.attackthre_s = PsyModel.NSATTACKTHRE_S;\r\n\r\n\r\n                if (gfp.scale < 0)\r\n                    gfp.scale = 1;\r\n\r\n                if (gfp.ATHtype < 0)\r\n                    gfp.ATHtype = 4;\r\n\r\n                if (gfp.ATHcurve < 0)\r\n                    gfp.ATHcurve = 4;\r\n\r\n                if (gfp.athaa_loudapprox < 0)\r\n                    gfp.athaa_loudapprox = 2;\r\n\r\n                if (gfp.interChRatio < 0)\r\n                    gfp.interChRatio = 0;\r\n\r\n                if (gfp.useTemporal == null)\r\n                    gfp.useTemporal = true;\r\n                /* on by default */\r\n\r\n                /*\r\n                 * padding method as described in\r\n                 * \"MPEG-Layer3 / Bitstream Syntax and Decoding\" by Martin Sieler, Ralph\r\n                 * Sperschneider\r\n                 *\r\n                 * note: there is no padding for the very first frame\r\n                 *\r\n                 * Robert Hegemann 2000-06-22\r\n                 */\r\n                gfc.slot_lag = gfc.frac_SpF = 0;\r\n                if (gfp.VBR == VbrMode.vbr_off)\r\n                    gfc.slot_lag = gfc.frac_SpF = (((gfp.version + 1) * 72000 * gfp.brate) % gfp.out_samplerate) | 0;\r\n\r\n                qupvt.iteration_init(gfp);\r\n                psy.psymodel_init(gfp);\r\n                return 0;\r\n            }\r\n\r\n            function update_inbuffer_size(gfc, nsamples) {\r\n                if (gfc.in_buffer_0 == null || gfc.in_buffer_nsamples < nsamples) {\r\n                    gfc.in_buffer_0 = new_float(nsamples);\r\n                    gfc.in_buffer_1 = new_float(nsamples);\r\n                    gfc.in_buffer_nsamples = nsamples;\r\n                }\r\n            }\r\n\r\n            this.lame_encode_flush = function (gfp, mp3buffer, mp3bufferPos, mp3buffer_size) {\r\n                var gfc = gfp.internal_flags;\r\n                var buffer = new_short_n([2, 1152]);\r\n                var imp3 = 0, mp3count, mp3buffer_size_remaining;\r\n\r\n                /*\r\n                 * we always add POSTDELAY=288 padding to make sure granule with real\r\n                 * data can be complety decoded (because of 50% overlap with next\r\n                 * granule\r\n                 */\r\n                var end_padding;\r\n                var frames_left;\r\n                var samples_to_encode = gfc.mf_samples_to_encode - Encoder.POSTDELAY;\r\n                var mf_needed = calcNeeded(gfp);\r\n\r\n                /* Was flush already called? */\r\n                if (gfc.mf_samples_to_encode < 1) {\r\n                    return 0;\r\n                }\r\n                mp3count = 0;\r\n\r\n                if (gfp.in_samplerate != gfp.out_samplerate) {\r\n                    /*\r\n                     * delay due to resampling; needs to be fixed, if resampling code\r\n                     * gets changed\r\n                     */\r\n                    samples_to_encode += 16. * gfp.out_samplerate / gfp.in_samplerate;\r\n                }\r\n                end_padding = gfp.framesize - (samples_to_encode % gfp.framesize);\r\n                if (end_padding < 576)\r\n                    end_padding += gfp.framesize;\r\n                gfp.encoder_padding = end_padding;\r\n\r\n                frames_left = (samples_to_encode + end_padding) / gfp.framesize;\r\n\r\n                /*\r\n                 * send in a frame of 0 padding until all internal sample buffers are\r\n                 * flushed\r\n                 */\r\n                while (frames_left > 0 && imp3 >= 0) {\r\n                    var bunch = mf_needed - gfc.mf_size;\r\n                    var frame_num = gfp.frameNum;\r\n\r\n                    bunch *= gfp.in_samplerate;\r\n                    bunch /= gfp.out_samplerate;\r\n                    if (bunch > 1152)\r\n                        bunch = 1152;\r\n                    if (bunch < 1)\r\n                        bunch = 1;\r\n\r\n                    mp3buffer_size_remaining = mp3buffer_size - mp3count;\r\n\r\n                    /* if user specifed buffer size = 0, dont check size */\r\n                    if (mp3buffer_size == 0)\r\n                        mp3buffer_size_remaining = 0;\r\n\r\n                    imp3 = this.lame_encode_buffer(gfp, buffer[0], buffer[1], bunch,\r\n                        mp3buffer, mp3bufferPos, mp3buffer_size_remaining);\r\n\r\n                    mp3bufferPos += imp3;\r\n                    mp3count += imp3;\r\n                    frames_left -= (frame_num != gfp.frameNum) ? 1 : 0;\r\n                }\r\n                /*\r\n                 * Set gfc.mf_samples_to_encode to 0, so we may detect and break loops\r\n                 * calling it more than once in a row.\r\n                 */\r\n                gfc.mf_samples_to_encode = 0;\r\n\r\n                if (imp3 < 0) {\r\n                    /* some type of fatal error */\r\n                    return imp3;\r\n                }\r\n\r\n                mp3buffer_size_remaining = mp3buffer_size - mp3count;\r\n                /* if user specifed buffer size = 0, dont check size */\r\n                if (mp3buffer_size == 0)\r\n                    mp3buffer_size_remaining = 0;\r\n\r\n                /* mp3 related stuff. bit buffer might still contain some mp3 data */\r\n                bs.flush_bitstream(gfp);\r\n                imp3 = bs.copy_buffer(gfc, mp3buffer, mp3bufferPos,\r\n                    mp3buffer_size_remaining, 1);\r\n                if (imp3 < 0) {\r\n                    /* some type of fatal error */\r\n                    return imp3;\r\n                }\r\n                mp3bufferPos += imp3;\r\n                mp3count += imp3;\r\n                mp3buffer_size_remaining = mp3buffer_size - mp3count;\r\n                /* if user specifed buffer size = 0, dont check size */\r\n                if (mp3buffer_size == 0)\r\n                    mp3buffer_size_remaining = 0;\r\n\r\n                if (gfp.write_id3tag_automatic) {\r\n                    /* write a id3 tag to the bitstream */\r\n                    id3.id3tag_write_v1(gfp);\r\n\r\n                    imp3 = bs.copy_buffer(gfc, mp3buffer, mp3bufferPos,\r\n                        mp3buffer_size_remaining, 0);\r\n\r\n                    if (imp3 < 0) {\r\n                        return imp3;\r\n                    }\r\n                    mp3count += imp3;\r\n                }\r\n                return mp3count;\r\n            };\r\n\r\n            this.lame_encode_buffer = function (gfp, buffer_l, buffer_r, nsamples, mp3buf, mp3bufPos, mp3buf_size) {\r\n                var gfc = gfp.internal_flags;\r\n                var in_buffer = [null, null];\r\n\r\n                if (gfc.Class_ID != LAME_ID)\r\n                    return -3;\r\n\r\n                if (nsamples == 0)\r\n                    return 0;\r\n\r\n                update_inbuffer_size(gfc, nsamples);\r\n\r\n                in_buffer[0] = gfc.in_buffer_0;\r\n                in_buffer[1] = gfc.in_buffer_1;\r\n\r\n                /* make a copy of input buffer, changing type to sample_t */\r\n                for (var i = 0; i < nsamples; i++) {\r\n                    in_buffer[0][i] = buffer_l[i];\r\n                    if (gfc.channels_in > 1)\r\n                        in_buffer[1][i] = buffer_r[i];\r\n                }\r\n\r\n                return lame_encode_buffer_sample(gfp, in_buffer[0], in_buffer[1],\r\n                    nsamples, mp3buf, mp3bufPos, mp3buf_size);\r\n            }\r\n\r\n            function calcNeeded(gfp) {\r\n                var mf_needed = Encoder.BLKSIZE + gfp.framesize - Encoder.FFTOFFSET;\r\n                /*\r\n                 * amount needed for FFT\r\n                 */\r\n                mf_needed = Math.max(mf_needed, 512 + gfp.framesize - 32);\r\n\r\n                return mf_needed;\r\n            }\r\n\r\n            function lame_encode_buffer_sample(gfp, buffer_l, buffer_r, nsamples, mp3buf, mp3bufPos, mp3buf_size) {\r\n                var gfc = gfp.internal_flags;\r\n                var mp3size = 0, ret, i, ch, mf_needed;\r\n                var mp3out;\r\n                var mfbuf = [null, null];\r\n                var in_buffer = [null, null];\r\n\r\n                if (gfc.Class_ID != LAME_ID)\r\n                    return -3;\r\n\r\n                if (nsamples == 0)\r\n                    return 0;\r\n\r\n                /* copy out any tags that may have been written into bitstream */\r\n                mp3out = bs.copy_buffer(gfc, mp3buf, mp3bufPos, mp3buf_size, 0);\r\n                if (mp3out < 0)\r\n                    return mp3out;\r\n                /* not enough buffer space */\r\n                mp3bufPos += mp3out;\r\n                mp3size += mp3out;\r\n\r\n                in_buffer[0] = buffer_l;\r\n                in_buffer[1] = buffer_r;\r\n\r\n                /* Apply user defined re-scaling */\r\n\r\n                /* user selected scaling of the samples */\r\n                if (BitStream.NEQ(gfp.scale, 0) && BitStream.NEQ(gfp.scale, 1.0)) {\r\n                    for (i = 0; i < nsamples; ++i) {\r\n                        in_buffer[0][i] *= gfp.scale;\r\n                        if (gfc.channels_out == 2)\r\n                            in_buffer[1][i] *= gfp.scale;\r\n                    }\r\n                }\r\n\r\n                /* user selected scaling of the channel 0 (left) samples */\r\n                if (BitStream.NEQ(gfp.scale_left, 0)\r\n                    && BitStream.NEQ(gfp.scale_left, 1.0)) {\r\n                    for (i = 0; i < nsamples; ++i) {\r\n                        in_buffer[0][i] *= gfp.scale_left;\r\n                    }\r\n                }\r\n\r\n                /* user selected scaling of the channel 1 (right) samples */\r\n                if (BitStream.NEQ(gfp.scale_right, 0)\r\n                    && BitStream.NEQ(gfp.scale_right, 1.0)) {\r\n                    for (i = 0; i < nsamples; ++i) {\r\n                        in_buffer[1][i] *= gfp.scale_right;\r\n                    }\r\n                }\r\n\r\n                /* Downsample to Mono if 2 channels in and 1 channel out */\r\n                if (gfp.num_channels == 2 && gfc.channels_out == 1) {\r\n                    for (i = 0; i < nsamples; ++i) {\r\n                        in_buffer[0][i] = 0.5 * ( in_buffer[0][i] + in_buffer[1][i]);\r\n                        in_buffer[1][i] = 0.0;\r\n                    }\r\n                }\r\n\r\n                mf_needed = calcNeeded(gfp);\r\n\r\n                mfbuf[0] = gfc.mfbuf[0];\r\n                mfbuf[1] = gfc.mfbuf[1];\r\n\r\n                var in_bufferPos = 0;\r\n                while (nsamples > 0) {\r\n                    var in_buffer_ptr = [null, null];\r\n                    var n_in = 0;\r\n                    /* number of input samples processed with fill_buffer */\r\n                    var n_out = 0;\r\n                    /* number of samples output with fill_buffer */\r\n                    /* n_in <> n_out if we are resampling */\r\n\r\n                    in_buffer_ptr[0] = in_buffer[0];\r\n                    in_buffer_ptr[1] = in_buffer[1];\r\n                    /* copy in new samples into mfbuf, with resampling */\r\n                    var inOut = new InOut();\r\n                    fill_buffer(gfp, mfbuf, in_buffer_ptr, in_bufferPos, nsamples,\r\n                        inOut);\r\n                    n_in = inOut.n_in;\r\n                    n_out = inOut.n_out;\r\n\r\n                    /* compute ReplayGain of resampled input if requested */\r\n                    if (gfc.findReplayGain && !gfc.decode_on_the_fly)\r\n                        if (ga.AnalyzeSamples(gfc.rgdata, mfbuf[0], gfc.mf_size,\r\n                                mfbuf[1], gfc.mf_size, n_out, gfc.channels_out) == GainAnalysis.GAIN_ANALYSIS_ERROR)\r\n                            return -6;\r\n\r\n                    /* update in_buffer counters */\r\n                    nsamples -= n_in;\r\n                    in_bufferPos += n_in;\r\n                    if (gfc.channels_out == 2)\r\n                        ;// in_bufferPos += n_in;\r\n\r\n                    /* update mfbuf[] counters */\r\n                    gfc.mf_size += n_out;\r\n\r\n                    /*\r\n                     * lame_encode_flush may have set gfc.mf_sample_to_encode to 0 so we\r\n                     * have to reinitialize it here when that happened.\r\n                     */\r\n                    if (gfc.mf_samples_to_encode < 1) {\r\n                        gfc.mf_samples_to_encode = Encoder.ENCDELAY + Encoder.POSTDELAY;\r\n                    }\r\n                    gfc.mf_samples_to_encode += n_out;\r\n\r\n                    if (gfc.mf_size >= mf_needed) {\r\n                        /* encode the frame. */\r\n                        /* mp3buf = pointer to current location in buffer */\r\n                        /* mp3buf_size = size of original mp3 output buffer */\r\n                        /* = 0 if we should not worry about the */\r\n                        /* buffer size because calling program is */\r\n                        /* to lazy to compute it */\r\n                        /* mp3size = size of data written to buffer so far */\r\n                        /* mp3buf_size-mp3size = amount of space avalable */\r\n\r\n                        var buf_size = mp3buf_size - mp3size;\r\n                        if (mp3buf_size == 0)\r\n                            buf_size = 0;\r\n\r\n                        ret = lame_encode_frame(gfp, mfbuf[0], mfbuf[1], mp3buf,\r\n                            mp3bufPos, buf_size);\r\n\r\n                        if (ret < 0)\r\n                            return ret;\r\n                        mp3bufPos += ret;\r\n                        mp3size += ret;\r\n\r\n                        /* shift out old samples */\r\n                        gfc.mf_size -= gfp.framesize;\r\n                        gfc.mf_samples_to_encode -= gfp.framesize;\r\n                        for (ch = 0; ch < gfc.channels_out; ch++)\r\n                            for (i = 0; i < gfc.mf_size; i++)\r\n                                mfbuf[ch][i] = mfbuf[ch][i + gfp.framesize];\r\n                    }\r\n                }\r\n\r\n                return mp3size;\r\n            }\r\n\r\n            function lame_encode_frame(gfp, inbuf_l, inbuf_r, mp3buf, mp3bufPos, mp3buf_size) {\r\n                var ret = self.enc.lame_encode_mp3_frame(gfp, inbuf_l, inbuf_r, mp3buf,\r\n                    mp3bufPos, mp3buf_size);\r\n                gfp.frameNum++;\r\n                return ret;\r\n            }\r\n\r\n            function InOut() {\r\n                this.n_in = 0;\r\n                this.n_out = 0;\r\n            }\r\n\r\n\r\n            function NumUsed() {\r\n                this.num_used = 0;\r\n            }\r\n\r\n            /**\r\n             * Greatest common divisor.\r\n             * <p>\r\n             * Joint work of Euclid and M. Hendry\r\n             */\r\n            function gcd(i, j) {\r\n                return j != 0 ? gcd(j, i % j) : i;\r\n            }\r\n\r\n            /**\r\n             * Resampling via FIR filter, blackman window.\r\n             */\r\n            function blackman(x, fcn, l) {\r\n                /*\r\n                 * This algorithm from: SIGNAL PROCESSING ALGORITHMS IN FORTRAN AND C\r\n                 * S.D. Stearns and R.A. David, Prentice-Hall, 1992\r\n                 */\r\n                var wcn = (Math.PI * fcn);\r\n\r\n                x /= l;\r\n                if (x < 0)\r\n                    x = 0;\r\n                if (x > 1)\r\n                    x = 1;\r\n                var x2 = x - .5;\r\n\r\n                var bkwn = 0.42 - 0.5 * Math.cos(2 * x * Math.PI) + 0.08 * Math.cos(4 * x * Math.PI);\r\n                if (Math.abs(x2) < 1e-9)\r\n                    return (wcn / Math.PI);\r\n                else\r\n                    return (bkwn * Math.sin(l * wcn * x2) / (Math.PI * l * x2));\r\n            }\r\n\r\n            function fill_buffer_resample(gfp, outbuf, outbufPos, desired_len, inbuf, in_bufferPos, len, num_used, ch) {\r\n                var gfc = gfp.internal_flags;\r\n                var i, j = 0, k;\r\n                /* number of convolution functions to pre-compute */\r\n                var bpc = gfp.out_samplerate\r\n                    / gcd(gfp.out_samplerate, gfp.in_samplerate);\r\n                if (bpc > LameInternalFlags.BPC)\r\n                    bpc = LameInternalFlags.BPC;\r\n\r\n                var intratio = (Math.abs(gfc.resample_ratio\r\n                    - Math.floor(.5 + gfc.resample_ratio)) < .0001) ? 1 : 0;\r\n                var fcn = 1.00 / gfc.resample_ratio;\r\n                if (fcn > 1.00)\r\n                    fcn = 1.00;\r\n                var filter_l = 31;\r\n                if (0 == filter_l % 2)\r\n                    --filter_l;\r\n                /* must be odd */\r\n                filter_l += intratio;\r\n                /* unless resample_ratio=int, it must be even */\r\n\r\n                var BLACKSIZE = filter_l + 1;\r\n                /* size of data needed for FIR */\r\n\r\n                if (gfc.fill_buffer_resample_init == 0) {\r\n                    gfc.inbuf_old[0] = new_float(BLACKSIZE);\r\n                    gfc.inbuf_old[1] = new_float(BLACKSIZE);\r\n                    for (i = 0; i <= 2 * bpc; ++i)\r\n                        gfc.blackfilt[i] = new_float(BLACKSIZE);\r\n\r\n                    gfc.itime[0] = 0;\r\n                    gfc.itime[1] = 0;\r\n\r\n                    /* precompute blackman filter coefficients */\r\n                    for (j = 0; j <= 2 * bpc; j++) {\r\n                        var sum = 0.;\r\n                        var offset = (j - bpc) / (2. * bpc);\r\n                        for (i = 0; i <= filter_l; i++)\r\n                            sum += gfc.blackfilt[j][i] = blackman(i - offset, fcn,\r\n                                filter_l);\r\n                        for (i = 0; i <= filter_l; i++)\r\n                            gfc.blackfilt[j][i] /= sum;\r\n                    }\r\n                    gfc.fill_buffer_resample_init = 1;\r\n                }\r\n\r\n                var inbuf_old = gfc.inbuf_old[ch];\r\n\r\n                /* time of j'th element in inbuf = itime + j/ifreq; */\r\n                /* time of k'th element in outbuf = j/ofreq */\r\n                for (k = 0; k < desired_len; k++) {\r\n                    var time0;\r\n                    var joff;\r\n\r\n                    time0 = k * gfc.resample_ratio;\r\n                    /* time of k'th output sample */\r\n                    j = 0 | Math.floor(time0 - gfc.itime[ch]);\r\n\r\n                    /* check if we need more input data */\r\n                    if ((filter_l + j - filter_l / 2) >= len)\r\n                        break;\r\n\r\n                    /* blackman filter. by default, window centered at j+.5(filter_l%2) */\r\n                    /* but we want a window centered at time0. */\r\n                    var offset = (time0 - gfc.itime[ch] - (j + .5 * (filter_l % 2)));\r\n\r\n                    /* find the closest precomputed window for this offset: */\r\n                    joff = 0 | Math.floor((offset * 2 * bpc) + bpc + .5);\r\n                    var xvalue = 0.;\r\n                    for (i = 0; i <= filter_l; ++i) {\r\n                        var j2 = i + j - filter_l / 2;\r\n                        var y;\r\n                        y = (j2 < 0) ? inbuf_old[BLACKSIZE + j2] : inbuf[in_bufferPos\r\n                        + j2];\r\n                        xvalue += y * gfc.blackfilt[joff][i];\r\n                    }\r\n                    outbuf[outbufPos + k] = xvalue;\r\n                }\r\n\r\n                /* k = number of samples added to outbuf */\r\n                /* last k sample used data from [j-filter_l/2,j+filter_l-filter_l/2] */\r\n\r\n                /* how many samples of input data were used: */\r\n                num_used.num_used = Math.min(len, filter_l + j - filter_l / 2);\r\n\r\n                /*\r\n                 * adjust our input time counter. Incriment by the number of samples\r\n                 * used, then normalize so that next output sample is at time 0, next\r\n                 * input buffer is at time itime[ch]\r\n                 */\r\n                gfc.itime[ch] += num_used.num_used - k * gfc.resample_ratio;\r\n\r\n                /* save the last BLACKSIZE samples into the inbuf_old buffer */\r\n                if (num_used.num_used >= BLACKSIZE) {\r\n                    for (i = 0; i < BLACKSIZE; i++)\r\n                        inbuf_old[i] = inbuf[in_bufferPos + num_used.num_used + i\r\n                        - BLACKSIZE];\r\n                } else {\r\n                    /* shift in num_used.num_used samples into inbuf_old */\r\n                    var n_shift = BLACKSIZE - num_used.num_used;\r\n                    /*\r\n                     * number of samples to\r\n                     * shift\r\n                     */\r\n\r\n                    /*\r\n                     * shift n_shift samples by num_used.num_used, to make room for the\r\n                     * num_used new samples\r\n                     */\r\n                    for (i = 0; i < n_shift; ++i)\r\n                        inbuf_old[i] = inbuf_old[i + num_used.num_used];\r\n\r\n                    /* shift in the num_used.num_used samples */\r\n                    for (j = 0; i < BLACKSIZE; ++i, ++j)\r\n                        inbuf_old[i] = inbuf[in_bufferPos + j];\r\n\r\n                }\r\n                return k;\r\n                /* return the number samples created at the new samplerate */\r\n            }\r\n\r\n            function fill_buffer(gfp, mfbuf, in_buffer, in_bufferPos, nsamples, io) {\r\n                var gfc = gfp.internal_flags;\r\n\r\n                /* copy in new samples into mfbuf, with resampling if necessary */\r\n                if ((gfc.resample_ratio < .9999) || (gfc.resample_ratio > 1.0001)) {\r\n                    for (var ch = 0; ch < gfc.channels_out; ch++) {\r\n                        var numUsed = new NumUsed();\r\n                        io.n_out = fill_buffer_resample(gfp, mfbuf[ch], gfc.mf_size,\r\n                            gfp.framesize, in_buffer[ch], in_bufferPos, nsamples,\r\n                            numUsed, ch);\r\n                        io.n_in = numUsed.num_used;\r\n                    }\r\n                } else {\r\n                    io.n_out = Math.min(gfp.framesize, nsamples);\r\n                    io.n_in = io.n_out;\r\n                    for (var i = 0; i < io.n_out; ++i) {\r\n                        mfbuf[0][gfc.mf_size + i] = in_buffer[0][in_bufferPos + i];\r\n                        if (gfc.channels_out == 2)\r\n                            mfbuf[1][gfc.mf_size + i] = in_buffer[1][in_bufferPos + i];\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        function GetAudio() {\r\n            var parse;\r\n            var mpg;\r\n\r\n            this.setModules = function (parse2, mpg2) {\r\n                parse = parse2;\r\n                mpg = mpg2;\r\n            }\r\n        }\r\n\r\n\r\n        function Parse() {\r\n            var ver;\r\n            var id3;\r\n            var pre;\r\n\r\n            this.setModules = function (ver2, id32, pre2) {\r\n                ver = ver2;\r\n                id3 = id32;\r\n                pre = pre2;\r\n            }\r\n        }\r\n\r\n        function MPGLib() {\r\n        }\r\n\r\n        function ID3Tag() {\r\n            var bits;\r\n            var ver;\r\n\r\n            this.setModules = function (_bits, _ver) {\r\n                bits = _bits;\r\n                ver = _ver;\r\n            }\r\n        }\r\n\r\n        function Mp3Encoder(channels, samplerate, kbps) {\r\n            if (arguments.length != 3) {\r\n                console.error('WARN: Mp3Encoder(channels, samplerate, kbps) not specified');\r\n                channels = 1;\r\n                samplerate = 44100;\r\n                kbps = 128;\r\n            }\r\n            var lame = new Lame();\r\n            var gaud = new GetAudio();\r\n            var ga = new GainAnalysis();\r\n            var bs = new BitStream();\r\n            var p = new Presets();\r\n            var qupvt = new QuantizePVT();\r\n            var qu = new Quantize();\r\n            var vbr = new VBRTag();\r\n            var ver = new Version();\r\n            var id3 = new ID3Tag();\r\n            var rv = new Reservoir();\r\n            var tak = new Takehiro();\r\n            var parse = new Parse();\r\n            var mpg = new MPGLib();\r\n\r\n            lame.setModules(ga, bs, p, qupvt, qu, vbr, ver, id3, mpg);\r\n            bs.setModules(ga, mpg, ver, vbr);\r\n            id3.setModules(bs, ver);\r\n            p.setModules(lame);\r\n            qu.setModules(bs, rv, qupvt, tak);\r\n            qupvt.setModules(tak, rv, lame.enc.psy);\r\n            rv.setModules(bs);\r\n            tak.setModules(qupvt);\r\n            vbr.setModules(lame, bs, ver);\r\n            gaud.setModules(parse, mpg);\r\n            parse.setModules(ver, id3, p);\r\n\r\n            var gfp = lame.lame_init();\r\n\r\n            gfp.num_channels = channels;\r\n            gfp.in_samplerate = samplerate;\r\n            gfp.brate = kbps;\r\n            gfp.mode = MPEGMode.STEREO;\r\n            gfp.quality = 3;\r\n            gfp.bWriteVbrTag = false;\r\n            gfp.disable_reservoir = true;\r\n            gfp.write_id3tag_automatic = false;\r\n\r\n            var retcode = lame.lame_init_params(gfp);\r\n            var maxSamples = 1152;\r\n            var mp3buf_size = 0 | (1.25 * maxSamples + 7200);\r\n            var mp3buf = new_byte(mp3buf_size);\r\n\r\n            this.encodeBuffer = function (left, right) {\r\n                if (channels == 1) {\r\n                    right = left;\r\n                }\r\n                if (left.length > maxSamples) {\r\n                    maxSamples = left.length;\r\n                    mp3buf_size = 0 | (1.25 * maxSamples + 7200);\r\n                    mp3buf = new_byte(mp3buf_size);\r\n                }\r\n\r\n                var _sz = lame.lame_encode_buffer(gfp, left, right, left.length, mp3buf, 0, mp3buf_size);\r\n                return new Int8Array(mp3buf.subarray(0, _sz));\r\n            };\r\n\r\n            this.flush = function () {\r\n                var _sz = lame.lame_encode_flush(gfp, mp3buf, 0, mp3buf_size);\r\n                return new Int8Array(mp3buf.subarray(0, _sz));\r\n            };\r\n        }\r\n\r\n        function WavHeader() {\r\n            this.dataOffset = 0;\r\n            this.dataLen = 0;\r\n            this.channels = 0;\r\n            this.sampleRate = 0;\r\n        }\r\n\r\n        function fourccToInt(fourcc) {\r\n            return fourcc.charCodeAt(0) << 24 | fourcc.charCodeAt(1) << 16 | fourcc.charCodeAt(2) << 8 | fourcc.charCodeAt(3);\r\n        }\r\n\r\n        WavHeader.RIFF = fourccToInt(\"RIFF\");\r\n        WavHeader.WAVE = fourccToInt(\"WAVE\");\r\n        WavHeader.fmt_ = fourccToInt(\"fmt \");\r\n        WavHeader.data = fourccToInt(\"data\");\r\n\r\n        WavHeader.readHeader = function (dataView) {\r\n            var w = new WavHeader();\r\n\r\n            var header = dataView.getUint32(0, false);\r\n            if (WavHeader.RIFF != header) {\r\n                return;\r\n            }\r\n            var fileLen = dataView.getUint32(4, true);\r\n            if (WavHeader.WAVE != dataView.getUint32(8, false)) {\r\n                return;\r\n            }\r\n            if (WavHeader.fmt_ != dataView.getUint32(12, false)) {\r\n                return;\r\n            }\r\n            var fmtLen = dataView.getUint32(16, true);\r\n            var pos = 16 + 4;\r\n            switch (fmtLen) {\r\n                case 16:\r\n                case 18:\r\n                    w.channels = dataView.getUint16(pos + 2, true);\r\n                    w.sampleRate = dataView.getUint32(pos + 4, true);\r\n                    break;\r\n                default:\r\n                    throw 'extended fmt chunk not implemented';\r\n            }\r\n            pos += fmtLen;\r\n            var data = WavHeader.data;\r\n            var len = 0;\r\n            while (data != header) {\r\n                header = dataView.getUint32(pos, false);\r\n                len = dataView.getUint32(pos + 4, true);\r\n                if (data == header) {\r\n                    break;\r\n                }\r\n                pos += (len + 8);\r\n            }\r\n            w.dataLen = len;\r\n            w.dataOffset = pos + 8;\r\n            return w;\r\n        };\r\n\r\n        L3Side.SFBMAX = (Encoder.SBMAX_s * 3);\r\n//testFullLength();\r\n        lamejs.Mp3Encoder = Mp3Encoder;\r\n        lamejs.WavHeader = WavHeader;\r\n    }\r\n//fs=require('fs');\r\n    lamejs();\r\n\r\n    var mp3Encoder, maxSamples = 1152,\r\n        wav, samplesLeft, config, dataBuffer, samplesRight;\r\n    var clearBuffer = function () {\r\n        dataBuffer = [];\r\n    };\r\n\r\n    var appendToBuffer = function (mp3Buf) {\r\n        dataBuffer.push(new Int8Array(mp3Buf));\r\n    };\r\n\r\n\r\n    var init = function (prefConfig) {\r\n        config = prefConfig || {};\r\n        clearBuffer();\r\n    };\r\n\r\n    var encode = function (arrayBuffer) {\r\n        wav = lamejs.WavHeader.readHeader(new DataView(arrayBuffer));\r\n        if (!wav) {\r\n            self.postMessage({cmd: \"error\", msg: \"Specified file is not a Wave file\"});\r\n            return;\r\n        }\r\n\r\n        var dataView = new Int16Array(arrayBuffer, wav.dataOffset, wav.dataLen / 2);\r\n        samplesLeft = wav.channels === 1 ? dataView : new Int16Array(wav.dataLen / (2 * wav.channels));\r\n        samplesRight = wav.channels === 2 ? new Int16Array(wav.dataLen / (2 * wav.channels)) : undefined;\r\n        if (wav.channels > 1) {\r\n            for (var i = 0; i < samplesLeft.length; i++) {\r\n                samplesLeft[i] = dataView[i * 2];\r\n                samplesRight[i] = dataView[i * 2 + 1];\r\n            }\r\n        }\r\n\r\n        mp3Encoder = new lamejs.Mp3Encoder(wav.channels, wav.sampleRate, config.bitRate || 96);\r\n\r\n        var remaining = samplesLeft.length;\r\n        for (var i = 0; remaining >= maxSamples; i += maxSamples) {\r\n            var left = samplesLeft.subarray(i, i + maxSamples);\r\n            var right;\r\n            if (samplesRight) {\r\n                right = samplesRight.subarray(i, i + maxSamples);\r\n            }\r\n            var mp3buf = mp3Encoder.encodeBuffer(left, right);\r\n            appendToBuffer(mp3buf);\r\n            remaining -= maxSamples;\r\n            self.postMessage({\r\n                cmd: \"progress\",\r\n                progress: (1 - remaining / samplesLeft.length)\r\n            });\r\n        }\r\n    };\r\n\r\n    var finish = function () {\r\n        if (!wav) {\r\n            return;\r\n        }\r\n        var mp3buf = mp3Encoder.flush();\r\n        appendToBuffer(mp3buf);\r\n        self.postMessage({\r\n            cmd: \"end\",\r\n            buf: dataBuffer\r\n        });\r\n        clearBuffer(); //free up memory\r\n    };\r\n    self.onmessage = function (e) {\r\n        switch (e.data.cmd) {\r\n            case \"init\":\r\n                init(e.data.config);\r\n                break;\r\n\r\n            case \"encode\":\r\n                encode(e.data.rawInput);\r\n                break;\r\n\r\n            case \"finish\":\r\n                finish();\r\n                break;\r\n        }\r\n    };\r\n};\r\n\r\nlet code = workercode.toString();\r\ncode = code.substring(code.indexOf(\"{\") + 1, code.lastIndexOf(\"}\"));\r\n\r\nconst blob = new Blob([code], {type: \"application/javascript\"});\r\nconst worker_script = URL.createObjectURL(blob);\r\n\r\nmodule.exports = worker_script;\r\n\r\n\r\n\r\n\r\n\r\n"]}